--- s-k-the-call.cpp	2013-08-17 15:13:05.305206625 -0700
+++ edited.cpp	2013-08-17 14:30:39.217152506 -0700
@@ -789,18 +789,22 @@
     /* FlowsTo[*] + (InstFldFT[a] *) => %2[a] */
     in_iter = get_in_edge_iterator(base->from, 7);
     while ((other = next_in_edge(in_iter)) != NULL) {
-      add_edge(other->from, base->to, 9, other->index, other, false, base, false);
+      INDEX cf_idx = (base->index << 14) | other->index;
+      add_edge(other->from, base->to, 9, cf_idx, other, false, base, false);
     }
     /* FlowsTo[a] + (* storeRef[*]) => %3[a] */
     out_iter = get_out_edge_iterator(base->to, 10);
     while ((other = next_out_edge(out_iter)) != NULL) {
-      add_edge(base->from, other->to, 11, base->index, base, false, other, false);
+      INDEX cf_idx = (base->index << 14) | other->index;
+      add_edge(base->from, other->to, 11, cf_idx, base, false, other, false);
     }
     /* _FlowsTo[a] + (%3[a] *) => InstFldFT[a] */
     in_iter = get_in_edge_iterator(base->to, 11);
     while ((other = next_in_edge(in_iter)) != NULL) {
-      if (base->index == other->index) {
-        add_edge(other->from, base->from, 7, base->index, other, false, base, true);
+      INDEX c_idx = other->index >> 14;
+      INDEX f_idx = other->index & 0x3fff;
+      if (base->index == c_idx) {
+        add_edge(other->from, base->from, 7, f_idx, other, false, base, true);
       }
     }
     /* FlowsTo[a] + (* arrStoreRef) => %4[a] */
@@ -880,7 +884,8 @@
     /* FlowsTo[*] + (Label2PrimFld[a] *) => %10[a] */
     in_iter = get_in_edge_iterator(base->from, 43);
     while ((other = next_in_edge(in_iter)) != NULL) {
-      add_edge(other->from, base->to, 45, other->index, other, false, base, false);
+      INDEX cf_idx = (base->index << 14) | other->index;
+      add_edge(other->from, base->to, 45, cf_idx, other, false, base, false);
     }
     /* FlowsTo[a] + (LabelObjIn *) => %11[a] */
     in_iter = get_in_edge_iterator(base->from, 26);
@@ -895,8 +900,10 @@
     /* _FlowsTo[a] + (%13[a] *) => Label2PrimFld[a] */
     in_iter = get_in_edge_iterator(base->to, 51);
     while ((other = next_in_edge(in_iter)) != NULL) {
-      if (base->index == other->index) {
-        add_edge(other->from, base->from, 43, base->index, other, false, base, true);
+      INDEX c_idx = other->index >> 14;
+      INDEX f_idx = other->index & 0x3fff;
+      if (base->index == c_idx) {
+        add_edge(other->from, base->from, 43, f_idx, other, false, base, true);
       }
     }
     /* _FlowsTo[a] + (%14[a] *) => Label2PrimArrEl */
@@ -972,7 +979,8 @@
     /* InstFldFT[a] + (* FlowsTo[*]) => %2[a] */
     out_iter = get_out_edge_iterator(base->to, 0);
     while ((other = next_out_edge(out_iter)) != NULL) {
-      add_edge(base->from, other->to, 9, base->index, base, false, other, false);
+      INDEX cf_idx = (other->index << 14) | base->index;
+      add_edge(base->from, other->to, 9, cf_idx, base, false, other, false);
     }
     /* _InstFldFT[*] + (LabelObjIn *) => LabelObjIn */
     in_iter = get_in_edge_iterator(base->to, 26);
@@ -989,36 +997,45 @@
     /* loadRef[a] + (%2[a] *) => FlowsTo[a] */
     in_iter = get_in_edge_iterator(base->from, 9);
     while ((other = next_in_edge(in_iter)) != NULL) {
-      if (base->index == other->index) {
-        add_edge(other->from, base->to, 0, base->index, other, false, base, false);
+      INDEX c_idx = other->index >> 14;
+      INDEX f_idx = other->index & 0x3fff;
+      if (base->index == f_idx) {
+        add_edge(other->from, base->to, 0, c_idx, other, false, base, false);
       }
     }
     break;
-  case 9: /* %2 */
+  case 9: /* %2 */ {
     /* %2[a] + (* loadRef[a]) => FlowsTo[a] */
+    INDEX c_idx = base->index >> 14;
+    INDEX f_idx = base->index & 0x3fff;
     out_iter = get_out_edge_iterator(base->to, 8);
     while ((other = next_out_edge(out_iter)) != NULL) {
-      if (base->index == other->index) {
-        add_edge(base->from, other->to, 0, base->index, base, false, other, false);
+      if (f_idx == other->index) {
+        add_edge(base->from, other->to, 0, c_idx, base, false, other, false);
       }
     }
     break;
+  }
   case 10: /* storeRef */
     /* storeRef[*] + (FlowsTo[a] *) => %3[a] */
     in_iter = get_in_edge_iterator(base->from, 0);
     while ((other = next_in_edge(in_iter)) != NULL) {
-      add_edge(other->from, base->to, 11, other->index, other, false, base, false);
+      INDEX cf_idx = (other->index << 14) | base->index;
+      add_edge(other->from, base->to, 11, cf_idx, other, false, base, false);
     }
     break;
-  case 11: /* %3 */
+  case 11: /* %3 */ {
     /* %3[a] + (* _FlowsTo[a]) => InstFldFT[a] */
+    INDEX c_idx = base->index >> 14;
+    INDEX f_idx = base->index & 0x3fff;
     in_iter = get_in_edge_iterator(base->to, 0);
     while ((other = next_in_edge(in_iter)) != NULL) {
-      if (base->index == other->index) {
-        add_edge(base->from, other->from, 7, base->index, base, false, other, true);
+      if (c_idx == other->index) {
+        add_edge(base->from, other->from, 7, f_idx, base, false, other, true);
       }
     }
     break;
+  }
   case 12: /* ArrElemFT */
     /* ArrElemFT + (* Obj2Ref[a]) => Obj2Ref[a] */
     out_iter = get_out_edge_iterator(base->to, 20);
@@ -1287,7 +1304,8 @@
     /* Label2Prim[a] + (* storePrim[*]) => %13[a] */
     out_iter = get_out_edge_iterator(base->to, 50);
     while ((other = next_out_edge(out_iter)) != NULL) {
-      add_edge(base->from, other->to, 51, base->index, base, false, other, false);
+      INDEX cf_idx = (base->index << 14) | other->index;
+      add_edge(base->from, other->to, 51, cf_idx, base, false, other, false);
     }
     /* Label2Prim[a] + (* arrStorePrim) => %14[a] */
     out_iter = get_out_edge_iterator(base->to, 52);
@@ -1394,7 +1412,8 @@
     /* Label2PrimFld[a] + (* FlowsTo[*]) => %10[a] */
     out_iter = get_out_edge_iterator(base->to, 0);
     while ((other = next_out_edge(out_iter)) != NULL) {
-      add_edge(base->from, other->to, 45, base->index, base, false, other, false);
+      INDEX cf_idx = (other->index << 14) | base->index;
+      add_edge(base->from, other->to, 45, cf_idx, base, false, other, false);
     }
     /* Label2PrimFld[*] + (srcLabel *) => %23 */
     in_iter = get_in_edge_iterator(base->from, 69);
@@ -1406,8 +1425,10 @@
     /* loadPrim[a] + (%10[a] *) => Label2Prim[a] */
     in_iter = get_in_edge_iterator(base->from, 45);
     while ((other = next_in_edge(in_iter)) != NULL) {
-      if (base->index == other->index) {
-        add_edge(other->from, base->to, 32, base->index, other, false, base, false);
+      INDEX c_idx = other->index >> 14;
+      INDEX f_idx = other->index & 0x3fff;
+      if (base->index == f_idx) {
+        add_edge(other->from, base->to, 32, c_idx, other, false, base, false);
       }
     }
     /* loadPrim[*] + (%11[a] *) => Label2Prim[a] */
@@ -1416,15 +1437,18 @@
       add_edge(other->from, base->to, 32, other->index, other, false, base, false);
     }
     break;
-  case 45: /* %10 */
+  case 45: /* %10 */ {
     /* %10[a] + (* loadPrim[a]) => Label2Prim[a] */
+    INDEX c_idx = base->index >> 14;
+    INDEX f_idx = base->index & 0x3fff;
     out_iter = get_out_edge_iterator(base->to, 44);
     while ((other = next_out_edge(out_iter)) != NULL) {
-      if (base->index == other->index) {
-        add_edge(base->from, other->to, 32, base->index, base, false, other, false);
+      if (f_idx == other->index) {
+        add_edge(base->from, other->to, 32, c_idx, base, false, other, false);
       }
     }
     break;
+  }
   case 46: /* %11 */
     /* %11[a] + (* loadPrim[*]) => Label2Prim[a] */
     out_iter = get_out_edge_iterator(base->to, 44);
@@ -1457,18 +1481,22 @@
     /* storePrim[*] + (Label2Prim[a] *) => %13[a] */
     in_iter = get_in_edge_iterator(base->from, 32);
     while ((other = next_in_edge(in_iter)) != NULL) {
-      add_edge(other->from, base->to, 51, other->index, other, false, base, false);
+      INDEX cf_idx = (other->index << 14) | base->index;
+      add_edge(other->from, base->to, 51, cf_idx, other, false, base, false);
     }
     break;
-  case 51: /* %13 */
+  case 51: /* %13 */ {
     /* %13[a] + (* _FlowsTo[a]) => Label2PrimFld[a] */
+    INDEX c_idx = base->index >> 14;
+    INDEX f_idx = base->index & 0x3fff;
     in_iter = get_in_edge_iterator(base->to, 0);
     while ((other = next_in_edge(in_iter)) != NULL) {
-      if (base->index == other->index) {
-        add_edge(base->from, other->from, 43, base->index, base, false, other, true);
+      if (c_idx == other->index) {
+        add_edge(base->from, other->from, 43, f_idx, base, false, other, true);
       }
     }
     break;
+  }
   case 52: /* arrStorePrim */
     /* arrStorePrim + (Label2Prim[a] *) => %14[a] */
     in_iter = get_in_edge_iterator(base->from, 32);
@@ -1697,10 +1725,12 @@
     /* FlowsTo[a] :: %2[a] loadRef[a] */
     l_out_iter = get_out_edge_iterator(from, 9);
     while ((l = next_out_edge(l_out_iter)) != NULL) {
-      if (l->index == e->index) {
+      INDEX c_idx = l->index >> 14;
+      INDEX f_idx = l->index & 0x3fff;
+      if (c_idx == e->index) {
         r_out_iter = get_out_edge_iterator_to_target(l->to, to, 8);
         while ((r = next_out_edge(r_out_iter)) != NULL) {
-          if (l->index == r->index) {
+          if (f_idx == r->index) {
             derivs.push_back(derivation_double(l, false, r, false));
           }
         }
@@ -1738,40 +1768,52 @@
     /* InstFldFT[a] :: %3[a] _FlowsTo[a] */
     l_out_iter = get_out_edge_iterator(from, 11);
     while ((l = next_out_edge(l_out_iter)) != NULL) {
-      if (l->index == e->index) {
+      INDEX c_idx = l->index >> 14;
+      INDEX f_idx = l->index & 0x3fff;
+      if (f_idx == e->index) {
         r_out_iter = get_out_edge_iterator_to_target(to, l->to, 0);
         while ((r = next_out_edge(r_out_iter)) != NULL) {
-          if (l->index == r->index) {
+          if (c_idx == r->index) {
             derivs.push_back(derivation_double(l, false, r, true));
           }
         }
       }
     }
     break;
-  case 9: /* %2 */
+  case 9: /* %2 */ {
     /* %2[a] :: InstFldFT[a] FlowsTo[*] */
+    INDEX c_idx = e->index >> 14;
+    INDEX f_idx = e->index & 0x3fff;
     l_out_iter = get_out_edge_iterator(from, 7);
     while ((l = next_out_edge(l_out_iter)) != NULL) {
-      if (l->index == e->index) {
+      if (l->index == f_idx) {
         r_out_iter = get_out_edge_iterator_to_target(l->to, to, 0);
         while ((r = next_out_edge(r_out_iter)) != NULL) {
-          derivs.push_back(derivation_double(l, false, r, false));
+	  if (r->index == c_idx) {
+            derivs.push_back(derivation_double(l, false, r, false));
+	  }
         }
       }
     }
     break;
-  case 11: /* %3 */
+  }
+  case 11: /* %3 */ {
     /* %3[a] :: FlowsTo[a] storeRef[*] */
+    INDEX c_idx = e->index >> 14;
+    INDEX f_idx = e->index & 0x3fff;
     l_out_iter = get_out_edge_iterator(from, 0);
     while ((l = next_out_edge(l_out_iter)) != NULL) {
-      if (l->index == e->index) {
+      if (l->index == c_idx) {
         r_out_iter = get_out_edge_iterator_to_target(l->to, to, 10);
         while ((r = next_out_edge(r_out_iter)) != NULL) {
-          derivs.push_back(derivation_double(l, false, r, false));
+	  if (r->index == f_idx) {
+	    derivs.push_back(derivation_double(l, false, r, false));
+          }
         }
       }
     }
     break;
+  }
   case 12: /* ArrElemFT */
     /* ArrElemFT :: %4[a] _FlowsTo[a] */
     l_out_iter = get_out_edge_iterator(from, 14);
@@ -2051,10 +2093,12 @@
     /* Label2Prim[a] :: %10[a] loadPrim[a] */
     l_out_iter = get_out_edge_iterator(from, 45);
     while ((l = next_out_edge(l_out_iter)) != NULL) {
-      if (l->index == e->index) {
+      INDEX c_idx = l->index >> 14;
+      INDEX f_idx = l->index & 0x3fff;
+      if (c_idx == e->index) {
         r_out_iter = get_out_edge_iterator_to_target(l->to, to, 44);
         while ((r = next_out_edge(r_out_iter)) != NULL) {
-          if (l->index == r->index) {
+          if (f_idx == r->index) {
             derivs.push_back(derivation_double(l, false, r, false));
           }
         }
@@ -2147,28 +2191,35 @@
     /* Label2PrimFld[a] :: %13[a] _FlowsTo[a] */
     l_out_iter = get_out_edge_iterator(from, 51);
     while ((l = next_out_edge(l_out_iter)) != NULL) {
-      if (l->index == e->index) {
+      INDEX c_idx = l->index >> 14;
+      INDEX f_idx = l->index & 0x3fff;
+      if (f_idx == e->index) {
         r_out_iter = get_out_edge_iterator_to_target(to, l->to, 0);
         while ((r = next_out_edge(r_out_iter)) != NULL) {
-          if (l->index == r->index) {
+          if (c_idx == r->index) {
             derivs.push_back(derivation_double(l, false, r, true));
           }
         }
       }
     }
     break;
-  case 45: /* %10 */
+  case 45: /* %10 */ {
     /* %10[a] :: Label2PrimFld[a] FlowsTo[*] */
+    INDEX c_idx = e->index >> 14;
+    INDEX f_idx = e->index & 0x3fff;
     l_out_iter = get_out_edge_iterator(from, 43);
     while ((l = next_out_edge(l_out_iter)) != NULL) {
-      if (l->index == e->index) {
+      if (l->index == f_idx) {
         r_out_iter = get_out_edge_iterator_to_target(l->to, to, 0);
         while ((r = next_out_edge(r_out_iter)) != NULL) {
-          derivs.push_back(derivation_double(l, false, r, false));
+	  if (r->index == c_idx) {
+            derivs.push_back(derivation_double(l, false, r, false));
+	  }
         }
       }
     }
     break;
+  }
   case 46: /* %11 */
     /* %11[a] :: LabelObjIn FlowsTo[a] */
     l_out_iter = get_out_edge_iterator(from, 26);
@@ -2193,18 +2244,23 @@
       }
     }
     break;
-  case 51: /* %13 */
+  case 51: /* %13 */ {
     /* %13[a] :: Label2Prim[a] storePrim[*] */
+    INDEX c_idx = e->index >> 14;
+    INDEX f_idx = e->index & 0x3fff;
     l_out_iter = get_out_edge_iterator(from, 32);
     while ((l = next_out_edge(l_out_iter)) != NULL) {
-      if (l->index == e->index) {
+      if (l->index == c_idx) {
         r_out_iter = get_out_edge_iterator_to_target(l->to, to, 50);
         while ((r = next_out_edge(r_out_iter)) != NULL) {
-          derivs.push_back(derivation_double(l, false, r, false));
+	  if (r->index == f_idx) {
+            derivs.push_back(derivation_double(l, false, r, false));
+	  }
         }
       }
     }
     break;
+  }
   case 53: /* %14 */
     /* %14[a] :: Label2Prim[a] arrStorePrim */
     l_out_iter = get_out_edge_iterator(from, 32);
