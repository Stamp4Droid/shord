# Field-sensitive, k-CFA-based, heap-flow-based, taint-flow-based taint
# analysis.

# Derived from Chord analysis formulation

# Handles:
# - [X] Points-to information
# - [X] Taint flow
#   - [X] Reference-type
#   - [X] Primitive-type
# - [X] Passthroughs
#   - [X] ref-to-ref
#   - [X] prim-to-prim
#   - [X] ref-to-prim
#   - [X] prim-to-ref
# - [-] Nested object tainting (ref, prim)
#   - [X] models tainting existing objects (arbitrarily deeply)
#   - [ ] models allocating (and arbitrarily sub-tainting) new objects
# - [X] Nested object escaping (ref, prim)
# - [ ] Nested passthrough taint (ref, prim)
# - [X] Non-full passthrough variants
# - ...

# Points-to rules
FlowsTo :: cs_refAlloc
         | FlowsTo cs_refAssign
         | _InstFldPt[f] FlowsTo cs_refLoad[f]
InstFldPt[f] :: FlowsTo _cs_refStore[f] _FlowsTo

# Basic taint propagation rules
Src2Obj :: cs_srcRefFlow _FlowsTo
Src2Prim :: cs_srcPrimFlow
          | Src2Prim cs_primAssign
          | Src2ObjPrimFld[f] FlowsTo cs_primLoad[f]
Src2ObjPrimFld[f] :: Src2Prim cs_primStore[f] _FlowsTo
Obj2Sink :: FlowsTo cs_refSinkFlow
Src2Sink :: Src2Obj Obj2Sink
          | Src2Prim cs_primSinkFlow

# Passthrough handling
Src2Ref :: Src2Obj FlowsTo
Src2Obj :: Src2Ref cs_refRefFlow _FlowsTo
         | Src2Prim cs_primRefFlow _FlowsTo
Src2Prim :: Src2Prim cs_primPrimFlow
          | Src2Ref cs_refPrimFlow

# Nested taint rules
# o tainted => o.* tainted
Src2Obj :: Src2Obj InstFldPt[*]
Src2ObjPrimFld[*] :: Src2Obj
# o escapes => o.* escapes
Obj2Sink :: _InstFldPt[*] Obj2Sink
Src2Sink :: Src2ObjPrimFld[*] Obj2Sink
