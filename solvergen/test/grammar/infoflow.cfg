# A variant of the  test grammar, augmented with a rudimentary understanding of
# dynamic information flow control policy. Intended to demonstrate the use of
# relations.

# Given a program with no confidentiality level annotations for the variables,
# plus the confidentiality level of its inputs, this grammar will infer an
# overapproximation of all locations where the input could flow at runtime, and
# under what classification level.

# There's two confidentiality levels, Low and High, represented by indices 0
# and 1 respectively. Assignments are also annotated according to their kind:
# regular (0) or declassifying (1) (declassifying assignments are the only
# statements that can propagate information from a High location to a Low
# location).

# To simplify the grammar, call string matching was ignored.

InfoFlow[l] :: inputLvl[l]
	     | InfoFlow[l] param[*]
	     | InfoFlow[l] ret[*]
             | InfoFlow[a] assign[b] .allowed(a,b,l)
