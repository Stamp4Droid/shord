<java.lang.String: int compareToIgnoreCase(java.lang.String)>
<java.lang.String: boolean endsWith(java.lang.String)>
<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.lang.String: int hashCode()>
<java.lang.String: int indexOf(int)>
<java.lang.String: int indexOf(int,int)>
<java.lang.String: int indexOf(java.lang.String)>
<java.lang.String: int indexOf(java.lang.String,int)>
<java.lang.String: int lastIndexOf(int)>
<java.lang.String: int lastIndexOf(int,int)>
<java.lang.String: int lastIndexOf(java.lang.String)>
<java.lang.String: int lastIndexOf(java.lang.String,int)>
<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>
<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>
<java.lang.String: boolean contentEquals(java.lang.StringBuffer)>
<java.lang.String: boolean contentEquals(java.lang.CharSequence)>
<java.lang.String: boolean matches(java.lang.String)>
<java.lang.String: int codePointAt(int)>
<java.lang.String: int codePointBefore(int)>
<java.lang.String: int codePointCount(int,int)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.lang.String: int offsetByCodePoints(int,int)>
<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>
<java.lang.Throwable: java.lang.String getMessage()>
<java.lang.Throwable: java.lang.String getLocalizedMessage()>
<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>
<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>
<java.lang.Throwable: void printStackTrace()>
<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>
<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>
<java.lang.Throwable: java.lang.String toString()>
<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>
<java.lang.Throwable: java.lang.Throwable getCause()>
<java.lang.Object: void <init>()>
<java.lang.Object: boolean equals(java.lang.Object)>
<java.lang.Object: void finalize()>
<java.lang.Object: void wait()>
<java.lang.Object: void wait(long)>
<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>
<java.util.Locale: java.lang.Object clone()>
<java.util.Locale: boolean equals(java.lang.Object)>
<java.util.Locale: java.util.Locale[] getAvailableLocales()>
<java.util.Locale: java.lang.String getCountry()>
<java.util.Locale: java.util.Locale getDefault()>
<java.util.Locale: java.lang.String getDisplayCountry()>
<java.util.Locale: java.lang.String getDisplayCountry(java.util.Locale)>
<java.util.Locale: java.lang.String getDisplayLanguage()>
<java.util.Locale: java.lang.String getDisplayLanguage(java.util.Locale)>
<java.util.Locale: java.lang.String getDisplayName()>
<java.util.Locale: java.lang.String getDisplayName(java.util.Locale)>
<java.util.Locale: java.lang.String getDisplayVariant()>
<java.util.Locale: java.lang.String getDisplayVariant(java.util.Locale)>
<java.util.Locale: java.lang.String getISO3Country()>
<java.util.Locale: java.lang.String getISO3Language()>
<java.util.Locale: java.lang.String[] getISOCountries()>
<java.util.Locale: java.lang.String[] getISOLanguages()>
<java.util.Locale: java.lang.String getLanguage()>
<java.util.Locale: java.lang.String getVariant()>
<java.util.Locale: int hashCode()>
<java.util.Locale: void setDefault(java.util.Locale)>
<java.util.Locale: java.lang.String toString()>
<java.nio.charset.Charset: java.util.SortedMap availableCharsets()>
<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>
<java.nio.charset.Charset: boolean isSupported(java.lang.String)>
<java.nio.charset.Charset: java.lang.String name()>
<java.nio.charset.Charset: java.util.Set aliases()>
<java.nio.charset.Charset: java.lang.String displayName()>
<java.nio.charset.Charset: java.lang.String displayName(java.util.Locale)>
<java.nio.charset.Charset: boolean isRegistered()>
<java.nio.charset.Charset: boolean canEncode()>
<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)>
<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.lang.String)>
<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>
<java.nio.charset.Charset: int compareTo(java.nio.charset.Charset)>
<java.nio.charset.Charset: boolean equals(java.lang.Object)>
<java.nio.charset.Charset: int hashCode()>
<java.nio.charset.Charset: java.lang.String toString()>
<java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>
<java.lang.StringBuffer: char charAt(int)>
<java.lang.StringBuffer: int codePointAt(int)>
<java.lang.StringBuffer: int codePointBefore(int)>
<java.lang.StringBuffer: int codePointCount(int,int)>
<java.lang.StringBuffer: void ensureCapacity(int)>
<java.lang.StringBuffer: int indexOf(java.lang.String,int)>
<java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)>
<java.lang.StringBuffer: int offsetByCodePoints(int,int)>
<java.lang.StringBuffer: void setCharAt(int,char)>
<java.lang.StringBuffer: void setLength(int)>
<java.lang.StringBuffer: void trimToSize()>
<java.io.PrintWriter: boolean checkError()>
<java.io.PrintWriter: void clearError()>
<java.io.PrintWriter: void close()>
<java.io.PrintWriter: void flush()>
<java.io.PrintWriter: java.io.PrintWriter format(java.lang.String,java.lang.Object[])>
<java.io.PrintWriter: java.io.PrintWriter format(java.util.Locale,java.lang.String,java.lang.Object[])>
<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>
<java.io.PrintWriter: java.io.PrintWriter printf(java.util.Locale,java.lang.String,java.lang.Object[])>
<java.io.PrintWriter: void print(char[])>
<java.io.PrintWriter: void print(char)>
<java.io.PrintWriter: void print(double)>
<java.io.PrintWriter: void print(float)>
<java.io.PrintWriter: void print(int)>
<java.io.PrintWriter: void print(long)>
<java.io.PrintWriter: void print(java.lang.Object)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.io.PrintWriter: void print(boolean)>
<java.io.PrintWriter: void println()>
<java.io.PrintWriter: void println(char[])>
<java.io.PrintWriter: void println(char)>
<java.io.PrintWriter: void println(double)>
<java.io.PrintWriter: void println(float)>
<java.io.PrintWriter: void println(int)>
<java.io.PrintWriter: void println(long)>
<java.io.PrintWriter: void println(java.lang.Object)>
<java.io.PrintWriter: void println(java.lang.String)>
<java.io.PrintWriter: void println(boolean)>
<java.io.PrintWriter: void setError()>
<java.io.PrintWriter: void write(char[])>
<java.io.PrintWriter: void write(char[],int,int)>
<java.io.PrintWriter: void write(int)>
<java.io.PrintWriter: void write(java.lang.String)>
<java.io.PrintWriter: void write(java.lang.String,int,int)>
<java.io.PrintWriter: java.io.PrintWriter append(char)>
<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>
<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence,int,int)>
<java.io.PrintStream: boolean checkError()>
<java.io.PrintStream: void clearError()>
<java.io.PrintStream: void close()>
<java.io.PrintStream: void flush()>
<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>
<java.io.PrintStream: java.io.PrintStream format(java.util.Locale,java.lang.String,java.lang.Object[])>
<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>
<java.io.PrintStream: java.io.PrintStream printf(java.util.Locale,java.lang.String,java.lang.Object[])>
<java.io.PrintStream: void print(char[])>
<java.io.PrintStream: void print(char)>
<java.io.PrintStream: void print(double)>
<java.io.PrintStream: void print(float)>
<java.io.PrintStream: void print(int)>
<java.io.PrintStream: void print(long)>
<java.io.PrintStream: void print(java.lang.Object)>
<java.io.PrintStream: void print(java.lang.String)>
<java.io.PrintStream: void print(boolean)>
<java.io.PrintStream: void println()>
<java.io.PrintStream: void println(char[])>
<java.io.PrintStream: void println(char)>
<java.io.PrintStream: void println(double)>
<java.io.PrintStream: void println(float)>
<java.io.PrintStream: void println(int)>
<java.io.PrintStream: void println(long)>
<java.io.PrintStream: void println(java.lang.Object)>
<java.io.PrintStream: void println(java.lang.String)>
<java.io.PrintStream: void println(boolean)>
<java.io.PrintStream: void setError()>
<java.io.PrintStream: void write(byte[],int,int)>
<java.io.PrintStream: void write(int)>
<java.io.PrintStream: java.io.PrintStream append(char)>
<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>
<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence,int,int)>
<java.lang.StackTraceElement: boolean equals(java.lang.Object)>
<java.lang.StackTraceElement: java.lang.String getClassName()>
<java.lang.StackTraceElement: java.lang.String getFileName()>
<java.lang.StackTraceElement: int getLineNumber()>
<java.lang.StackTraceElement: java.lang.String getMethodName()>
<java.lang.StackTraceElement: int hashCode()>
<java.lang.StackTraceElement: boolean isNativeMethod()>
<java.lang.StackTraceElement: java.lang.String toString()>
<java.lang.Class: java.lang.Class forName(java.lang.String)>
<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
<java.lang.Class: java.lang.Class[] getClasses()>
<java.lang.Class: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<java.lang.Class: java.lang.annotation.Annotation[] getAnnotations()>
<java.lang.Class: java.lang.String getCanonicalName()>
<java.lang.Class: java.lang.ClassLoader getClassLoader()>
<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>
<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>
<java.lang.Class: java.lang.Class[] getDeclaredClasses()>
<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>
<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>
<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>
<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>
<java.lang.Class: java.lang.Object[] getEnumConstants()>
<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>
<java.lang.Class: java.lang.reflect.Field[] getFields()>
<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>
<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>
<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
<java.lang.Class: java.lang.reflect.Method[] getMethods()>
<java.lang.Class: int getModifiers()>
<java.lang.Class: java.lang.String getName()>
<java.lang.Class: java.lang.String getSimpleName()>
<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>
<java.lang.Class: java.net.URL getResource(java.lang.String)>
<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>
<java.lang.Class: java.lang.Object[] getSigners()>
<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>
<java.lang.Class: boolean isAnnotation()>
<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>
<java.lang.Class: boolean isArray()>
<java.lang.Class: boolean isEnum()>
<java.lang.Class: boolean isLocalClass()>
<java.lang.Class: boolean isMemberClass()>
<java.lang.Class: boolean isSynthetic()>
<java.lang.Class: java.lang.Object newInstance()>
<java.lang.Class: java.lang.String toString()>
<java.lang.Class: java.lang.Package getPackage()>
<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>
<java.lang.Class: java.lang.Object cast(java.lang.Object)>
<java.lang.AbstractStringBuilder: int capacity()>
<java.lang.AbstractStringBuilder: char charAt(int)>
<java.lang.AbstractStringBuilder: void ensureCapacity(int)>
<java.lang.AbstractStringBuilder: void getChars(int,int,char[],int)>
<java.lang.AbstractStringBuilder: int length()>
<java.lang.AbstractStringBuilder: void setCharAt(int,char)>
<java.lang.AbstractStringBuilder: void setLength(int)>
<java.lang.AbstractStringBuilder: java.lang.String substring(int)>
<java.lang.AbstractStringBuilder: java.lang.String substring(int,int)>
<java.lang.AbstractStringBuilder: java.lang.String toString()>
<java.lang.AbstractStringBuilder: java.lang.CharSequence subSequence(int,int)>
<java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>
<java.lang.AbstractStringBuilder: int indexOf(java.lang.String,int)>
<java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>
<java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String,int)>
<java.lang.AbstractStringBuilder: void trimToSize()>
<java.lang.AbstractStringBuilder: int codePointAt(int)>
<java.lang.AbstractStringBuilder: int codePointBefore(int)>
<java.lang.AbstractStringBuilder: int codePointCount(int,int)>
<java.lang.AbstractStringBuilder: int offsetByCodePoints(int,int)>
<java.nio.charset.CharsetEncoder: float averageBytesPerChar()>
<java.nio.charset.CharsetEncoder: boolean canEncode(char)>
<java.nio.charset.CharsetEncoder: boolean canEncode(java.lang.CharSequence)>
<java.nio.charset.CharsetEncoder: java.nio.charset.Charset charset()>
<java.nio.charset.CharsetEncoder: java.nio.ByteBuffer encode(java.nio.CharBuffer)>
<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>
<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult flush(java.nio.ByteBuffer)>
<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult implFlush(java.nio.ByteBuffer)>
<java.nio.charset.CharsetEncoder: void implOnMalformedInput(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetEncoder: void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetEncoder: void implReplaceWith(byte[])>
<java.nio.charset.CharsetEncoder: void implReset()>
<java.nio.charset.CharsetEncoder: boolean isLegalReplacement(byte[])>
<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction malformedInputAction()>
<java.nio.charset.CharsetEncoder: float maxBytesPerChar()>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetEncoder: byte[] replacement()>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder replaceWith(byte[])>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>
<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction unmappableCharacterAction()>
<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>
<java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>
<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>
<java.nio.ByteBuffer: int arrayOffset()>
<java.nio.ByteBuffer: int compareTo(java.nio.ByteBuffer)>
<java.nio.ByteBuffer: boolean equals(java.lang.Object)>
<java.nio.ByteBuffer: boolean hasArray()>
<java.nio.ByteBuffer: int hashCode()>
<java.nio.ByteBuffer: java.nio.ByteOrder order()>
<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>
<java.nio.charset.CharsetDecoder: float averageCharsPerByte()>
<java.nio.charset.CharsetDecoder: java.nio.charset.Charset charset()>
<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>
<java.nio.charset.CharsetDecoder: java.nio.charset.Charset detectedCharset()>
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult flush(java.nio.CharBuffer)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult implFlush(java.nio.CharBuffer)>
<java.nio.charset.CharsetDecoder: void implOnMalformedInput(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetDecoder: void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetDecoder: void implReplaceWith(java.lang.String)>
<java.nio.charset.CharsetDecoder: void implReset()>
<java.nio.charset.CharsetDecoder: boolean isAutoDetecting()>
<java.nio.charset.CharsetDecoder: boolean isCharsetDetected()>
<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction malformedInputAction()>
<java.nio.charset.CharsetDecoder: float maxCharsPerByte()>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<java.nio.charset.CharsetDecoder: java.lang.String replacement()>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder replaceWith(java.lang.String)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>
<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction unmappableCharacterAction()>
<java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>
<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>
<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>
<java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>
<java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence,int,int)>
<java.nio.CharBuffer: int arrayOffset()>
<java.nio.CharBuffer: int compareTo(java.nio.CharBuffer)>
<java.nio.CharBuffer: boolean equals(java.lang.Object)>
<java.nio.CharBuffer: boolean hasArray()>
<java.nio.CharBuffer: int hashCode()>
<java.nio.CharBuffer: int length()>
<java.io.Writer: void write(char[])>
<java.io.Writer: void write(int)>
<java.io.Writer: void write(java.lang.String)>
<java.io.Writer: void write(java.lang.String,int,int)>
<java.io.Writer: java.io.Writer append(char)>
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
<java.io.Writer: java.io.Writer append(java.lang.CharSequence,int,int)>
<java.io.File: java.io.File[] listRoots()>
<java.io.File: boolean canExecute()>
<java.io.File: boolean canRead()>
<java.io.File: boolean canWrite()>
<java.io.File: int compareTo(java.io.File)>
<java.io.File: boolean delete()>
<java.io.File: void deleteOnExit()>
<java.io.File: boolean equals(java.lang.Object)>
<java.io.File: boolean exists()>
<java.io.File: int hashCode()>
<java.io.File: boolean isAbsolute()>
<java.io.File: boolean isDirectory()>
<java.io.File: boolean isFile()>
<java.io.File: boolean isHidden()>
<java.io.File: long lastModified()>
<java.io.File: boolean setLastModified(long)>
<java.io.File: boolean setReadOnly()>
<java.io.File: boolean setExecutable(boolean,boolean)>
<java.io.File: boolean setExecutable(boolean)>
<java.io.File: boolean setReadable(boolean,boolean)>
<java.io.File: boolean setReadable(boolean)>
<java.io.File: boolean setWritable(boolean,boolean)>
<java.io.File: boolean setWritable(boolean)>
<java.io.File: long length()>
<java.io.File: java.lang.String[] list()>
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>
<java.io.File: boolean mkdir()>
<java.io.File: boolean mkdirs()>
<java.io.File: boolean createNewFile()>
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>
<java.io.File: boolean renameTo(java.io.File)>
<java.io.File: java.lang.String toString()>
<java.io.File: java.net.URI toURI()>
<java.io.File: java.net.URL toURL()>
<java.io.File: long getTotalSpace()>
<java.io.File: long getUsableSpace()>
<java.io.File: long getFreeSpace()>
<java.io.OutputStream: void close()>
<java.io.OutputStream: void flush()>
<java.io.FilterOutputStream: void close()>
<java.io.FilterOutputStream: void flush()>
<java.io.FilterOutputStream: void write(byte[],int,int)>
<java.io.FilterOutputStream: void write(int)>
<java.io.InputStream: int available()>
<java.io.InputStream: void close()>
<java.io.InputStream: void mark(int)>
<java.io.InputStream: boolean markSupported()>
<java.io.InputStream: void reset()>
<java.io.InputStream: long skip(long)>
<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>
<java.lang.reflect.Constructor: java.lang.String toGenericString()>
<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>
<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>
<java.lang.reflect.Constructor: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.lang.reflect.Constructor: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<java.lang.reflect.Constructor: boolean isAnnotationPresent(java.lang.Class)>
<java.lang.reflect.Constructor: java.lang.annotation.Annotation[][] getParameterAnnotations()>
<java.lang.reflect.Constructor: boolean isVarArgs()>
<java.lang.reflect.Constructor: boolean isSynthetic()>
<java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<java.lang.reflect.Constructor: java.lang.Class[] getExceptionTypes()>
<java.lang.reflect.Constructor: int getModifiers()>
<java.lang.reflect.Constructor: java.lang.String getName()>
<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>
<java.lang.reflect.Constructor: int hashCode()>
<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>
<java.lang.reflect.Constructor: java.lang.String toString()>
<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>
<java.lang.reflect.Method: java.lang.String toGenericString()>
<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>
<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>
<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>
<java.lang.reflect.Method: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.lang.reflect.Method: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>
<java.lang.reflect.Method: java.lang.annotation.Annotation[][] getParameterAnnotations()>
<java.lang.reflect.Method: boolean isVarArgs()>
<java.lang.reflect.Method: boolean isBridge()>
<java.lang.reflect.Method: boolean isSynthetic()>
<java.lang.reflect.Method: java.lang.Object getDefaultValue()>
<java.lang.reflect.Method: boolean equals(java.lang.Object)>
<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>
<java.lang.reflect.Method: int getModifiers()>
<java.lang.reflect.Method: java.lang.String getName()>
<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<java.lang.reflect.Method: java.lang.Class getReturnType()>
<java.lang.reflect.Method: int hashCode()>
<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
<java.lang.reflect.Method: java.lang.String toString()>
<java.lang.reflect.Field: boolean isSynthetic()>
<java.lang.reflect.Field: java.lang.String toGenericString()>
<java.lang.reflect.Field: boolean isEnumConstant()>
<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>
<java.lang.reflect.Field: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.lang.reflect.Field: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>
<java.lang.reflect.Field: boolean equals(java.lang.Object)>
<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>
<java.lang.reflect.Field: byte getByte(java.lang.Object)>
<java.lang.reflect.Field: char getChar(java.lang.Object)>
<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>
<java.lang.reflect.Field: double getDouble(java.lang.Object)>
<java.lang.reflect.Field: float getFloat(java.lang.Object)>
<java.lang.reflect.Field: int getInt(java.lang.Object)>
<java.lang.reflect.Field: long getLong(java.lang.Object)>
<java.lang.reflect.Field: int getModifiers()>
<java.lang.reflect.Field: java.lang.String getName()>
<java.lang.reflect.Field: short getShort(java.lang.Object)>
<java.lang.reflect.Field: java.lang.Class getType()>
<java.lang.reflect.Field: int hashCode()>
<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>
<java.lang.reflect.Field: void setByte(java.lang.Object,byte)>
<java.lang.reflect.Field: void setChar(java.lang.Object,char)>
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>
<java.lang.reflect.Field: void setShort(java.lang.Object,short)>
<java.lang.reflect.Field: java.lang.String toString()>
<java.lang.Package: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<java.lang.Package: java.lang.annotation.Annotation[] getAnnotations()>
<java.lang.Package: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.lang.Package: boolean isAnnotationPresent(java.lang.Class)>
<java.lang.Package: java.lang.String getImplementationTitle()>
<java.lang.Package: java.lang.String getImplementationVendor()>
<java.lang.Package: java.lang.String getImplementationVersion()>
<java.lang.Package: java.lang.String getName()>
<java.lang.Package: java.lang.Package getPackage(java.lang.String)>
<java.lang.Package: java.lang.Package[] getPackages()>
<java.lang.Package: java.lang.String getSpecificationTitle()>
<java.lang.Package: java.lang.String getSpecificationVendor()>
<java.lang.Package: java.lang.String getSpecificationVersion()>
<java.lang.Package: int hashCode()>
<java.lang.Package: boolean isCompatibleWith(java.lang.String)>
<java.lang.Package: boolean isSealed()>
<java.lang.Package: boolean isSealed(java.net.URL)>
<java.lang.Package: java.lang.String toString()>
<java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>
<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>
<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>
<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>
<java.lang.ClassLoader: java.lang.Class defineClass(byte[],int,int)>
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int)>
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)>
<java.lang.ClassLoader: java.lang.Class findClass(java.lang.String)>
<java.lang.ClassLoader: java.lang.Class findLoadedClass(java.lang.String)>
<java.lang.ClassLoader: java.lang.Class findSystemClass(java.lang.String)>
<java.lang.ClassLoader: java.lang.ClassLoader getParent()>
<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>
<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>
<java.lang.ClassLoader: void resolveClass(java.lang.Class)>
<java.lang.ClassLoader: java.net.URL findResource(java.lang.String)>
<java.lang.ClassLoader: java.util.Enumeration findResources(java.lang.String)>
<java.lang.ClassLoader: java.lang.String findLibrary(java.lang.String)>
<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>
<java.lang.ClassLoader: java.lang.Package[] getPackages()>
<java.lang.ClassLoader: java.lang.Package definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)>
<java.lang.ClassLoader: void setSigners(java.lang.Class,java.lang.Object[])>
<java.lang.ClassLoader: void setClassAssertionStatus(java.lang.String,boolean)>
<java.lang.ClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)>
<java.lang.ClassLoader: void setDefaultAssertionStatus(boolean)>
<java.lang.ClassLoader: void clearAssertionStatus()>
<java.net.URL: void setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)>
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>
<java.net.URL: boolean equals(java.lang.Object)>
<java.net.URL: boolean sameFile(java.net.URL)>
<java.net.URL: int hashCode()>
<java.net.URL: java.io.InputStream openStream()>
<java.net.URL: java.net.URI toURI()>
<java.net.URL: java.lang.String toString()>
<java.net.URL: java.lang.String toExternalForm()>
<java.net.URL: java.lang.String getProtocol()>
<java.net.URL: java.lang.String getAuthority()>
<java.net.URL: java.lang.String getUserInfo()>
<java.net.URL: java.lang.String getHost()>
<java.net.URL: int getPort()>
<java.net.URL: int getDefaultPort()>
<java.net.URL: java.lang.String getFile()>
<java.net.URL: java.lang.String getPath()>
<java.net.URL: java.lang.String getQuery()>
<java.net.URL: java.lang.String getRef()>
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.security.ProtectionDomain: java.lang.ClassLoader getClassLoader()>
<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>
<java.security.ProtectionDomain: java.security.PermissionCollection getPermissions()>
<java.security.ProtectionDomain: java.security.Principal[] getPrincipals()>
<java.security.ProtectionDomain: boolean implies(java.security.Permission)>
<java.lang.ClassNotFoundException: java.lang.Throwable getException()>
<java.lang.ClassNotFoundException: java.lang.Throwable getCause()>
<java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)>
<java.nio.charset.CoderResult: java.nio.charset.CoderResult unmappableForLength(int)>
<java.nio.charset.CoderResult: boolean isUnderflow()>
<java.nio.charset.CoderResult: boolean isError()>
<java.nio.charset.CoderResult: boolean isMalformed()>
<java.nio.charset.CoderResult: boolean isOverflow()>
<java.nio.charset.CoderResult: boolean isUnmappable()>
<java.nio.charset.CoderResult: int length()>
<java.nio.charset.CoderResult: void throwException()>
<java.nio.charset.CoderResult: java.lang.String toString()>
<java.nio.charset.CodingErrorAction: java.lang.String toString()>
<java.nio.Buffer: int capacity()>
<java.nio.Buffer: java.nio.Buffer clear()>
<java.nio.Buffer: java.nio.Buffer flip()>
<java.nio.Buffer: boolean hasRemaining()>
<java.nio.Buffer: int limit()>
<java.nio.Buffer: java.nio.Buffer limit(int)>
<java.nio.Buffer: java.nio.Buffer mark()>
<java.nio.Buffer: int position()>
<java.nio.Buffer: java.nio.Buffer position(int)>
<java.nio.Buffer: int remaining()>
<java.nio.Buffer: java.nio.Buffer reset()>
<java.nio.Buffer: java.nio.Buffer rewind()>
<java.nio.Buffer: java.lang.String toString()>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer allocate(int)>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer wrap(double[])>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer wrap(double[],int,int)>
<java.nio.DoubleBuffer: double[] array()>
<java.nio.DoubleBuffer: int arrayOffset()>
<java.nio.DoubleBuffer: int compareTo(java.nio.DoubleBuffer)>
<java.nio.DoubleBuffer: boolean equals(java.lang.Object)>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[])>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[],int,int)>
<java.nio.DoubleBuffer: boolean hasArray()>
<java.nio.DoubleBuffer: int hashCode()>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double[])>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double[],int,int)>
<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(java.nio.DoubleBuffer)>
<java.nio.LongBuffer: java.nio.LongBuffer allocate(int)>
<java.nio.LongBuffer: java.nio.LongBuffer wrap(long[])>
<java.nio.LongBuffer: java.nio.LongBuffer wrap(long[],int,int)>
<java.nio.LongBuffer: long[] array()>
<java.nio.LongBuffer: int arrayOffset()>
<java.nio.LongBuffer: int compareTo(java.nio.LongBuffer)>
<java.nio.LongBuffer: boolean equals(java.lang.Object)>
<java.nio.LongBuffer: java.nio.LongBuffer get(long[])>
<java.nio.LongBuffer: java.nio.LongBuffer get(long[],int,int)>
<java.nio.LongBuffer: boolean hasArray()>
<java.nio.LongBuffer: int hashCode()>
<java.nio.LongBuffer: java.nio.LongBuffer put(long[])>
<java.nio.LongBuffer: java.nio.LongBuffer put(long[],int,int)>
<java.nio.LongBuffer: java.nio.LongBuffer put(java.nio.LongBuffer)>
<java.nio.FloatBuffer: java.nio.FloatBuffer allocate(int)>
<java.nio.FloatBuffer: java.nio.FloatBuffer wrap(float[])>
<java.nio.FloatBuffer: java.nio.FloatBuffer wrap(float[],int,int)>
<java.nio.FloatBuffer: float[] array()>
<java.nio.FloatBuffer: int arrayOffset()>
<java.nio.FloatBuffer: int compareTo(java.nio.FloatBuffer)>
<java.nio.FloatBuffer: boolean equals(java.lang.Object)>
<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[])>
<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[],int,int)>
<java.nio.FloatBuffer: boolean hasArray()>
<java.nio.FloatBuffer: int hashCode()>
<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>
<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[],int,int)>
<java.nio.FloatBuffer: java.nio.FloatBuffer put(java.nio.FloatBuffer)>
<java.nio.ShortBuffer: java.nio.ShortBuffer allocate(int)>
<java.nio.ShortBuffer: java.nio.ShortBuffer wrap(short[])>
<java.nio.ShortBuffer: java.nio.ShortBuffer wrap(short[],int,int)>
<java.nio.ShortBuffer: short[] array()>
<java.nio.ShortBuffer: int arrayOffset()>
<java.nio.ShortBuffer: int compareTo(java.nio.ShortBuffer)>
<java.nio.ShortBuffer: boolean equals(java.lang.Object)>
<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[])>
<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[],int,int)>
<java.nio.ShortBuffer: boolean hasArray()>
<java.nio.ShortBuffer: int hashCode()>
<java.nio.ShortBuffer: java.nio.ShortBuffer put(short[])>
<java.nio.ShortBuffer: java.nio.ShortBuffer put(short[],int,int)>
<java.nio.ShortBuffer: java.nio.ShortBuffer put(java.nio.ShortBuffer)>
<java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>
<java.nio.ByteOrder: java.lang.String toString()>
<java.nio.IntBuffer: java.nio.IntBuffer allocate(int)>
<java.nio.IntBuffer: java.nio.IntBuffer wrap(int[])>
<java.nio.IntBuffer: java.nio.IntBuffer wrap(int[],int,int)>
<java.nio.IntBuffer: int[] array()>
<java.nio.IntBuffer: int arrayOffset()>
<java.nio.IntBuffer: int compareTo(java.nio.IntBuffer)>
<java.nio.IntBuffer: boolean equals(java.lang.Object)>
<java.nio.IntBuffer: java.nio.IntBuffer get(int[])>
<java.nio.IntBuffer: java.nio.IntBuffer get(int[],int,int)>
<java.nio.IntBuffer: boolean hasArray()>
<java.nio.IntBuffer: int hashCode()>
<java.nio.IntBuffer: java.nio.IntBuffer put(int[])>
<java.nio.IntBuffer: java.nio.IntBuffer put(int[],int,int)>
<java.nio.IntBuffer: java.nio.IntBuffer put(java.nio.IntBuffer)>
<java.net.URI: int compareTo(java.net.URI)>
<java.net.URI: java.net.URI create(java.lang.String)>
<java.net.URI: boolean equals(java.lang.Object)>
<java.net.URI: java.lang.String getScheme()>
<java.net.URI: java.lang.String getSchemeSpecificPart()>
<java.net.URI: java.lang.String getRawSchemeSpecificPart()>
<java.net.URI: java.lang.String getAuthority()>
<java.net.URI: java.lang.String getRawAuthority()>
<java.net.URI: java.lang.String getUserInfo()>
<java.net.URI: java.lang.String getRawUserInfo()>
<java.net.URI: java.lang.String getHost()>
<java.net.URI: int getPort()>
<java.net.URI: java.lang.String getPath()>
<java.net.URI: java.lang.String getRawPath()>
<java.net.URI: java.lang.String getQuery()>
<java.net.URI: java.lang.String getRawQuery()>
<java.net.URI: java.lang.String getFragment()>
<java.net.URI: java.lang.String getRawFragment()>
<java.net.URI: int hashCode()>
<java.net.URI: boolean isAbsolute()>
<java.net.URI: boolean isOpaque()>
<java.net.URI: java.net.URI normalize()>
<java.net.URI: java.net.URI parseServerAuthority()>
<java.net.URI: java.net.URI relativize(java.net.URI)>
<java.net.URI: java.net.URI resolve(java.net.URI)>
<java.net.URI: java.net.URI resolve(java.lang.String)>
<java.net.URI: java.lang.String toASCIIString()>
<java.net.URI: java.lang.String toString()>
<java.net.URI: java.net.URL toURL()>
<java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>
<java.lang.reflect.AccessibleObject: boolean isAccessible()>
<java.lang.reflect.AccessibleObject: void setAccessible(boolean)>
<java.lang.reflect.AccessibleObject: boolean isAnnotationPresent(java.lang.Class)>
<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation[] getDeclaredAnnotations()>
<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation[] getAnnotations()>
<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>
<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>
<java.net.URLConnection: boolean getAllowUserInteraction()>
<java.net.URLConnection: java.lang.Object getContent()>
<java.net.URLConnection: java.lang.Object getContent(java.lang.Class[])>
<java.net.URLConnection: java.lang.String getContentEncoding()>
<java.net.URLConnection: int getContentLength()>
<java.net.URLConnection: java.lang.String getContentType()>
<java.net.URLConnection: long getDate()>
<java.net.URLConnection: boolean getDefaultAllowUserInteraction()>
<java.net.URLConnection: java.lang.String getDefaultRequestProperty(java.lang.String)>
<java.net.URLConnection: boolean getDefaultUseCaches()>
<java.net.URLConnection: boolean getDoInput()>
<java.net.URLConnection: boolean getDoOutput()>
<java.net.URLConnection: long getExpiration()>
<java.net.URLConnection: java.net.FileNameMap getFileNameMap()>
<java.net.URLConnection: java.lang.String getHeaderField(int)>
<java.net.URLConnection: java.util.Map getHeaderFields()>
<java.net.URLConnection: java.util.Map getRequestProperties()>
<java.net.URLConnection: void addRequestProperty(java.lang.String,java.lang.String)>
<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>
<java.net.URLConnection: long getHeaderFieldDate(java.lang.String,long)>
<java.net.URLConnection: int getHeaderFieldInt(java.lang.String,int)>
<java.net.URLConnection: java.lang.String getHeaderFieldKey(int)>
<java.net.URLConnection: long getIfModifiedSince()>
<java.net.URLConnection: java.io.InputStream getInputStream()>
<java.net.URLConnection: long getLastModified()>
<java.net.URLConnection: java.io.OutputStream getOutputStream()>
<java.net.URLConnection: java.security.Permission getPermission()>
<java.net.URLConnection: java.lang.String getRequestProperty(java.lang.String)>
<java.net.URLConnection: java.net.URL getURL()>
<java.net.URLConnection: boolean getUseCaches()>
<java.net.URLConnection: java.lang.String guessContentTypeFromName(java.lang.String)>
<java.net.URLConnection: java.lang.String guessContentTypeFromStream(java.io.InputStream)>
<java.net.URLConnection: void setAllowUserInteraction(boolean)>
<java.net.URLConnection: void setContentHandlerFactory(java.net.ContentHandlerFactory)>
<java.net.URLConnection: void setDefaultAllowUserInteraction(boolean)>
<java.net.URLConnection: void setDefaultRequestProperty(java.lang.String,java.lang.String)>
<java.net.URLConnection: void setDefaultUseCaches(boolean)>
<java.net.URLConnection: void setDoInput(boolean)>
<java.net.URLConnection: void setDoOutput(boolean)>
<java.net.URLConnection: void setFileNameMap(java.net.FileNameMap)>
<java.net.URLConnection: void setIfModifiedSince(long)>
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>
<java.net.URLConnection: void setUseCaches(boolean)>
<java.net.URLConnection: void setConnectTimeout(int)>
<java.net.URLConnection: int getConnectTimeout()>
<java.net.URLConnection: void setReadTimeout(int)>
<java.net.URLConnection: int getReadTimeout()>
<java.net.URLConnection: java.lang.String toString()>
<java.net.Proxy: java.net.Proxy$Type type()>
<java.net.Proxy: java.net.SocketAddress address()>
<java.net.Proxy: java.lang.String toString()>
<java.net.Proxy: boolean equals(java.lang.Object)>
<java.net.Proxy: int hashCode()>
<java.net.URISyntaxException: int getIndex()>
<java.net.URISyntaxException: java.lang.String getReason()>
<java.net.URISyntaxException: java.lang.String getInput()>
<java.net.URISyntaxException: java.lang.String getMessage()>
<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>
<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>
<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>
<java.net.URLStreamHandler: boolean equals(java.net.URL,java.net.URL)>
<java.net.URLStreamHandler: int getDefaultPort()>
<java.net.URLStreamHandler: java.net.InetAddress getHostAddress(java.net.URL)>
<java.net.URLStreamHandler: int hashCode(java.net.URL)>
<java.net.URLStreamHandler: boolean hostsEqual(java.net.URL,java.net.URL)>
<java.net.URLStreamHandler: boolean sameFile(java.net.URL,java.net.URL)>
<java.security.Permission: java.lang.String getName()>
<java.security.Permission: void checkGuard(java.lang.Object)>
<java.security.Permission: java.security.PermissionCollection newPermissionCollection()>
<java.security.PermissionCollection: boolean isReadOnly()>
<java.security.PermissionCollection: void setReadOnly()>
<java.security.CodeSource: java.security.cert.Certificate[] getCertificates()>
<java.security.CodeSource: java.security.CodeSigner[] getCodeSigners()>
<java.security.CodeSource: java.net.URL getLocation()>
<java.security.CodeSource: boolean implies(java.security.CodeSource)>
<java.nio.charset.MalformedInputException: int getInputLength()>
<java.nio.charset.MalformedInputException: java.lang.String getMessage()>
<java.nio.charset.UnmappableCharacterException: int getInputLength()>
<java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
<java.net.InetAddress: boolean equals(java.lang.Object)>
<java.net.InetAddress: java.lang.String getCanonicalHostName()>
<java.net.InetAddress: java.net.InetAddress getLocalHost()>
<java.net.InetAddress: int hashCode()>
<java.net.InetAddress: java.lang.String toString()>
<java.net.InetAddress: boolean isAnyLocalAddress()>
<java.net.InetAddress: boolean isLinkLocalAddress()>
<java.net.InetAddress: boolean isLoopbackAddress()>
<java.net.InetAddress: boolean isMCGlobal()>
<java.net.InetAddress: boolean isMCLinkLocal()>
<java.net.InetAddress: boolean isMCNodeLocal()>
<java.net.InetAddress: boolean isMCOrgLocal()>
<java.net.InetAddress: boolean isMCSiteLocal()>
<java.net.InetAddress: boolean isMulticastAddress()>
<java.net.InetAddress: boolean isSiteLocalAddress()>
<java.net.InetAddress: boolean isReachable(int)>
<java.net.InetAddress: boolean isReachable(java.net.NetworkInterface,int,int)>
<java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>
<java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])>
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>
<java.net.HttpURLConnection: boolean getFollowRedirects()>
<java.net.HttpURLConnection: java.security.Permission getPermission()>
<java.net.HttpURLConnection: java.lang.String getRequestMethod()>
<java.net.HttpURLConnection: int getResponseCode()>
<java.net.HttpURLConnection: java.lang.String getResponseMessage()>
<java.net.HttpURLConnection: void setFollowRedirects(boolean)>
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>
<java.net.HttpURLConnection: java.lang.String getContentEncoding()>
<java.net.HttpURLConnection: boolean getInstanceFollowRedirects()>
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>
<java.net.HttpURLConnection: long getHeaderFieldDate(java.lang.String,long)>
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>
<java.net.HttpURLConnection: void setChunkedStreamingMode(int)>
<java.security.cert.Certificate: java.lang.String getType()>
<java.security.cert.Certificate: boolean equals(java.lang.Object)>
<java.security.cert.Certificate: int hashCode()>
<java.security.cert.Certificate: java.lang.Object writeReplace()>
<java.security.CodeSigner: boolean equals(java.lang.Object)>
<java.security.CodeSigner: java.security.cert.CertPath getSignerCertPath()>
<java.security.CodeSigner: java.security.Timestamp getTimestamp()>
<java.security.CodeSigner: int hashCode()>
<java.security.CodeSigner: java.lang.String toString()>
<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection,java.lang.Class[])>
<java.lang.Enum: java.lang.String name()>
<java.lang.Enum: int ordinal()>
<java.lang.Enum: java.lang.String toString()>
<java.lang.Enum: boolean equals(java.lang.Object)>
<java.lang.Enum: int hashCode()>
<java.lang.Enum: java.lang.Object clone()>
<java.lang.Enum: int compareTo(java.lang.Enum)>
<java.lang.Enum: java.lang.Class getDeclaringClass()>
<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
<java.lang.Enum: void finalize()>
<java.net.NetworkInterface: java.lang.String getName()>
<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>
<java.net.NetworkInterface: java.lang.String getDisplayName()>
<java.net.NetworkInterface: java.net.NetworkInterface getByName(java.lang.String)>
<java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress(java.net.InetAddress)>
<java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>
<java.net.NetworkInterface: boolean equals(java.lang.Object)>
<java.net.NetworkInterface: int hashCode()>
<java.net.NetworkInterface: java.lang.String toString()>
<java.net.NetworkInterface: java.util.List getInterfaceAddresses()>
<java.net.NetworkInterface: java.util.Enumeration getSubInterfaces()>
<java.net.NetworkInterface: java.net.NetworkInterface getParent()>
<java.net.NetworkInterface: boolean isUp()>
<java.net.NetworkInterface: boolean isLoopback()>
<java.net.NetworkInterface: boolean isPointToPoint()>
<java.net.NetworkInterface: boolean supportsMulticast()>
<java.net.NetworkInterface: byte[] getHardwareAddress()>
<java.net.NetworkInterface: int getMTU()>
<java.net.NetworkInterface: boolean isVirtual()>
<java.security.cert.Certificate$CertificateRep: java.lang.Object readResolve()>
<java.security.cert.CertPath: java.lang.String getType()>
<java.security.cert.CertPath: boolean equals(java.lang.Object)>
<java.security.cert.CertPath: int hashCode()>
<java.security.cert.CertPath: java.lang.String toString()>
<java.security.cert.CertPath: java.lang.Object writeReplace()>
<java.security.Timestamp: boolean equals(java.lang.Object)>
<java.security.Timestamp: java.security.cert.CertPath getSignerCertPath()>
<java.security.Timestamp: java.util.Date getTimestamp()>
<java.security.Timestamp: int hashCode()>
<java.security.Timestamp: java.lang.String toString()>
<java.security.cert.CertPath$CertPathRep: java.lang.Object readResolve()>
<java.util.Date: boolean after(java.util.Date)>
<java.util.Date: boolean before(java.util.Date)>
<java.util.Date: java.lang.Object clone()>
<java.util.Date: int compareTo(java.util.Date)>
<java.util.Date: boolean equals(java.lang.Object)>
<java.util.Date: int getDate()>
<java.util.Date: int getDay()>
<java.util.Date: int getHours()>
<java.util.Date: int getMinutes()>
<java.util.Date: int getMonth()>
<java.util.Date: int getSeconds()>
<java.util.Date: long getTime()>
<java.util.Date: int getTimezoneOffset()>
<java.util.Date: int getYear()>
<java.util.Date: int hashCode()>
<java.util.Date: long parse(java.lang.String)>
<java.util.Date: void setDate(int)>
<java.util.Date: void setHours(int)>
<java.util.Date: void setMinutes(int)>
<java.util.Date: void setMonth(int)>
<java.util.Date: void setSeconds(int)>
<java.util.Date: void setTime(long)>
<java.util.Date: void setYear(int)>
<java.util.Date: java.lang.String toGMTString()>
<java.util.Date: java.lang.String toLocaleString()>
<java.util.Date: java.lang.String toString()>
<java.util.Date: long UTC(int,int,int,int,int,int)>
<android.app.Activity: android.content.Intent getIntent()>
<android.app.Activity: void setIntent(android.content.Intent)>
<android.app.Activity: android.app.Application getApplication()>
<android.app.Activity: boolean isChild()>
<android.app.Activity: android.app.Activity getParent()>
<android.app.Activity: android.view.WindowManager getWindowManager()>
<android.app.Activity: android.view.Window getWindow()>
<android.app.Activity: android.app.LoaderManager getLoaderManager()>
<android.app.Activity: android.view.View getCurrentFocus()>
<android.app.Activity: void onCreate(android.os.Bundle)>
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>
<android.app.Activity: void onPostCreate(android.os.Bundle)>
<android.app.Activity: void onStart()>
<android.app.Activity: void onRestart()>
<android.app.Activity: void onResume()>
<android.app.Activity: void onPostResume()>
<android.app.Activity: void onNewIntent(android.content.Intent)>
<android.app.Activity: void onSaveInstanceState(android.os.Bundle)>
<android.app.Activity: void onPause()>
<android.app.Activity: void onUserLeaveHint()>
<android.app.Activity: boolean onCreateThumbnail(android.graphics.Bitmap,android.graphics.Canvas)>
<android.app.Activity: java.lang.CharSequence onCreateDescription()>
<android.app.Activity: void onStop()>
<android.app.Activity: void onDestroy()>
<android.app.Activity: void onConfigurationChanged(android.content.res.Configuration)>
<android.app.Activity: int getChangingConfigurations()>
<android.app.Activity: java.lang.Object getLastNonConfigurationInstance()>
<android.app.Activity: java.lang.Object onRetainNonConfigurationInstance()>
<android.app.Activity: void onLowMemory()>
<android.app.Activity: void onTrimMemory(int)>
<android.app.Activity: android.app.FragmentManager getFragmentManager()>
<android.app.Activity: void onAttachFragment(android.app.Fragment)>
<android.app.Activity: void startManagingCursor(android.database.Cursor)>
<android.app.Activity: void stopManagingCursor(android.database.Cursor)>
<android.app.Activity: android.app.ActionBar getActionBar()>
<android.app.Activity: void setContentView(int)>
<android.app.Activity: void setContentView(android.view.View)>
<android.app.Activity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.app.Activity: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.app.Activity: void setFinishOnTouchOutside(boolean)>
<android.app.Activity: void setDefaultKeyMode(int)>
<android.app.Activity: boolean onKeyDown(int,android.view.KeyEvent)>
<android.app.Activity: boolean onKeyLongPress(int,android.view.KeyEvent)>
<android.app.Activity: boolean onKeyUp(int,android.view.KeyEvent)>
<android.app.Activity: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.app.Activity: void onBackPressed()>
<android.app.Activity: boolean onKeyShortcut(int,android.view.KeyEvent)>
<android.app.Activity: boolean onTouchEvent(android.view.MotionEvent)>
<android.app.Activity: boolean onTrackballEvent(android.view.MotionEvent)>
<android.app.Activity: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.app.Activity: void onUserInteraction()>
<android.app.Activity: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>
<android.app.Activity: void onContentChanged()>
<android.app.Activity: void onWindowFocusChanged(boolean)>
<android.app.Activity: void onAttachedToWindow()>
<android.app.Activity: void onDetachedFromWindow()>
<android.app.Activity: boolean hasWindowFocus()>
<android.app.Activity: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.app.Activity: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>
<android.app.Activity: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.app.Activity: boolean dispatchTrackballEvent(android.view.MotionEvent)>
<android.app.Activity: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>
<android.app.Activity: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.app.Activity: android.view.View onCreatePanelView(int)>
<android.app.Activity: boolean onCreatePanelMenu(int,android.view.Menu)>
<android.app.Activity: boolean onPreparePanel(int,android.view.View,android.view.Menu)>
<android.app.Activity: boolean onMenuOpened(int,android.view.Menu)>
<android.app.Activity: boolean onMenuItemSelected(int,android.view.MenuItem)>
<android.app.Activity: void onPanelClosed(int,android.view.Menu)>
<android.app.Activity: void invalidateOptionsMenu()>
<android.app.Activity: boolean onCreateOptionsMenu(android.view.Menu)>
<android.app.Activity: boolean onPrepareOptionsMenu(android.view.Menu)>
<android.app.Activity: boolean onOptionsItemSelected(android.view.MenuItem)>
<android.app.Activity: boolean onNavigateUp()>
<android.app.Activity: boolean onNavigateUpFromChild(android.app.Activity)>
<android.app.Activity: void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder)>
<android.app.Activity: void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder)>
<android.app.Activity: void onOptionsMenuClosed(android.view.Menu)>
<android.app.Activity: void openOptionsMenu()>
<android.app.Activity: void closeOptionsMenu()>
<android.app.Activity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
<android.app.Activity: void registerForContextMenu(android.view.View)>
<android.app.Activity: void unregisterForContextMenu(android.view.View)>
<android.app.Activity: void openContextMenu(android.view.View)>
<android.app.Activity: void closeContextMenu()>
<android.app.Activity: boolean onContextItemSelected(android.view.MenuItem)>
<android.app.Activity: void onContextMenuClosed(android.view.Menu)>
<android.app.Activity: android.app.Dialog onCreateDialog(int)>
<android.app.Activity: android.app.Dialog onCreateDialog(int,android.os.Bundle)>
<android.app.Activity: void onPrepareDialog(int,android.app.Dialog)>
<android.app.Activity: void onPrepareDialog(int,android.app.Dialog,android.os.Bundle)>
<android.app.Activity: boolean showDialog(int,android.os.Bundle)>
<android.app.Activity: void dismissDialog(int)>
<android.app.Activity: void removeDialog(int)>
<android.app.Activity: boolean onSearchRequested()>
<android.app.Activity: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)>
<android.app.Activity: void triggerSearch(java.lang.String,android.os.Bundle)>
<android.app.Activity: void takeKeyEvents(boolean)>
<android.app.Activity: boolean requestWindowFeature(int)>
<android.app.Activity: void setFeatureDrawableResource(int,int)>
<android.app.Activity: void setFeatureDrawableUri(int,android.net.Uri)>
<android.app.Activity: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>
<android.app.Activity: void setFeatureDrawableAlpha(int,int)>
<android.app.Activity: android.view.LayoutInflater getLayoutInflater()>
<android.app.Activity: android.view.MenuInflater getMenuInflater()>
<android.app.Activity: void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)>
<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)>
<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>
<android.app.Activity: void startActivity(android.content.Intent)>
<android.app.Activity: void startActivity(android.content.Intent,android.os.Bundle)>
<android.app.Activity: void startActivities(android.content.Intent[])>
<android.app.Activity: void startActivities(android.content.Intent[],android.os.Bundle)>
<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>
<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)>
<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int)>
<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int,android.os.Bundle)>
<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent)>
<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent,android.os.Bundle)>
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)>
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int,android.os.Bundle)>
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int)>
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int,android.os.Bundle)>
<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int)>
<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>
<android.app.Activity: void overridePendingTransition(int,int)>
<android.app.Activity: void setResult(int)>
<android.app.Activity: void setResult(int,android.content.Intent)>
<android.app.Activity: java.lang.String getCallingPackage()>
<android.app.Activity: android.content.ComponentName getCallingActivity()>
<android.app.Activity: void setVisible(boolean)>
<android.app.Activity: boolean isFinishing()>
<android.app.Activity: boolean isChangingConfigurations()>
<android.app.Activity: void recreate()>
<android.app.Activity: void finish()>
<android.app.Activity: void finishAffinity()>
<android.app.Activity: void finishFromChild(android.app.Activity)>
<android.app.Activity: void finishActivity(int)>
<android.app.Activity: void finishActivityFromChild(android.app.Activity,int)>
<android.app.Activity: void onActivityResult(int,int,android.content.Intent)>
<android.app.Activity: android.app.PendingIntent createPendingResult(int,android.content.Intent,int)>
<android.app.Activity: void setRequestedOrientation(int)>
<android.app.Activity: int getRequestedOrientation()>
<android.app.Activity: int getTaskId()>
<android.app.Activity: boolean isTaskRoot()>
<android.app.Activity: boolean moveTaskToBack(boolean)>
<android.app.Activity: java.lang.String getLocalClassName()>
<android.app.Activity: android.content.ComponentName getComponentName()>
<android.app.Activity: android.content.SharedPreferences getPreferences(int)>
<android.app.Activity: void setTitle(java.lang.CharSequence)>
<android.app.Activity: void setTitle(int)>
<android.app.Activity: void setTitleColor(int)>
<android.app.Activity: java.lang.CharSequence getTitle()>
<android.app.Activity: int getTitleColor()>
<android.app.Activity: void onTitleChanged(java.lang.CharSequence,int)>
<android.app.Activity: void onChildTitleChanged(android.app.Activity,java.lang.CharSequence)>
<android.app.Activity: void setProgressBarVisibility(boolean)>
<android.app.Activity: void setProgressBarIndeterminateVisibility(boolean)>
<android.app.Activity: void setProgressBarIndeterminate(boolean)>
<android.app.Activity: void setProgress(int)>
<android.app.Activity: void setSecondaryProgress(int)>
<android.app.Activity: void setVolumeControlStream(int)>
<android.app.Activity: int getVolumeControlStream()>
<android.app.Activity: void runOnUiThread(java.lang.Runnable)>
<android.app.Activity: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)>
<android.app.Activity: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)>
<android.app.Activity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.app.Activity: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)>
<android.app.Activity: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)>
<android.app.Activity: void onActionModeStarted(android.view.ActionMode)>
<android.app.Activity: void onActionModeFinished(android.view.ActionMode)>
<android.app.Activity: boolean shouldUpRecreateTask(android.content.Intent)>
<android.app.Activity: boolean navigateUpTo(android.content.Intent)>
<android.app.Activity: boolean navigateUpToFromChild(android.app.Activity,android.content.Intent)>
<android.app.Activity: android.content.Intent getParentActivityIntent()>
<android.view.ContextThemeWrapper: void attachBaseContext(android.content.Context)>
<android.view.ContextThemeWrapper: void setTheme(int)>
<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>
<android.view.ContextThemeWrapper: java.lang.Object getSystemService(java.lang.String)>
<android.view.ContextThemeWrapper: void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)>
<android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence)>
<android.content.Intent: java.lang.Object clone()>
<android.content.Intent: android.content.Intent cloneFilter()>
<android.content.Intent: android.content.Intent makeMainActivity(android.content.ComponentName)>
<android.content.Intent: android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String)>
<android.content.Intent: android.content.Intent makeRestartActivityTask(android.content.ComponentName)>
<android.content.Intent: android.content.Intent getIntent(java.lang.String)>
<android.content.Intent: android.content.Intent parseUri(java.lang.String,int)>
<android.content.Intent: android.content.Intent getIntentOld(java.lang.String)>
<android.content.Intent: java.lang.String getAction()>
<android.content.Intent: android.net.Uri getData()>
<android.content.Intent: java.lang.String getDataString()>
<android.content.Intent: java.lang.String getScheme()>
<android.content.Intent: java.lang.String getType()>
<android.content.Intent: java.lang.String resolveType(android.content.Context)>
<android.content.Intent: java.lang.String resolveType(android.content.ContentResolver)>
<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>
<android.content.Intent: boolean hasCategory(java.lang.String)>
<android.content.Intent: java.util.Set getCategories()>
<android.content.Intent: android.content.Intent getSelector()>
<android.content.Intent: android.content.ClipData getClipData()>
<android.content.Intent: void setExtrasClassLoader(java.lang.ClassLoader)>
<android.content.Intent: boolean hasExtra(java.lang.String)>
<android.content.Intent: boolean hasFileDescriptors()>
<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>
<android.content.Intent: byte getByteExtra(java.lang.String,byte)>
<android.content.Intent: short getShortExtra(java.lang.String,short)>
<android.content.Intent: char getCharExtra(java.lang.String,char)>
<android.content.Intent: int getIntExtra(java.lang.String,int)>
<android.content.Intent: long getLongExtra(java.lang.String,long)>
<android.content.Intent: float getFloatExtra(java.lang.String,float)>
<android.content.Intent: double getDoubleExtra(java.lang.String,double)>
<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>
<android.content.Intent: java.lang.CharSequence getCharSequenceExtra(java.lang.String)>
<android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)>
<android.content.Intent: android.os.Parcelable[] getParcelableArrayExtra(java.lang.String)>
<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String)>
<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String)>
<android.content.Intent: java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String)>
<android.content.Intent: android.os.Bundle getBundleExtra(java.lang.String)>
<android.content.Intent: int getFlags()>
<android.content.Intent: java.lang.String getPackage()>
<android.content.Intent: android.content.ComponentName getComponent()>
<android.content.Intent: android.graphics.Rect getSourceBounds()>
<android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)>
<android.content.Intent: android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager,int)>
<android.content.Intent: android.content.Intent setAction(java.lang.String)>
<android.content.Intent: android.content.Intent setDataAndNormalize(android.net.Uri)>
<android.content.Intent: android.content.Intent setType(java.lang.String)>
<android.content.Intent: android.content.Intent setTypeAndNormalize(java.lang.String)>
<android.content.Intent: android.content.Intent setDataAndTypeAndNormalize(android.net.Uri,java.lang.String)>
<android.content.Intent: android.content.Intent addCategory(java.lang.String)>
<android.content.Intent: void removeCategory(java.lang.String)>
<android.content.Intent: void setSelector(android.content.Intent)>
<android.content.Intent: void setClipData(android.content.ClipData)>
<android.content.Intent: android.content.Intent putParcelableArrayListExtra(java.lang.String,java.util.ArrayList)>
<android.content.Intent: android.content.Intent putIntegerArrayListExtra(java.lang.String,java.util.ArrayList)>
<android.content.Intent: android.content.Intent putStringArrayListExtra(java.lang.String,java.util.ArrayList)>
<android.content.Intent: android.content.Intent putCharSequenceArrayListExtra(java.lang.String,java.util.ArrayList)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,short[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,char[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,float[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,double[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence[])>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)>
<android.content.Intent: android.content.Intent putExtras(android.content.Intent)>
<android.content.Intent: android.content.Intent replaceExtras(android.content.Intent)>
<android.content.Intent: android.content.Intent replaceExtras(android.os.Bundle)>
<android.content.Intent: void removeExtra(java.lang.String)>
<android.content.Intent: android.content.Intent setFlags(int)>
<android.content.Intent: android.content.Intent addFlags(int)>
<android.content.Intent: android.content.Intent setPackage(java.lang.String)>
<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>
<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)>
<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>
<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)>
<android.content.Intent: void setSourceBounds(android.graphics.Rect)>
<android.content.Intent: int fillIn(android.content.Intent,int)>
<android.content.Intent: boolean filterEquals(android.content.Intent)>
<android.content.Intent: int filterHashCode()>
<android.content.Intent: java.lang.String toString()>
<android.content.Intent: java.lang.String toURI()>
<android.content.Intent: java.lang.String toUri(int)>
<android.content.Intent: int describeContents()>
<android.content.Intent: void writeToParcel(android.os.Parcel,int)>
<android.content.Intent: void readFromParcel(android.os.Parcel)>
<android.content.Intent: android.content.Intent parseIntent(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>
<android.content.Intent: java.lang.String normalizeMimeType(java.lang.String)>
<android.app.Application: void onCreate()>
<android.app.Application: void onTerminate()>
<android.app.Application: void onConfigurationChanged(android.content.res.Configuration)>
<android.app.Application: void onLowMemory()>
<android.app.Application: void onTrimMemory(int)>
<android.app.Application: void registerComponentCallbacks(android.content.ComponentCallbacks)>
<android.app.Application: void unregisterComponentCallbacks(android.content.ComponentCallbacks)>
<android.app.Application: void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>
<android.app.Application: void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>
<android.view.Window: android.content.Context getContext()>
<android.view.Window: android.content.res.TypedArray getWindowStyle()>
<android.view.Window: void setContainer(android.view.Window)>
<android.view.Window: android.view.Window getContainer()>
<android.view.Window: boolean hasChildren()>
<android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String)>
<android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String,boolean)>
<android.view.Window: android.view.WindowManager getWindowManager()>
<android.view.Window: void setCallback(android.view.Window$Callback)>
<android.view.Window: android.view.Window$Callback getCallback()>
<android.view.Window: void setLayout(int,int)>
<android.view.Window: void setGravity(int)>
<android.view.Window: void setType(int)>
<android.view.Window: void setFormat(int)>
<android.view.Window: void setWindowAnimations(int)>
<android.view.Window: void setSoftInputMode(int)>
<android.view.Window: void addFlags(int)>
<android.view.Window: void clearFlags(int)>
<android.view.Window: void setFlags(int,int)>
<android.view.Window: void setDimAmount(float)>
<android.view.Window: void setAttributes(android.view.WindowManager$LayoutParams)>
<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>
<android.view.Window: int getForcedWindowFlags()>
<android.view.Window: boolean hasSoftInputMode()>
<android.view.Window: boolean requestFeature(int)>
<android.view.Window: void makeActive()>
<android.view.Window: boolean isActive()>
<android.view.Window: android.view.View findViewById(int)>
<android.view.Window: void setBackgroundDrawableResource(int)>
<android.view.Window: int getFeatures()>
<android.view.Window: boolean hasFeature(int)>
<android.view.Window: int getLocalFeatures()>
<android.view.Window: void setDefaultWindowFormat(int)>
<android.view.Window: void setUiOptions(int)>
<android.view.Window: void setUiOptions(int,int)>
<android.app.LoaderManager: void enableDebugLogging(boolean)>
<android.view.View: void initializeFadingEdge(android.content.res.TypedArray)>
<android.view.View: int getVerticalFadingEdgeLength()>
<android.view.View: void setFadingEdgeLength(int)>
<android.view.View: int getHorizontalFadingEdgeLength()>
<android.view.View: int getVerticalScrollbarWidth()>
<android.view.View: int getHorizontalScrollbarHeight()>
<android.view.View: void initializeScrollbars(android.content.res.TypedArray)>
<android.view.View: void setVerticalScrollbarPosition(int)>
<android.view.View: int getVerticalScrollbarPosition()>
<android.view.View: void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>
<android.view.View: void removeOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>
<android.view.View: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>
<android.view.View: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>
<android.view.View: android.view.View$OnFocusChangeListener getOnFocusChangeListener()>
<android.view.View: boolean hasOnClickListeners()>
<android.view.View: boolean performClick()>
<android.view.View: boolean callOnClick()>
<android.view.View: boolean performLongClick()>
<android.view.View: boolean showContextMenu()>
<android.view.View: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)>
<android.view.View: void setOnGenericMotionListener(android.view.View$OnGenericMotionListener)>
<android.view.View: void setOnHoverListener(android.view.View$OnHoverListener)>
<android.view.View: void setOnDragListener(android.view.View$OnDragListener)>
<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect)>
<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect,boolean)>
<android.view.View: void clearFocus()>
<android.view.View: boolean hasFocus()>
<android.view.View: boolean hasFocusable()>
<android.view.View: void onFocusChanged(boolean,int,android.graphics.Rect)>
<android.view.View: void sendAccessibilityEvent(int)>
<android.view.View: void announceForAccessibility(java.lang.CharSequence)>
<android.view.View: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>
<android.view.View: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.view.View: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.view.View: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.view.View: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo()>
<android.view.View: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
<android.view.View: void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)>
<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>
<android.view.View: java.lang.CharSequence getContentDescription()>
<android.view.View: void setContentDescription(java.lang.CharSequence)>
<android.view.View: boolean isFocused()>
<android.view.View: android.view.View findFocus()>
<android.view.View: boolean isScrollContainer()>
<android.view.View: void setScrollContainer(boolean)>
<android.view.View: int getDrawingCacheQuality()>
<android.view.View: void setDrawingCacheQuality(int)>
<android.view.View: boolean getKeepScreenOn()>
<android.view.View: void setKeepScreenOn(boolean)>
<android.view.View: int getNextFocusLeftId()>
<android.view.View: void setNextFocusLeftId(int)>
<android.view.View: int getNextFocusRightId()>
<android.view.View: void setNextFocusRightId(int)>
<android.view.View: int getNextFocusUpId()>
<android.view.View: void setNextFocusUpId(int)>
<android.view.View: int getNextFocusDownId()>
<android.view.View: void setNextFocusDownId(int)>
<android.view.View: int getNextFocusForwardId()>
<android.view.View: void setNextFocusForwardId(int)>
<android.view.View: boolean isShown()>
<android.view.View: boolean fitSystemWindows(android.graphics.Rect)>
<android.view.View: void setFitsSystemWindows(boolean)>
<android.view.View: boolean getFitsSystemWindows()>
<android.view.View: void requestFitSystemWindows()>
<android.view.View: int getVisibility()>
<android.view.View: void setVisibility(int)>
<android.view.View: boolean isEnabled()>
<android.view.View: void setEnabled(boolean)>
<android.view.View: void setFocusable(boolean)>
<android.view.View: void setFocusableInTouchMode(boolean)>
<android.view.View: void setSoundEffectsEnabled(boolean)>
<android.view.View: boolean isSoundEffectsEnabled()>
<android.view.View: void setHapticFeedbackEnabled(boolean)>
<android.view.View: boolean isHapticFeedbackEnabled()>
<android.view.View: boolean hasTransientState()>
<android.view.View: void setHasTransientState(boolean)>
<android.view.View: void setWillNotDraw(boolean)>
<android.view.View: boolean willNotDraw()>
<android.view.View: void setWillNotCacheDrawing(boolean)>
<android.view.View: boolean willNotCacheDrawing()>
<android.view.View: boolean isClickable()>
<android.view.View: void setClickable(boolean)>
<android.view.View: boolean isLongClickable()>
<android.view.View: void setLongClickable(boolean)>
<android.view.View: void setPressed(boolean)>
<android.view.View: void dispatchSetPressed(boolean)>
<android.view.View: boolean isPressed()>
<android.view.View: boolean isSaveEnabled()>
<android.view.View: void setSaveEnabled(boolean)>
<android.view.View: boolean getFilterTouchesWhenObscured()>
<android.view.View: void setFilterTouchesWhenObscured(boolean)>
<android.view.View: boolean isSaveFromParentEnabled()>
<android.view.View: void setSaveFromParentEnabled(boolean)>
<android.view.View: boolean isFocusable()>
<android.view.View: boolean isFocusableInTouchMode()>
<android.view.View: android.view.View focusSearch(int)>
<android.view.View: boolean dispatchUnhandledMove(android.view.View,int)>
<android.view.View: java.util.ArrayList getFocusables(int)>
<android.view.View: void addFocusables(java.util.ArrayList,int)>
<android.view.View: void addFocusables(java.util.ArrayList,int,int)>
<android.view.View: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)>
<android.view.View: java.util.ArrayList getTouchables()>
<android.view.View: void addTouchables(java.util.ArrayList)>
<android.view.View: boolean requestFocus()>
<android.view.View: boolean requestFocus(int)>
<android.view.View: boolean requestFocus(int,android.graphics.Rect)>
<android.view.View: boolean requestFocusFromTouch()>
<android.view.View: int getImportantForAccessibility()>
<android.view.View: void setImportantForAccessibility(int)>
<android.view.View: android.view.ViewParent getParentForAccessibility()>
<android.view.View: void addChildrenForAccessibility(java.util.ArrayList)>
<android.view.View: boolean performAccessibilityAction(int,android.os.Bundle)>
<android.view.View: void onStartTemporaryDetach()>
<android.view.View: void onFinishTemporaryDetach()>
<android.view.View: android.view.KeyEvent$DispatcherState getKeyDispatcherState()>
<android.view.View: boolean dispatchKeyEventPreIme(android.view.KeyEvent)>
<android.view.View: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.view.View: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>
<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.view.View: boolean onFilterTouchEventForSecurity(android.view.MotionEvent)>
<android.view.View: boolean dispatchTrackballEvent(android.view.MotionEvent)>
<android.view.View: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>
<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>
<android.view.View: boolean dispatchGenericPointerEvent(android.view.MotionEvent)>
<android.view.View: boolean dispatchGenericFocusedEvent(android.view.MotionEvent)>
<android.view.View: void dispatchWindowFocusChanged(boolean)>
<android.view.View: void onWindowFocusChanged(boolean)>
<android.view.View: boolean hasWindowFocus()>
<android.view.View: void dispatchVisibilityChanged(android.view.View,int)>
<android.view.View: void onVisibilityChanged(android.view.View,int)>
<android.view.View: void dispatchDisplayHint(int)>
<android.view.View: void onDisplayHint(int)>
<android.view.View: void dispatchWindowVisibilityChanged(int)>
<android.view.View: void onWindowVisibilityChanged(int)>
<android.view.View: int getWindowVisibility()>
<android.view.View: void getWindowVisibleDisplayFrame(android.graphics.Rect)>
<android.view.View: void dispatchConfigurationChanged(android.content.res.Configuration)>
<android.view.View: void onConfigurationChanged(android.content.res.Configuration)>
<android.view.View: boolean isInTouchMode()>
<android.view.View: android.content.Context getContext()>
<android.view.View: boolean onKeyPreIme(int,android.view.KeyEvent)>
<android.view.View: boolean onKeyDown(int,android.view.KeyEvent)>
<android.view.View: boolean onKeyLongPress(int,android.view.KeyEvent)>
<android.view.View: boolean onKeyUp(int,android.view.KeyEvent)>
<android.view.View: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.view.View: boolean onKeyShortcut(int,android.view.KeyEvent)>
<android.view.View: boolean onCheckIsTextEditor()>
<android.view.View: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>
<android.view.View: boolean checkInputConnectionProxy(android.view.View)>
<android.view.View: void createContextMenu(android.view.ContextMenu)>
<android.view.View: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>
<android.view.View: void onCreateContextMenu(android.view.ContextMenu)>
<android.view.View: boolean onTrackballEvent(android.view.MotionEvent)>
<android.view.View: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.view.View: boolean onHoverEvent(android.view.MotionEvent)>
<android.view.View: boolean isHovered()>
<android.view.View: void setHovered(boolean)>
<android.view.View: void onHoverChanged(boolean)>
<android.view.View: boolean onTouchEvent(android.view.MotionEvent)>
<android.view.View: void cancelLongPress()>
<android.view.View: void setTouchDelegate(android.view.TouchDelegate)>
<android.view.View: android.view.TouchDelegate getTouchDelegate()>
<android.view.View: void bringToFront()>
<android.view.View: void onScrollChanged(int,int,int,int)>
<android.view.View: void onSizeChanged(int,int,int,int)>
<android.view.View: void dispatchDraw(android.graphics.Canvas)>
<android.view.View: android.view.ViewParent getParent()>
<android.view.View: void setScrollX(int)>
<android.view.View: void setScrollY(int)>
<android.view.View: int getScrollX()>
<android.view.View: int getScrollY()>
<android.view.View: int getWidth()>
<android.view.View: int getHeight()>
<android.view.View: void getDrawingRect(android.graphics.Rect)>
<android.view.View: int getMeasuredWidth()>
<android.view.View: int getMeasuredWidthAndState()>
<android.view.View: int getMeasuredHeight()>
<android.view.View: int getMeasuredHeightAndState()>
<android.view.View: int getMeasuredState()>
<android.view.View: android.graphics.Matrix getMatrix()>
<android.view.View: float getCameraDistance()>
<android.view.View: void setCameraDistance(float)>
<android.view.View: float getRotation()>
<android.view.View: void setRotation(float)>
<android.view.View: float getRotationY()>
<android.view.View: void setRotationY(float)>
<android.view.View: float getRotationX()>
<android.view.View: void setRotationX(float)>
<android.view.View: float getScaleX()>
<android.view.View: void setScaleX(float)>
<android.view.View: float getScaleY()>
<android.view.View: void setScaleY(float)>
<android.view.View: float getPivotX()>
<android.view.View: void setPivotX(float)>
<android.view.View: float getPivotY()>
<android.view.View: void setPivotY(float)>
<android.view.View: float getAlpha()>
<android.view.View: boolean hasOverlappingRendering()>
<android.view.View: void setAlpha(float)>
<android.view.View: int getTop()>
<android.view.View: void setTop(int)>
<android.view.View: int getBottom()>
<android.view.View: boolean isDirty()>
<android.view.View: void setBottom(int)>
<android.view.View: int getLeft()>
<android.view.View: void setLeft(int)>
<android.view.View: int getRight()>
<android.view.View: void setRight(int)>
<android.view.View: float getX()>
<android.view.View: void setX(float)>
<android.view.View: float getY()>
<android.view.View: void setY(float)>
<android.view.View: float getTranslationX()>
<android.view.View: void setTranslationX(float)>
<android.view.View: float getTranslationY()>
<android.view.View: void setTranslationY(float)>
<android.view.View: void getHitRect(android.graphics.Rect)>
<android.view.View: void getFocusedRect(android.graphics.Rect)>
<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)>
<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect)>
<android.view.View: boolean getLocalVisibleRect(android.graphics.Rect)>
<android.view.View: void offsetTopAndBottom(int)>
<android.view.View: void offsetLeftAndRight(int)>
<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>
<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.view.View: void scrollTo(int,int)>
<android.view.View: void scrollBy(int,int)>
<android.view.View: boolean awakenScrollBars()>
<android.view.View: boolean awakenScrollBars(int)>
<android.view.View: boolean awakenScrollBars(int,boolean)>
<android.view.View: void invalidate(android.graphics.Rect)>
<android.view.View: void invalidate(int,int,int,int)>
<android.view.View: void invalidate()>
<android.view.View: boolean isOpaque()>
<android.view.View: android.os.Handler getHandler()>
<android.view.View: boolean post(java.lang.Runnable)>
<android.view.View: boolean postDelayed(java.lang.Runnable,long)>
<android.view.View: void postOnAnimation(java.lang.Runnable)>
<android.view.View: void postOnAnimationDelayed(java.lang.Runnable,long)>
<android.view.View: boolean removeCallbacks(java.lang.Runnable)>
<android.view.View: void postInvalidate()>
<android.view.View: void postInvalidate(int,int,int,int)>
<android.view.View: void postInvalidateDelayed(long)>
<android.view.View: void postInvalidateDelayed(long,int,int,int,int)>
<android.view.View: void postInvalidateOnAnimation()>
<android.view.View: void postInvalidateOnAnimation(int,int,int,int)>
<android.view.View: void computeScroll()>
<android.view.View: boolean isHorizontalFadingEdgeEnabled()>
<android.view.View: void setHorizontalFadingEdgeEnabled(boolean)>
<android.view.View: boolean isVerticalFadingEdgeEnabled()>
<android.view.View: void setVerticalFadingEdgeEnabled(boolean)>
<android.view.View: float getTopFadingEdgeStrength()>
<android.view.View: float getBottomFadingEdgeStrength()>
<android.view.View: float getLeftFadingEdgeStrength()>
<android.view.View: float getRightFadingEdgeStrength()>
<android.view.View: boolean isHorizontalScrollBarEnabled()>
<android.view.View: void setHorizontalScrollBarEnabled(boolean)>
<android.view.View: boolean isVerticalScrollBarEnabled()>
<android.view.View: void setVerticalScrollBarEnabled(boolean)>
<android.view.View: void setScrollbarFadingEnabled(boolean)>
<android.view.View: boolean isScrollbarFadingEnabled()>
<android.view.View: int getScrollBarDefaultDelayBeforeFade()>
<android.view.View: void setScrollBarDefaultDelayBeforeFade(int)>
<android.view.View: int getScrollBarFadeDuration()>
<android.view.View: void setScrollBarFadeDuration(int)>
<android.view.View: int getScrollBarSize()>
<android.view.View: void setScrollBarSize(int)>
<android.view.View: void setScrollBarStyle(int)>
<android.view.View: int getScrollBarStyle()>
<android.view.View: int computeHorizontalScrollRange()>
<android.view.View: int computeHorizontalScrollOffset()>
<android.view.View: int computeHorizontalScrollExtent()>
<android.view.View: int computeVerticalScrollRange()>
<android.view.View: int computeVerticalScrollOffset()>
<android.view.View: int computeVerticalScrollExtent()>
<android.view.View: boolean canScrollHorizontally(int)>
<android.view.View: boolean canScrollVertically(int)>
<android.view.View: void onDrawScrollBars(android.graphics.Canvas)>
<android.view.View: void onDraw(android.graphics.Canvas)>
<android.view.View: void onAttachedToWindow()>
<android.view.View: void onScreenStateChanged(int)>
<android.view.View: void onDetachedFromWindow()>
<android.view.View: int getWindowAttachCount()>
<android.view.View: android.os.IBinder getWindowToken()>
<android.view.View: android.os.IBinder getApplicationWindowToken()>
<android.view.View: void saveHierarchyState(android.util.SparseArray)>
<android.view.View: void dispatchSaveInstanceState(android.util.SparseArray)>
<android.view.View: android.os.Parcelable onSaveInstanceState()>
<android.view.View: void restoreHierarchyState(android.util.SparseArray)>
<android.view.View: void dispatchRestoreInstanceState(android.util.SparseArray)>
<android.view.View: void onRestoreInstanceState(android.os.Parcelable)>
<android.view.View: long getDrawingTime()>
<android.view.View: void setDuplicateParentStateEnabled(boolean)>
<android.view.View: boolean isDuplicateParentStateEnabled()>
<android.view.View: void setLayerType(int,android.graphics.Paint)>
<android.view.View: int getLayerType()>
<android.view.View: void buildLayer()>
<android.view.View: void setDrawingCacheEnabled(boolean)>
<android.view.View: boolean isDrawingCacheEnabled()>
<android.view.View: android.graphics.Bitmap getDrawingCache()>
<android.view.View: android.graphics.Bitmap getDrawingCache(boolean)>
<android.view.View: void destroyDrawingCache()>
<android.view.View: void setDrawingCacheBackgroundColor(int)>
<android.view.View: int getDrawingCacheBackgroundColor()>
<android.view.View: void buildDrawingCache()>
<android.view.View: void buildDrawingCache(boolean)>
<android.view.View: boolean isInEditMode()>
<android.view.View: boolean isPaddingOffsetRequired()>
<android.view.View: int getLeftPaddingOffset()>
<android.view.View: int getRightPaddingOffset()>
<android.view.View: int getTopPaddingOffset()>
<android.view.View: int getBottomPaddingOffset()>
<android.view.View: boolean isHardwareAccelerated()>
<android.view.View: void draw(android.graphics.Canvas)>
<android.view.View: int getSolidColor()>
<android.view.View: boolean isLayoutRequested()>
<android.view.View: void layout(int,int,int,int)>
<android.view.View: void onLayout(boolean,int,int,int,int)>
<android.view.View: void onFinishInflate()>
<android.view.View: android.content.res.Resources getResources()>
<android.view.View: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.view.View: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable)>
<android.view.View: boolean verifyDrawable(android.graphics.drawable.Drawable)>
<android.view.View: void drawableStateChanged()>
<android.view.View: void refreshDrawableState()>
<android.view.View: int[] getDrawableState()>
<android.view.View: int[] onCreateDrawableState(int)>
<android.view.View: int[] mergeDrawableStates(int[],int[])>
<android.view.View: void jumpDrawablesToCurrentState()>
<android.view.View: void setBackgroundColor(int)>
<android.view.View: void setBackgroundResource(int)>
<android.view.View: void setBackground(android.graphics.drawable.Drawable)>
<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.view.View: android.graphics.drawable.Drawable getBackground()>
<android.view.View: void setPadding(int,int,int,int)>
<android.view.View: int getPaddingTop()>
<android.view.View: int getPaddingBottom()>
<android.view.View: int getPaddingLeft()>
<android.view.View: int getPaddingRight()>
<android.view.View: void setSelected(boolean)>
<android.view.View: void dispatchSetSelected(boolean)>
<android.view.View: boolean isSelected()>
<android.view.View: void setActivated(boolean)>
<android.view.View: void dispatchSetActivated(boolean)>
<android.view.View: boolean isActivated()>
<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>
<android.view.View: android.view.View getRootView()>
<android.view.View: void getLocationOnScreen(int[])>
<android.view.View: void getLocationInWindow(int[])>
<android.view.View: android.view.View findViewWithTag(java.lang.Object)>
<android.view.View: void setId(int)>
<android.view.View: int getId()>
<android.view.View: java.lang.Object getTag()>
<android.view.View: void setTag(java.lang.Object)>
<android.view.View: java.lang.Object getTag(int)>
<android.view.View: void setTag(int,java.lang.Object)>
<android.view.View: int getBaseline()>
<android.view.View: void requestLayout()>
<android.view.View: void forceLayout()>
<android.view.View: void measure(int,int)>
<android.view.View: void onMeasure(int,int)>
<android.view.View: void setMeasuredDimension(int,int)>
<android.view.View: int combineMeasuredStates(int,int)>
<android.view.View: int resolveSize(int,int)>
<android.view.View: int resolveSizeAndState(int,int,int)>
<android.view.View: int getDefaultSize(int,int)>
<android.view.View: int getSuggestedMinimumHeight()>
<android.view.View: int getSuggestedMinimumWidth()>
<android.view.View: int getMinimumHeight()>
<android.view.View: void setMinimumHeight(int)>
<android.view.View: int getMinimumWidth()>
<android.view.View: void setMinimumWidth(int)>
<android.view.View: android.view.animation.Animation getAnimation()>
<android.view.View: void startAnimation(android.view.animation.Animation)>
<android.view.View: void clearAnimation()>
<android.view.View: void setAnimation(android.view.animation.Animation)>
<android.view.View: void onAnimationStart()>
<android.view.View: void onAnimationEnd()>
<android.view.View: boolean onSetAlpha(int)>
<android.view.View: void playSoundEffect(int)>
<android.view.View: boolean performHapticFeedback(int)>
<android.view.View: boolean performHapticFeedback(int,int)>
<android.view.View: void setSystemUiVisibility(int)>
<android.view.View: int getSystemUiVisibility()>
<android.view.View: int getWindowSystemUiVisibility()>
<android.view.View: void onWindowSystemUiVisibilityChanged(int)>
<android.view.View: void dispatchWindowSystemUiVisiblityChanged(int)>
<android.view.View: void setOnSystemUiVisibilityChangeListener(android.view.View$OnSystemUiVisibilityChangeListener)>
<android.view.View: void dispatchSystemUiVisibilityChanged(int)>
<android.view.View: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.view.View: boolean onDragEvent(android.view.DragEvent)>
<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>
<android.view.View: android.view.View inflate(android.content.Context,int,android.view.ViewGroup)>
<android.view.View: boolean overScrollBy(int,int,int,int,int,int,int,int,boolean)>
<android.view.View: void onOverScrolled(int,int,boolean,boolean)>
<android.view.View: int getOverScrollMode()>
<android.view.View: void setOverScrollMode(int)>
<android.view.View: android.view.ViewPropertyAnimator animate()>
<android.os.Bundle: void setClassLoader(java.lang.ClassLoader)>
<android.os.Bundle: java.lang.ClassLoader getClassLoader()>
<android.os.Bundle: java.lang.Object clone()>
<android.os.Bundle: int size()>
<android.os.Bundle: boolean isEmpty()>
<android.os.Bundle: void clear()>
<android.os.Bundle: boolean containsKey(java.lang.String)>
<android.os.Bundle: void remove(java.lang.String)>
<android.os.Bundle: void putAll(android.os.Bundle)>
<android.os.Bundle: java.util.Set keySet()>
<android.os.Bundle: boolean hasFileDescriptors()>
<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])>
<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)>
<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>
<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)>
<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)>
<android.os.Bundle: void putCharSequenceArrayList(java.lang.String,java.util.ArrayList)>
<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)>
<android.os.Bundle: void putBooleanArray(java.lang.String,boolean[])>
<android.os.Bundle: void putByteArray(java.lang.String,byte[])>
<android.os.Bundle: void putShortArray(java.lang.String,short[])>
<android.os.Bundle: void putCharArray(java.lang.String,char[])>
<android.os.Bundle: void putIntArray(java.lang.String,int[])>
<android.os.Bundle: void putLongArray(java.lang.String,long[])>
<android.os.Bundle: void putFloatArray(java.lang.String,float[])>
<android.os.Bundle: void putDoubleArray(java.lang.String,double[])>
<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])>
<android.os.Bundle: void putCharSequenceArray(java.lang.String,java.lang.CharSequence[])>
<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>
<android.os.Bundle: boolean getBoolean(java.lang.String)>
<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>
<android.os.Bundle: byte getByte(java.lang.String)>
<android.os.Bundle: java.lang.Byte getByte(java.lang.String,byte)>
<android.os.Bundle: char getChar(java.lang.String)>
<android.os.Bundle: char getChar(java.lang.String,char)>
<android.os.Bundle: short getShort(java.lang.String)>
<android.os.Bundle: short getShort(java.lang.String,short)>
<android.os.Bundle: long getLong(java.lang.String)>
<android.os.Bundle: long getLong(java.lang.String,long)>
<android.os.Bundle: float getFloat(java.lang.String)>
<android.os.Bundle: float getFloat(java.lang.String,float)>
<android.os.Bundle: double getDouble(java.lang.String)>
<android.os.Bundle: double getDouble(java.lang.String,double)>
<android.os.Bundle: java.lang.String getString(java.lang.String,java.lang.String)>
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)>
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String,java.lang.CharSequence)>
<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)>
<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>
<android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)>
<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)>
<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>
<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)>
<android.os.Bundle: java.util.ArrayList getIntegerArrayList(java.lang.String)>
<android.os.Bundle: java.util.ArrayList getCharSequenceArrayList(java.lang.String)>
<android.os.Bundle: boolean[] getBooleanArray(java.lang.String)>
<android.os.Bundle: byte[] getByteArray(java.lang.String)>
<android.os.Bundle: short[] getShortArray(java.lang.String)>
<android.os.Bundle: char[] getCharArray(java.lang.String)>
<android.os.Bundle: int[] getIntArray(java.lang.String)>
<android.os.Bundle: long[] getLongArray(java.lang.String)>
<android.os.Bundle: float[] getFloatArray(java.lang.String)>
<android.os.Bundle: double[] getDoubleArray(java.lang.String)>
<android.os.Bundle: java.lang.String[] getStringArray(java.lang.String)>
<android.os.Bundle: java.lang.CharSequence[] getCharSequenceArray(java.lang.String)>
<android.os.Bundle: int describeContents()>
<android.os.Bundle: void writeToParcel(android.os.Parcel,int)>
<android.os.Bundle: void readFromParcel(android.os.Parcel)>
<android.os.Bundle: java.lang.String toString()>
<android.graphics.Bitmap: int getDensity()>
<android.graphics.Bitmap: void setDensity(int)>
<android.graphics.Bitmap: void recycle()>
<android.graphics.Bitmap: boolean isRecycled()>
<android.graphics.Bitmap: int getGenerationId()>
<android.graphics.Bitmap: void copyPixelsToBuffer(java.nio.Buffer)>
<android.graphics.Bitmap: void copyPixelsFromBuffer(java.nio.Buffer)>
<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)>
<android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,int,int,android.graphics.Bitmap$Config)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,android.graphics.Bitmap$Config)>
<android.graphics.Bitmap: byte[] getNinePatchChunk()>
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>
<android.graphics.Bitmap: boolean isMutable()>
<android.graphics.Bitmap: int getWidth()>
<android.graphics.Bitmap: int getHeight()>
<android.graphics.Bitmap: int getScaledWidth(android.graphics.Canvas)>
<android.graphics.Bitmap: int getScaledHeight(android.graphics.Canvas)>
<android.graphics.Bitmap: int getScaledWidth(android.util.DisplayMetrics)>
<android.graphics.Bitmap: int getScaledHeight(android.util.DisplayMetrics)>
<android.graphics.Bitmap: int getScaledWidth(int)>
<android.graphics.Bitmap: int getScaledHeight(int)>
<android.graphics.Bitmap: int getRowBytes()>
<android.graphics.Bitmap: int getByteCount()>
<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>
<android.graphics.Bitmap: boolean hasAlpha()>
<android.graphics.Bitmap: void setHasAlpha(boolean)>
<android.graphics.Bitmap: void eraseColor(int)>
<android.graphics.Bitmap: int getPixel(int,int)>
<android.graphics.Bitmap: void getPixels(int[],int,int,int,int,int,int)>
<android.graphics.Bitmap: void setPixel(int,int,int)>
<android.graphics.Bitmap: void setPixels(int[],int,int,int,int,int,int)>
<android.graphics.Bitmap: int describeContents()>
<android.graphics.Bitmap: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha()>
<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha(android.graphics.Paint,int[])>
<android.graphics.Bitmap: boolean sameAs(android.graphics.Bitmap)>
<android.graphics.Bitmap: void prepareToDraw()>
<android.graphics.Canvas: boolean isHardwareAccelerated()>
<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>
<android.graphics.Canvas: int getDensity()>
<android.graphics.Canvas: void setDensity(int)>
<android.graphics.Canvas: int getMaximumBitmapWidth()>
<android.graphics.Canvas: int getMaximumBitmapHeight()>
<android.graphics.Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint,int)>
<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>
<android.graphics.Canvas: int saveLayerAlpha(android.graphics.RectF,int,int)>
<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)>
<android.graphics.Canvas: void scale(float,float,float,float)>
<android.graphics.Canvas: void rotate(float,float,float)>
<android.graphics.Canvas: void concat(android.graphics.Matrix)>
<android.graphics.Canvas: void setMatrix(android.graphics.Matrix)>
<android.graphics.Canvas: void getMatrix(android.graphics.Matrix)>
<android.graphics.Canvas: android.graphics.Matrix getMatrix()>
<android.graphics.Canvas: boolean clipRect(android.graphics.RectF,android.graphics.Region$Op)>
<android.graphics.Canvas: boolean clipRect(android.graphics.Rect,android.graphics.Region$Op)>
<android.graphics.Canvas: boolean clipRect(float,float,float,float,android.graphics.Region$Op)>
<android.graphics.Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region$Op)>
<android.graphics.Canvas: boolean clipPath(android.graphics.Path)>
<android.graphics.Canvas: boolean clipRegion(android.graphics.Region,android.graphics.Region$Op)>
<android.graphics.Canvas: boolean clipRegion(android.graphics.Region)>
<android.graphics.Canvas: android.graphics.DrawFilter getDrawFilter()>
<android.graphics.Canvas: void setDrawFilter(android.graphics.DrawFilter)>
<android.graphics.Canvas: boolean quickReject(android.graphics.RectF,android.graphics.Canvas$EdgeType)>
<android.graphics.Canvas: boolean quickReject(android.graphics.Path,android.graphics.Canvas$EdgeType)>
<android.graphics.Canvas: boolean quickReject(float,float,float,float,android.graphics.Canvas$EdgeType)>
<android.graphics.Canvas: boolean getClipBounds(android.graphics.Rect)>
<android.graphics.Canvas: android.graphics.Rect getClipBounds()>
<android.graphics.Canvas: void drawRGB(int,int,int)>
<android.graphics.Canvas: void drawARGB(int,int,int,int)>
<android.graphics.Canvas: void drawColor(int)>
<android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)>
<android.graphics.Canvas: void drawPaint(android.graphics.Paint)>
<android.graphics.Canvas: void drawPoints(float[],android.graphics.Paint)>
<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawLines(float[],android.graphics.Paint)>
<android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>
<android.graphics.Canvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>
<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>
<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>
<android.graphics.Canvas: void drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)>
<android.graphics.Canvas: void drawVertices(android.graphics.Canvas$VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)>
<android.graphics.Canvas: void drawText(char[],int,int,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawText(java.lang.String,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawText(java.lang.String,int,int,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawPosText(char[],int,int,float[],android.graphics.Paint)>
<android.graphics.Canvas: void drawPosText(java.lang.String,float[],android.graphics.Paint)>
<android.graphics.Canvas: void drawTextOnPath(char[],int,int,android.graphics.Path,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawTextOnPath(java.lang.String,android.graphics.Path,float,float,android.graphics.Paint)>
<android.graphics.Canvas: void drawPicture(android.graphics.Picture)>
<android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.RectF)>
<android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.Rect)>
<android.content.res.Configuration: boolean isLayoutSizeAtLeast(int)>
<android.content.res.Configuration: void setTo(android.content.res.Configuration)>
<android.content.res.Configuration: java.lang.String toString()>
<android.content.res.Configuration: void setToDefaults()>
<android.content.res.Configuration: int updateFrom(android.content.res.Configuration)>
<android.content.res.Configuration: int diff(android.content.res.Configuration)>
<android.content.res.Configuration: boolean needNewResources(int,int)>
<android.content.res.Configuration: int describeContents()>
<android.content.res.Configuration: void writeToParcel(android.os.Parcel,int)>
<android.content.res.Configuration: void readFromParcel(android.os.Parcel)>
<android.content.res.Configuration: int compareTo(android.content.res.Configuration)>
<android.content.res.Configuration: boolean equals(android.content.res.Configuration)>
<android.content.res.Configuration: boolean equals(java.lang.Object)>
<android.content.res.Configuration: int hashCode()>
<android.app.FragmentManager: void enableDebugLogging(boolean)>
<android.app.FragmentManager: void invalidateOptionsMenu()>
<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String)>
<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)>
<android.app.Fragment: boolean equals(java.lang.Object)>
<android.app.Fragment: int hashCode()>
<android.app.Fragment: java.lang.String toString()>
<android.app.Fragment: int getId()>
<android.app.Fragment: java.lang.String getTag()>
<android.app.Fragment: void setArguments(android.os.Bundle)>
<android.app.Fragment: android.os.Bundle getArguments()>
<android.app.Fragment: void setInitialSavedState(android.app.Fragment$SavedState)>
<android.app.Fragment: void setTargetFragment(android.app.Fragment,int)>
<android.app.Fragment: android.app.Fragment getTargetFragment()>
<android.app.Fragment: int getTargetRequestCode()>
<android.app.Fragment: android.app.Activity getActivity()>
<android.app.Fragment: android.content.res.Resources getResources()>
<android.app.Fragment: java.lang.CharSequence getText(int)>
<android.app.Fragment: java.lang.String getString(int)>
<android.app.Fragment: java.lang.String getString(int,java.lang.Object[])>
<android.app.Fragment: android.app.FragmentManager getFragmentManager()>
<android.app.Fragment: boolean isAdded()>
<android.app.Fragment: boolean isDetached()>
<android.app.Fragment: boolean isRemoving()>
<android.app.Fragment: boolean isInLayout()>
<android.app.Fragment: boolean isResumed()>
<android.app.Fragment: boolean isVisible()>
<android.app.Fragment: boolean isHidden()>
<android.app.Fragment: void onHiddenChanged(boolean)>
<android.app.Fragment: void setRetainInstance(boolean)>
<android.app.Fragment: boolean getRetainInstance()>
<android.app.Fragment: void setHasOptionsMenu(boolean)>
<android.app.Fragment: void setMenuVisibility(boolean)>
<android.app.Fragment: void setUserVisibleHint(boolean)>
<android.app.Fragment: boolean getUserVisibleHint()>
<android.app.Fragment: android.app.LoaderManager getLoaderManager()>
<android.app.Fragment: void startActivity(android.content.Intent)>
<android.app.Fragment: void startActivity(android.content.Intent,android.os.Bundle)>
<android.app.Fragment: void startActivityForResult(android.content.Intent,int)>
<android.app.Fragment: void startActivityForResult(android.content.Intent,int,android.os.Bundle)>
<android.app.Fragment: void onActivityResult(int,int,android.content.Intent)>
<android.app.Fragment: void onInflate(android.util.AttributeSet,android.os.Bundle)>
<android.app.Fragment: void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle)>
<android.app.Fragment: void onAttach(android.app.Activity)>
<android.app.Fragment: android.animation.Animator onCreateAnimator(int,boolean,int)>
<android.app.Fragment: void onCreate(android.os.Bundle)>
<android.app.Fragment: void onViewCreated(android.view.View,android.os.Bundle)>
<android.app.Fragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<android.app.Fragment: android.view.View getView()>
<android.app.Fragment: void onActivityCreated(android.os.Bundle)>
<android.app.Fragment: void onStart()>
<android.app.Fragment: void onResume()>
<android.app.Fragment: void onSaveInstanceState(android.os.Bundle)>
<android.app.Fragment: void onConfigurationChanged(android.content.res.Configuration)>
<android.app.Fragment: void onPause()>
<android.app.Fragment: void onStop()>
<android.app.Fragment: void onLowMemory()>
<android.app.Fragment: void onTrimMemory(int)>
<android.app.Fragment: void onDestroyView()>
<android.app.Fragment: void onDestroy()>
<android.app.Fragment: void onDetach()>
<android.app.Fragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>
<android.app.Fragment: void onPrepareOptionsMenu(android.view.Menu)>
<android.app.Fragment: void onDestroyOptionsMenu()>
<android.app.Fragment: boolean onOptionsItemSelected(android.view.MenuItem)>
<android.app.Fragment: void onOptionsMenuClosed(android.view.Menu)>
<android.app.Fragment: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
<android.app.Fragment: void registerForContextMenu(android.view.View)>
<android.app.Fragment: void unregisterForContextMenu(android.view.View)>
<android.app.Fragment: boolean onContextItemSelected(android.view.MenuItem)>
<android.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.app.ActionBar: void setStackedBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.app.ActionBar: void setSplitBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.app.ActionBar: void setHomeButtonEnabled(boolean)>
<android.app.ActionBar: android.content.Context getThemedContext()>
<android.view.ViewGroup$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>
<android.view.KeyEvent: int getMaxKeyCode()>
<android.view.KeyEvent: int getDeadChar(int,int)>
<android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int)>
<android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int,int)>
<android.view.KeyEvent: android.view.KeyEvent changeAction(android.view.KeyEvent,int)>
<android.view.KeyEvent: android.view.KeyEvent changeFlags(android.view.KeyEvent,int)>
<android.view.KeyEvent: boolean isSystem()>
<android.view.KeyEvent: boolean isGamepadButton(int)>
<android.view.KeyEvent: int getDeviceId()>
<android.view.KeyEvent: int getSource()>
<android.view.KeyEvent: void setSource(int)>
<android.view.KeyEvent: int getMetaState()>
<android.view.KeyEvent: int getModifiers()>
<android.view.KeyEvent: int getFlags()>
<android.view.KeyEvent: int getModifierMetaStateMask()>
<android.view.KeyEvent: boolean isModifierKey(int)>
<android.view.KeyEvent: int normalizeMetaState(int)>
<android.view.KeyEvent: boolean metaStateHasNoModifiers(int)>
<android.view.KeyEvent: boolean metaStateHasModifiers(int,int)>
<android.view.KeyEvent: boolean hasNoModifiers()>
<android.view.KeyEvent: boolean hasModifiers(int)>
<android.view.KeyEvent: boolean isAltPressed()>
<android.view.KeyEvent: boolean isShiftPressed()>
<android.view.KeyEvent: boolean isSymPressed()>
<android.view.KeyEvent: boolean isCtrlPressed()>
<android.view.KeyEvent: boolean isMetaPressed()>
<android.view.KeyEvent: boolean isFunctionPressed()>
<android.view.KeyEvent: boolean isCapsLockOn()>
<android.view.KeyEvent: boolean isNumLockOn()>
<android.view.KeyEvent: boolean isScrollLockOn()>
<android.view.KeyEvent: int getAction()>
<android.view.KeyEvent: boolean isCanceled()>
<android.view.KeyEvent: void startTracking()>
<android.view.KeyEvent: boolean isTracking()>
<android.view.KeyEvent: boolean isLongPress()>
<android.view.KeyEvent: int getKeyCode()>
<android.view.KeyEvent: java.lang.String getCharacters()>
<android.view.KeyEvent: int getScanCode()>
<android.view.KeyEvent: int getRepeatCount()>
<android.view.KeyEvent: long getDownTime()>
<android.view.KeyEvent: long getEventTime()>
<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()>
<android.view.KeyEvent: char getDisplayLabel()>
<android.view.KeyEvent: int getUnicodeChar()>
<android.view.KeyEvent: int getUnicodeChar(int)>
<android.view.KeyEvent: boolean getKeyData(android.view.KeyCharacterMap$KeyData)>
<android.view.KeyEvent: char getMatch(char[])>
<android.view.KeyEvent: char getMatch(char[],int)>
<android.view.KeyEvent: char getNumber()>
<android.view.KeyEvent: boolean isPrintingKey()>
<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback)>
<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback,android.view.KeyEvent$DispatcherState,java.lang.Object)>
<android.view.KeyEvent: java.lang.String toString()>
<android.view.KeyEvent: java.lang.String keyCodeToString(int)>
<android.view.KeyEvent: int keyCodeFromString(java.lang.String)>
<android.view.KeyEvent: void writeToParcel(android.os.Parcel,int)>
<android.view.MotionEvent: void finalize()>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,android.view.MotionEvent$PointerProperties[],android.view.MotionEvent$PointerCoords[],int,int,float,float,int,int,int,int)>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,int[],android.view.MotionEvent$PointerCoords[],int,float,float,int,int,int,int)>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,float,float,int,float,float,int,int)>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,float,float,float,float,int,float,float,int,int)>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>
<android.view.MotionEvent: android.view.MotionEvent obtain(android.view.MotionEvent)>
<android.view.MotionEvent: android.view.MotionEvent obtainNoHistory(android.view.MotionEvent)>
<android.view.MotionEvent: void recycle()>
<android.view.MotionEvent: int getDeviceId()>
<android.view.MotionEvent: int getSource()>
<android.view.MotionEvent: void setSource(int)>
<android.view.MotionEvent: int getAction()>
<android.view.MotionEvent: int getActionMasked()>
<android.view.MotionEvent: int getActionIndex()>
<android.view.MotionEvent: int getFlags()>
<android.view.MotionEvent: long getDownTime()>
<android.view.MotionEvent: long getEventTime()>
<android.view.MotionEvent: float getX()>
<android.view.MotionEvent: float getY()>
<android.view.MotionEvent: float getPressure()>
<android.view.MotionEvent: float getSize()>
<android.view.MotionEvent: float getTouchMajor()>
<android.view.MotionEvent: float getTouchMinor()>
<android.view.MotionEvent: float getToolMajor()>
<android.view.MotionEvent: float getToolMinor()>
<android.view.MotionEvent: float getOrientation()>
<android.view.MotionEvent: float getAxisValue(int)>
<android.view.MotionEvent: int getPointerCount()>
<android.view.MotionEvent: int getPointerId(int)>
<android.view.MotionEvent: int getToolType(int)>
<android.view.MotionEvent: int findPointerIndex(int)>
<android.view.MotionEvent: float getX(int)>
<android.view.MotionEvent: float getY(int)>
<android.view.MotionEvent: float getPressure(int)>
<android.view.MotionEvent: float getSize(int)>
<android.view.MotionEvent: float getTouchMajor(int)>
<android.view.MotionEvent: float getTouchMinor(int)>
<android.view.MotionEvent: float getToolMajor(int)>
<android.view.MotionEvent: float getToolMinor(int)>
<android.view.MotionEvent: float getOrientation(int)>
<android.view.MotionEvent: float getAxisValue(int,int)>
<android.view.MotionEvent: void getPointerCoords(int,android.view.MotionEvent$PointerCoords)>
<android.view.MotionEvent: void getPointerProperties(int,android.view.MotionEvent$PointerProperties)>
<android.view.MotionEvent: int getMetaState()>
<android.view.MotionEvent: int getButtonState()>
<android.view.MotionEvent: float getRawX()>
<android.view.MotionEvent: float getRawY()>
<android.view.MotionEvent: float getXPrecision()>
<android.view.MotionEvent: float getYPrecision()>
<android.view.MotionEvent: int getHistorySize()>
<android.view.MotionEvent: long getHistoricalEventTime(int)>
<android.view.MotionEvent: float getHistoricalX(int)>
<android.view.MotionEvent: float getHistoricalY(int)>
<android.view.MotionEvent: float getHistoricalPressure(int)>
<android.view.MotionEvent: float getHistoricalSize(int)>
<android.view.MotionEvent: float getHistoricalTouchMajor(int)>
<android.view.MotionEvent: float getHistoricalTouchMinor(int)>
<android.view.MotionEvent: float getHistoricalToolMajor(int)>
<android.view.MotionEvent: float getHistoricalToolMinor(int)>
<android.view.MotionEvent: float getHistoricalOrientation(int)>
<android.view.MotionEvent: float getHistoricalAxisValue(int,int)>
<android.view.MotionEvent: float getHistoricalX(int,int)>
<android.view.MotionEvent: float getHistoricalY(int,int)>
<android.view.MotionEvent: float getHistoricalPressure(int,int)>
<android.view.MotionEvent: float getHistoricalSize(int,int)>
<android.view.MotionEvent: float getHistoricalTouchMajor(int,int)>
<android.view.MotionEvent: float getHistoricalTouchMinor(int,int)>
<android.view.MotionEvent: float getHistoricalToolMajor(int,int)>
<android.view.MotionEvent: float getHistoricalToolMinor(int,int)>
<android.view.MotionEvent: float getHistoricalOrientation(int,int)>
<android.view.MotionEvent: float getHistoricalAxisValue(int,int,int)>
<android.view.MotionEvent: void getHistoricalPointerCoords(int,int,android.view.MotionEvent$PointerCoords)>
<android.view.MotionEvent: int getEdgeFlags()>
<android.view.MotionEvent: void setEdgeFlags(int)>
<android.view.MotionEvent: void setAction(int)>
<android.view.MotionEvent: void offsetLocation(float,float)>
<android.view.MotionEvent: void setLocation(float,float)>
<android.view.MotionEvent: void transform(android.graphics.Matrix)>
<android.view.MotionEvent: void addBatch(long,float,float,float,float,int)>
<android.view.MotionEvent: void addBatch(long,android.view.MotionEvent$PointerCoords[],int)>
<android.view.MotionEvent: java.lang.String toString()>
<android.view.MotionEvent: java.lang.String axisToString(int)>
<android.view.MotionEvent: int axisFromString(java.lang.String)>
<android.view.MotionEvent: void writeToParcel(android.os.Parcel,int)>
<android.view.WindowManager$LayoutParams: boolean mayUseInputMethod(int)>
<android.view.WindowManager$LayoutParams: void setTitle(java.lang.CharSequence)>
<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>
<android.view.WindowManager$LayoutParams: int describeContents()>
<android.view.WindowManager$LayoutParams: void writeToParcel(android.os.Parcel,int)>
<android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)>
<android.view.WindowManager$LayoutParams: java.lang.String debug(java.lang.String)>
<android.view.WindowManager$LayoutParams: java.lang.String toString()>
<android.view.accessibility.AccessibilityEvent: int getRecordCount()>
<android.view.accessibility.AccessibilityEvent: void appendRecord(android.view.accessibility.AccessibilityRecord)>
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityRecord getRecord(int)>
<android.view.accessibility.AccessibilityEvent: int getEventType()>
<android.view.accessibility.AccessibilityEvent: void setEventType(int)>
<android.view.accessibility.AccessibilityEvent: long getEventTime()>
<android.view.accessibility.AccessibilityEvent: void setEventTime(long)>
<android.view.accessibility.AccessibilityEvent: java.lang.CharSequence getPackageName()>
<android.view.accessibility.AccessibilityEvent: void setPackageName(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityEvent: void setMovementGranularity(int)>
<android.view.accessibility.AccessibilityEvent: int getMovementGranularity()>
<android.view.accessibility.AccessibilityEvent: void setAction(int)>
<android.view.accessibility.AccessibilityEvent: int getAction()>
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)>
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(android.view.accessibility.AccessibilityEvent)>
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain()>
<android.view.accessibility.AccessibilityEvent: void recycle()>
<android.view.accessibility.AccessibilityEvent: void initFromParcel(android.os.Parcel)>
<android.view.accessibility.AccessibilityEvent: void writeToParcel(android.os.Parcel,int)>
<android.view.accessibility.AccessibilityEvent: int describeContents()>
<android.view.accessibility.AccessibilityEvent: java.lang.String toString()>
<android.view.accessibility.AccessibilityEvent: java.lang.String eventTypeToString(int)>
<android.app.TaskStackBuilder: android.app.TaskStackBuilder create(android.content.Context)>
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addNextIntent(android.content.Intent)>
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addNextIntentWithParentStack(android.content.Intent)>
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(android.app.Activity)>
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(java.lang.Class)>
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(android.content.ComponentName)>
<android.app.TaskStackBuilder: int getIntentCount()>
<android.app.TaskStackBuilder: android.content.Intent editIntentAt(int)>
<android.app.TaskStackBuilder: void startActivities()>
<android.app.TaskStackBuilder: void startActivities(android.os.Bundle)>
<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int)>
<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int,android.os.Bundle)>
<android.app.TaskStackBuilder: android.content.Intent[] getIntents()>
<android.app.Dialog: android.content.Context getContext()>
<android.app.Dialog: android.app.ActionBar getActionBar()>
<android.app.Dialog: void setOwnerActivity(android.app.Activity)>
<android.app.Dialog: android.app.Activity getOwnerActivity()>
<android.app.Dialog: boolean isShowing()>
<android.app.Dialog: void show()>
<android.app.Dialog: void hide()>
<android.app.Dialog: void dismiss()>
<android.app.Dialog: void onCreate(android.os.Bundle)>
<android.app.Dialog: void onStart()>
<android.app.Dialog: void onStop()>
<android.app.Dialog: android.os.Bundle onSaveInstanceState()>
<android.app.Dialog: void onRestoreInstanceState(android.os.Bundle)>
<android.app.Dialog: android.view.Window getWindow()>
<android.app.Dialog: android.view.View getCurrentFocus()>
<android.app.Dialog: android.view.View findViewById(int)>
<android.app.Dialog: void setContentView(int)>
<android.app.Dialog: void setContentView(android.view.View)>
<android.app.Dialog: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.app.Dialog: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.app.Dialog: void setTitle(java.lang.CharSequence)>
<android.app.Dialog: void setTitle(int)>
<android.app.Dialog: boolean onKeyDown(int,android.view.KeyEvent)>
<android.app.Dialog: boolean onKeyLongPress(int,android.view.KeyEvent)>
<android.app.Dialog: boolean onKeyUp(int,android.view.KeyEvent)>
<android.app.Dialog: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.app.Dialog: void onBackPressed()>
<android.app.Dialog: boolean onKeyShortcut(int,android.view.KeyEvent)>
<android.app.Dialog: boolean onTouchEvent(android.view.MotionEvent)>
<android.app.Dialog: boolean onTrackballEvent(android.view.MotionEvent)>
<android.app.Dialog: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.app.Dialog: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>
<android.app.Dialog: void onContentChanged()>
<android.app.Dialog: void onWindowFocusChanged(boolean)>
<android.app.Dialog: void onAttachedToWindow()>
<android.app.Dialog: void onDetachedFromWindow()>
<android.app.Dialog: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.app.Dialog: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>
<android.app.Dialog: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.app.Dialog: boolean dispatchTrackballEvent(android.view.MotionEvent)>
<android.app.Dialog: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>
<android.app.Dialog: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.app.Dialog: android.view.View onCreatePanelView(int)>
<android.app.Dialog: boolean onCreatePanelMenu(int,android.view.Menu)>
<android.app.Dialog: boolean onPreparePanel(int,android.view.View,android.view.Menu)>
<android.app.Dialog: boolean onMenuOpened(int,android.view.Menu)>
<android.app.Dialog: boolean onMenuItemSelected(int,android.view.MenuItem)>
<android.app.Dialog: void onPanelClosed(int,android.view.Menu)>
<android.app.Dialog: boolean onCreateOptionsMenu(android.view.Menu)>
<android.app.Dialog: boolean onPrepareOptionsMenu(android.view.Menu)>
<android.app.Dialog: boolean onOptionsItemSelected(android.view.MenuItem)>
<android.app.Dialog: void onOptionsMenuClosed(android.view.Menu)>
<android.app.Dialog: void openOptionsMenu()>
<android.app.Dialog: void closeOptionsMenu()>
<android.app.Dialog: void invalidateOptionsMenu()>
<android.app.Dialog: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
<android.app.Dialog: void registerForContextMenu(android.view.View)>
<android.app.Dialog: void unregisterForContextMenu(android.view.View)>
<android.app.Dialog: void openContextMenu(android.view.View)>
<android.app.Dialog: boolean onContextItemSelected(android.view.MenuItem)>
<android.app.Dialog: void onContextMenuClosed(android.view.Menu)>
<android.app.Dialog: boolean onSearchRequested()>
<android.app.Dialog: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)>
<android.app.Dialog: void onActionModeStarted(android.view.ActionMode)>
<android.app.Dialog: void onActionModeFinished(android.view.ActionMode)>
<android.app.Dialog: void takeKeyEvents(boolean)>
<android.app.Dialog: boolean requestWindowFeature(int)>
<android.app.Dialog: void setFeatureDrawableResource(int,int)>
<android.app.Dialog: void setFeatureDrawableUri(int,android.net.Uri)>
<android.app.Dialog: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>
<android.app.Dialog: void setFeatureDrawableAlpha(int,int)>
<android.app.Dialog: android.view.LayoutInflater getLayoutInflater()>
<android.app.Dialog: void setCancelable(boolean)>
<android.app.Dialog: void setCanceledOnTouchOutside(boolean)>
<android.app.Dialog: void cancel()>
<android.app.Dialog: void setOnCancelListener(android.content.DialogInterface$OnCancelListener)>
<android.app.Dialog: void setCancelMessage(android.os.Message)>
<android.app.Dialog: void setOnDismissListener(android.content.DialogInterface$OnDismissListener)>
<android.app.Dialog: void setOnShowListener(android.content.DialogInterface$OnShowListener)>
<android.app.Dialog: void setDismissMessage(android.os.Message)>
<android.app.Dialog: void setVolumeControlStream(int)>
<android.app.Dialog: int getVolumeControlStream()>
<android.app.Dialog: void setOnKeyListener(android.content.DialogInterface$OnKeyListener)>
<android.net.Uri: boolean isOpaque()>
<android.net.Uri: boolean isAbsolute()>
<android.net.Uri: boolean equals(java.lang.Object)>
<android.net.Uri: int hashCode()>
<android.net.Uri: int compareTo(android.net.Uri)>
<android.net.Uri: android.net.Uri fromFile(java.io.File)>
<android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)>
<android.net.Uri: java.util.Set getQueryParameterNames()>
<android.net.Uri: java.util.List getQueryParameters(java.lang.String)>
<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)>
<android.net.Uri: boolean getBooleanQueryParameter(java.lang.String,boolean)>
<android.net.Uri: android.net.Uri normalizeScheme()>
<android.net.Uri: void writeToParcel(android.os.Parcel,android.net.Uri)>
<android.net.Uri: java.lang.String encode(java.lang.String)>
<android.net.Uri: java.lang.String encode(java.lang.String,java.lang.String)>
<android.net.Uri: java.lang.String decode(java.lang.String)>
<android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>
<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>
<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>
<android.graphics.drawable.Drawable: void copyBounds(android.graphics.Rect)>
<android.graphics.drawable.Drawable: android.graphics.Rect copyBounds()>
<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>
<android.graphics.drawable.Drawable: void setChangingConfigurations(int)>
<android.graphics.drawable.Drawable: int getChangingConfigurations()>
<android.graphics.drawable.Drawable: void setDither(boolean)>
<android.graphics.drawable.Drawable: void setFilterBitmap(boolean)>
<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()>
<android.graphics.drawable.Drawable: void invalidateSelf()>
<android.graphics.drawable.Drawable: void scheduleSelf(java.lang.Runnable,long)>
<android.graphics.drawable.Drawable: void unscheduleSelf(java.lang.Runnable)>
<android.graphics.drawable.Drawable: void setColorFilter(int,android.graphics.PorterDuff$Mode)>
<android.graphics.drawable.Drawable: void clearColorFilter()>
<android.graphics.drawable.Drawable: boolean isStateful()>
<android.graphics.drawable.Drawable: boolean setState(int[])>
<android.graphics.drawable.Drawable: int[] getState()>
<android.graphics.drawable.Drawable: void jumpToCurrentState()>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()>
<android.graphics.drawable.Drawable: boolean setLevel(int)>
<android.graphics.drawable.Drawable: int getLevel()>
<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>
<android.graphics.drawable.Drawable: boolean isVisible()>
<android.graphics.drawable.Drawable: int resolveOpacity(int,int)>
<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()>
<android.graphics.drawable.Drawable: boolean onStateChange(int[])>
<android.graphics.drawable.Drawable: boolean onLevelChange(int)>
<android.graphics.drawable.Drawable: void onBoundsChange(android.graphics.Rect)>
<android.graphics.drawable.Drawable: int getIntrinsicWidth()>
<android.graphics.drawable.Drawable: int getIntrinsicHeight()>
<android.graphics.drawable.Drawable: int getMinimumWidth()>
<android.graphics.drawable.Drawable: int getMinimumHeight()>
<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromStream(java.io.InputStream,java.lang.String)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String,android.graphics.BitmapFactory$Options)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromPath(java.lang.String)>
<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)>
<android.view.LayoutInflater: android.content.Context getContext()>
<android.view.LayoutInflater: android.view.LayoutInflater$Factory getFactory()>
<android.view.LayoutInflater: android.view.LayoutInflater$Factory2 getFactory2()>
<android.view.LayoutInflater: void setFactory(android.view.LayoutInflater$Factory)>
<android.view.LayoutInflater: void setFactory2(android.view.LayoutInflater$Factory2)>
<android.view.LayoutInflater: android.view.LayoutInflater$Filter getFilter()>
<android.view.LayoutInflater: void setFilter(android.view.LayoutInflater$Filter)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>
<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup,boolean)>
<android.view.LayoutInflater: android.view.View createView(java.lang.String,java.lang.String,android.util.AttributeSet)>
<android.view.LayoutInflater: android.view.View onCreateView(java.lang.String,android.util.AttributeSet)>
<android.view.LayoutInflater: android.view.View onCreateView(android.view.View,java.lang.String,android.util.AttributeSet)>
<android.view.MenuInflater: void inflate(int,android.view.Menu)>
<android.content.res.Resources$Theme: void applyStyle(int,boolean)>
<android.content.res.Resources$Theme: void setTo(android.content.res.Resources$Theme)>
<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])>
<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int,int[])>
<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>
<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>
<android.content.res.Resources$Theme: void dump(int,java.lang.String,java.lang.String)>
<android.content.res.Resources$Theme: void finalize()>
<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler)>
<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler,java.lang.String)>
<android.content.IntentSender: java.lang.String getTargetPackage()>
<android.content.IntentSender: boolean equals(java.lang.Object)>
<android.content.IntentSender: int hashCode()>
<android.content.IntentSender: java.lang.String toString()>
<android.content.IntentSender: int describeContents()>
<android.content.IntentSender: void writeToParcel(android.os.Parcel,int)>
<android.content.IntentSender: void writeIntentSenderOrNullToParcel(android.content.IntentSender,android.os.Parcel)>
<android.content.IntentSender: android.content.IntentSender readIntentSenderOrNullFromParcel(android.os.Parcel)>
<android.content.ComponentName: android.content.ComponentName clone()>
<android.content.ComponentName: java.lang.String getPackageName()>
<android.content.ComponentName: java.lang.String getClassName()>
<android.content.ComponentName: java.lang.String getShortClassName()>
<android.content.ComponentName: java.lang.String flattenToString()>
<android.content.ComponentName: java.lang.String flattenToShortString()>
<android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>
<android.content.ComponentName: java.lang.String toShortString()>
<android.content.ComponentName: java.lang.String toString()>
<android.content.ComponentName: boolean equals(java.lang.Object)>
<android.content.ComponentName: int hashCode()>
<android.content.ComponentName: int compareTo(android.content.ComponentName)>
<android.content.ComponentName: int describeContents()>
<android.content.ComponentName: void writeToParcel(android.os.Parcel,int)>
<android.content.ComponentName: void writeToParcel(android.content.ComponentName,android.os.Parcel)>
<android.content.ComponentName: android.content.ComponentName readFromParcel(android.os.Parcel)>
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int,android.os.Bundle)>
<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int)>
<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int,android.os.Bundle)>
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>
<android.app.PendingIntent: android.app.PendingIntent getService(android.content.Context,int,android.content.Intent,int)>
<android.app.PendingIntent: android.content.IntentSender getIntentSender()>
<android.app.PendingIntent: void cancel()>
<android.app.PendingIntent: void send()>
<android.app.PendingIntent: void send(int)>
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)>
<android.app.PendingIntent: void send(int,android.app.PendingIntent$OnFinished,android.os.Handler)>
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler)>
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler,java.lang.String)>
<android.app.PendingIntent: java.lang.String getTargetPackage()>
<android.app.PendingIntent: boolean equals(java.lang.Object)>
<android.app.PendingIntent: int hashCode()>
<android.app.PendingIntent: java.lang.String toString()>
<android.app.PendingIntent: int describeContents()>
<android.app.PendingIntent: void writeToParcel(android.os.Parcel,int)>
<android.app.PendingIntent: void writePendingIntentOrNullToParcel(android.app.PendingIntent,android.os.Parcel)>
<android.app.PendingIntent: android.app.PendingIntent readPendingIntentOrNullFromParcel(android.os.Parcel)>
<android.content.Context: void registerComponentCallbacks(android.content.ComponentCallbacks)>
<android.content.Context: void unregisterComponentCallbacks(android.content.ComponentCallbacks)>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int,int[])>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>
<android.content.Context: boolean isRestricted()>
<java.io.FileDescriptor: void sync()>
<java.io.FileDescriptor: boolean valid()>
<java.io.FileDescriptor: java.lang.String toString()>
<android.view.ActionMode: void setTag(java.lang.Object)>
<android.view.ActionMode: java.lang.Object getTag()>
<android.view.ActionMode: void setTitleOptionalHint(boolean)>
<android.view.ActionMode: boolean getTitleOptionalHint()>
<android.view.ActionMode: boolean isTitleOptional()>
<android.content.ContextWrapper: void attachBaseContext(android.content.Context)>
<android.content.ContextWrapper: android.content.Context getBaseContext()>
<android.content.ContextWrapper: android.content.res.AssetManager getAssets()>
<android.content.ContextWrapper: android.content.res.Resources getResources()>
<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>
<android.content.ContextWrapper: android.os.Looper getMainLooper()>
<android.content.ContextWrapper: void setTheme(int)>
<android.content.ContextWrapper: android.content.res.Resources$Theme getTheme()>
<android.content.ContextWrapper: java.lang.ClassLoader getClassLoader()>
<android.content.ContextWrapper: java.lang.String getPackageName()>
<android.content.ContextWrapper: android.content.pm.ApplicationInfo getApplicationInfo()>
<android.content.ContextWrapper: java.lang.String getPackageResourcePath()>
<android.content.ContextWrapper: java.lang.String getPackageCodePath()>
<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>
<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>
<android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)>
<android.content.ContextWrapper: boolean deleteFile(java.lang.String)>
<android.content.ContextWrapper: java.io.File getFileStreamPath(java.lang.String)>
<android.content.ContextWrapper: java.lang.String[] fileList()>
<android.content.ContextWrapper: java.io.File getFilesDir()>
<android.content.ContextWrapper: java.io.File getExternalFilesDir(java.lang.String)>
<android.content.ContextWrapper: java.io.File getObbDir()>
<android.content.ContextWrapper: java.io.File getCacheDir()>
<android.content.ContextWrapper: java.io.File getExternalCacheDir()>
<android.content.ContextWrapper: java.io.File getDir(java.lang.String,int)>
<android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)>
<android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>
<android.content.ContextWrapper: boolean deleteDatabase(java.lang.String)>
<android.content.ContextWrapper: java.io.File getDatabasePath(java.lang.String)>
<android.content.ContextWrapper: java.lang.String[] databaseList()>
<android.content.ContextWrapper: android.graphics.drawable.Drawable getWallpaper()>
<android.content.ContextWrapper: android.graphics.drawable.Drawable peekWallpaper()>
<android.content.ContextWrapper: int getWallpaperDesiredMinimumWidth()>
<android.content.ContextWrapper: int getWallpaperDesiredMinimumHeight()>
<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)>
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)>
<android.content.ContextWrapper: void clearWallpaper()>
<android.content.ContextWrapper: void startActivity(android.content.Intent)>
<android.content.ContextWrapper: void startActivity(android.content.Intent,android.os.Bundle)>
<android.content.ContextWrapper: void startActivities(android.content.Intent[])>
<android.content.ContextWrapper: void startActivities(android.content.Intent[],android.os.Bundle)>
<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>
<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)>
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent)>
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String)>
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)>
<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: void removeStickyBroadcast(android.content.Intent)>
<android.content.ContextWrapper: void unregisterReceiver(android.content.BroadcastReceiver)>
<android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>
<android.content.ContextWrapper: boolean stopService(android.content.Intent)>
<android.content.ContextWrapper: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>
<android.content.ContextWrapper: void unbindService(android.content.ServiceConnection)>
<android.content.ContextWrapper: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>
<android.content.ContextWrapper: int checkPermission(java.lang.String,int,int)>
<android.content.ContextWrapper: int checkCallingPermission(java.lang.String)>
<android.content.ContextWrapper: int checkCallingOrSelfPermission(java.lang.String)>
<android.content.ContextWrapper: void enforcePermission(java.lang.String,int,int,java.lang.String)>
<android.content.ContextWrapper: void enforceCallingPermission(java.lang.String,java.lang.String)>
<android.content.ContextWrapper: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>
<android.content.ContextWrapper: void grantUriPermission(java.lang.String,android.net.Uri,int)>
<android.content.ContextWrapper: void revokeUriPermission(android.net.Uri,int)>
<android.content.ContextWrapper: int checkUriPermission(android.net.Uri,int,int,int)>
<android.content.ContextWrapper: int checkCallingUriPermission(android.net.Uri,int)>
<android.content.ContextWrapper: int checkCallingOrSelfUriPermission(android.net.Uri,int)>
<android.content.ContextWrapper: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>
<android.content.ContextWrapper: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)>
<android.content.ContextWrapper: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)>
<android.content.ContextWrapper: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)>
<android.content.ContextWrapper: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)>
<android.content.ContextWrapper: android.content.Context createPackageContext(java.lang.String,int)>
<android.content.ContextWrapper: boolean isRestricted()>
<android.content.ContentResolver: java.lang.String getType(android.net.Uri)>
<android.content.ContentResolver: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>
<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri)>
<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri,java.lang.String)>
<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)>
<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String)>
<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)>
<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.content.ContentResolver: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)>
<android.content.ContentResolver: int bulkInsert(android.net.Uri,android.content.ContentValues[])>
<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.content.ContentResolver: android.os.Bundle call(android.net.Uri,java.lang.String,java.lang.String,android.os.Bundle)>
<android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(android.net.Uri)>
<android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(java.lang.String)>
<android.content.ContentResolver: android.content.ContentProviderClient acquireUnstableContentProviderClient(android.net.Uri)>
<android.content.ContentResolver: android.content.ContentProviderClient acquireUnstableContentProviderClient(java.lang.String)>
<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>
<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>
<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)>
<android.content.ContentResolver: void startSync(android.net.Uri,android.os.Bundle)>
<android.content.ContentResolver: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.content.ContentResolver: void validateSyncExtrasBundle(android.os.Bundle)>
<android.content.ContentResolver: void cancelSync(android.net.Uri)>
<android.content.ContentResolver: void cancelSync(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: android.content.SyncAdapterType[] getSyncAdapterTypes()>
<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>
<android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>
<android.content.ContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>
<android.content.ContentResolver: boolean getMasterSyncAutomatically()>
<android.content.ContentResolver: void setMasterSyncAutomatically(boolean)>
<android.content.ContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()>
<android.content.ContentResolver: java.util.List getCurrentSyncs()>
<android.content.ContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: java.lang.Object addStatusChangeListener(int,android.content.SyncStatusObserver)>
<android.content.ContentResolver: void removeStatusChangeListener(java.lang.Object)>
<android.content.ClipData: android.content.ClipData newPlainText(java.lang.CharSequence,java.lang.CharSequence)>
<android.content.ClipData: android.content.ClipData newHtmlText(java.lang.CharSequence,java.lang.CharSequence,java.lang.String)>
<android.content.ClipData: android.content.ClipData newIntent(java.lang.CharSequence,android.content.Intent)>
<android.content.ClipData: android.content.ClipData newUri(android.content.ContentResolver,java.lang.CharSequence,android.net.Uri)>
<android.content.ClipData: android.content.ClipData newRawUri(java.lang.CharSequence,android.net.Uri)>
<android.content.ClipData: android.content.ClipDescription getDescription()>
<android.content.ClipData: void addItem(android.content.ClipData$Item)>
<android.content.ClipData: int getItemCount()>
<android.content.ClipData: android.content.ClipData$Item getItemAt(int)>
<android.content.ClipData: java.lang.String toString()>
<android.content.ClipData: int describeContents()>
<android.content.ClipData: void writeToParcel(android.os.Parcel,int)>
<java.util.ArrayList: boolean addAll(java.util.Collection)>
<java.util.ArrayList: boolean addAll(int,java.util.Collection)>
<java.util.ArrayList: void clear()>
<java.util.ArrayList: java.lang.Object clone()>
<java.util.ArrayList: void ensureCapacity(int)>
<java.util.ArrayList: int size()>
<java.util.ArrayList: boolean isEmpty()>
<java.util.ArrayList: boolean contains(java.lang.Object)>
<java.util.ArrayList: int indexOf(java.lang.Object)>
<java.util.ArrayList: int lastIndexOf(java.lang.Object)>
<java.util.ArrayList: boolean remove(java.lang.Object)>
<java.util.ArrayList: void removeRange(int,int)>
<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>
<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.ArrayList: void trimToSize()>
<java.util.ArrayList: int hashCode()>
<java.util.ArrayList: boolean equals(java.lang.Object)>
<android.graphics.Rect: boolean equals(java.lang.Object)>
<android.graphics.Rect: int hashCode()>
<android.graphics.Rect: java.lang.String toString()>
<android.graphics.Rect: java.lang.String toShortString()>
<android.graphics.Rect: java.lang.String flattenToString()>
<android.graphics.Rect: android.graphics.Rect unflattenFromString(java.lang.String)>
<android.graphics.Rect: boolean isEmpty()>
<android.graphics.Rect: int width()>
<android.graphics.Rect: int height()>
<android.graphics.Rect: int centerX()>
<android.graphics.Rect: int centerY()>
<android.graphics.Rect: float exactCenterX()>
<android.graphics.Rect: float exactCenterY()>
<android.graphics.Rect: void setEmpty()>
<android.graphics.Rect: void set(int,int,int,int)>
<android.graphics.Rect: void set(android.graphics.Rect)>
<android.graphics.Rect: void offset(int,int)>
<android.graphics.Rect: void offsetTo(int,int)>
<android.graphics.Rect: void inset(int,int)>
<android.graphics.Rect: boolean contains(int,int)>
<android.graphics.Rect: boolean contains(int,int,int,int)>
<android.graphics.Rect: boolean contains(android.graphics.Rect)>
<android.graphics.Rect: boolean intersect(int,int,int,int)>
<android.graphics.Rect: boolean intersect(android.graphics.Rect)>
<android.graphics.Rect: boolean setIntersect(android.graphics.Rect,android.graphics.Rect)>
<android.graphics.Rect: boolean intersects(int,int,int,int)>
<android.graphics.Rect: boolean intersects(android.graphics.Rect,android.graphics.Rect)>
<android.graphics.Rect: void union(int,int,int,int)>
<android.graphics.Rect: void union(android.graphics.Rect)>
<android.graphics.Rect: void union(int,int)>
<android.graphics.Rect: void sort()>
<android.graphics.Rect: int describeContents()>
<android.graphics.Rect: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Rect: void readFromParcel(android.os.Parcel)>
<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,int)>
<android.content.pm.ActivityInfo: int getThemeResource()>
<android.content.pm.ActivityInfo: void dump(android.util.Printer,java.lang.String)>
<android.content.pm.ActivityInfo: java.lang.String toString()>
<android.content.pm.ActivityInfo: int describeContents()>
<android.content.pm.ActivityInfo: void writeToParcel(android.os.Parcel,int)>
<android.os.Parcel: android.os.Parcel obtain()>
<android.os.Parcel: void recycle()>
<android.os.Parcel: int dataSize()>
<android.os.Parcel: int dataAvail()>
<android.os.Parcel: int dataPosition()>
<android.os.Parcel: int dataCapacity()>
<android.os.Parcel: void setDataSize(int)>
<android.os.Parcel: void setDataPosition(int)>
<android.os.Parcel: void setDataCapacity(int)>
<android.os.Parcel: byte[] marshall()>
<android.os.Parcel: void unmarshall(byte[],int,int)>
<android.os.Parcel: void appendFrom(android.os.Parcel,int,int)>
<android.os.Parcel: boolean hasFileDescriptors()>
<android.os.Parcel: void writeInterfaceToken(java.lang.String)>
<android.os.Parcel: void enforceInterface(java.lang.String)>
<android.os.Parcel: void writeByteArray(byte[])>
<android.os.Parcel: void writeByteArray(byte[],int,int)>
<android.os.Parcel: void writeInt(int)>
<android.os.Parcel: void writeLong(long)>
<android.os.Parcel: void writeFloat(float)>
<android.os.Parcel: void writeDouble(double)>
<android.os.Parcel: void writeString(java.lang.String)>
<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>
<android.os.Parcel: void writeStrongInterface(android.os.IInterface)>
<android.os.Parcel: void writeFileDescriptor(java.io.FileDescriptor)>
<android.os.Parcel: void writeByte(byte)>
<android.os.Parcel: void writeMap(java.util.Map)>
<android.os.Parcel: void writeBundle(android.os.Bundle)>
<android.os.Parcel: void writeList(java.util.List)>
<android.os.Parcel: void writeArray(java.lang.Object[])>
<android.os.Parcel: void writeSparseArray(android.util.SparseArray)>
<android.os.Parcel: void writeSparseBooleanArray(android.util.SparseBooleanArray)>
<android.os.Parcel: void writeBooleanArray(boolean[])>
<android.os.Parcel: boolean[] createBooleanArray()>
<android.os.Parcel: void readBooleanArray(boolean[])>
<android.os.Parcel: void writeCharArray(char[])>
<android.os.Parcel: char[] createCharArray()>
<android.os.Parcel: void readCharArray(char[])>
<android.os.Parcel: void writeIntArray(int[])>
<android.os.Parcel: int[] createIntArray()>
<android.os.Parcel: void readIntArray(int[])>
<android.os.Parcel: void writeLongArray(long[])>
<android.os.Parcel: long[] createLongArray()>
<android.os.Parcel: void readLongArray(long[])>
<android.os.Parcel: void writeFloatArray(float[])>
<android.os.Parcel: float[] createFloatArray()>
<android.os.Parcel: void readFloatArray(float[])>
<android.os.Parcel: void writeDoubleArray(double[])>
<android.os.Parcel: double[] createDoubleArray()>
<android.os.Parcel: void readDoubleArray(double[])>
<android.os.Parcel: void writeStringArray(java.lang.String[])>
<android.os.Parcel: java.lang.String[] createStringArray()>
<android.os.Parcel: void readStringArray(java.lang.String[])>
<android.os.Parcel: void writeBinderArray(android.os.IBinder[])>
<android.os.Parcel: android.os.IBinder[] createBinderArray()>
<android.os.Parcel: void readBinderArray(android.os.IBinder[])>
<android.os.Parcel: void writeTypedList(java.util.List)>
<android.os.Parcel: void writeStringList(java.util.List)>
<android.os.Parcel: void writeBinderList(java.util.List)>
<android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)>
<android.os.Parcel: void writeValue(java.lang.Object)>
<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>
<android.os.Parcel: void writeSerializable(java.io.Serializable)>
<android.os.Parcel: void writeException(java.lang.Exception)>
<android.os.Parcel: void writeNoException()>
<android.os.Parcel: void readException()>
<android.os.Parcel: void readException(int,java.lang.String)>
<android.os.Parcel: int readInt()>
<android.os.Parcel: long readLong()>
<android.os.Parcel: float readFloat()>
<android.os.Parcel: double readDouble()>
<android.os.Parcel: java.lang.String readString()>
<android.os.Parcel: android.os.IBinder readStrongBinder()>
<android.os.Parcel: android.os.ParcelFileDescriptor readFileDescriptor()>
<android.os.Parcel: byte readByte()>
<android.os.Parcel: void readMap(java.util.Map,java.lang.ClassLoader)>
<android.os.Parcel: void readList(java.util.List,java.lang.ClassLoader)>
<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader)>
<android.os.Parcel: android.os.Bundle readBundle()>
<android.os.Parcel: android.os.Bundle readBundle(java.lang.ClassLoader)>
<android.os.Parcel: byte[] createByteArray()>
<android.os.Parcel: void readByteArray(byte[])>
<android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader)>
<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader)>
<android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader)>
<android.os.Parcel: android.util.SparseBooleanArray readSparseBooleanArray()>
<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)>
<android.os.Parcel: void readTypedList(java.util.List,android.os.Parcelable$Creator)>
<android.os.Parcel: java.util.ArrayList createStringArrayList()>
<android.os.Parcel: java.util.ArrayList createBinderArrayList()>
<android.os.Parcel: void readStringList(java.util.List)>
<android.os.Parcel: void readBinderList(java.util.List)>
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>
<android.os.Parcel: void readTypedArray(java.lang.Object[],android.os.Parcelable$Creator)>
<android.os.Parcel: void writeParcelableArray(android.os.Parcelable[],int)>
<android.os.Parcel: java.lang.Object readValue(java.lang.ClassLoader)>
<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)>
<android.os.Parcel: android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader)>
<android.os.Parcel: java.io.Serializable readSerializable()>
<android.os.Parcel: android.os.Parcel obtain(int)>
<android.os.Parcel: void finalize()>
<android.content.res.Resources: android.content.res.Resources getSystem()>
<android.content.res.Resources: java.lang.CharSequence getText(int)>
<android.content.res.Resources: java.lang.CharSequence getQuantityText(int,int)>
<android.content.res.Resources: java.lang.String getString(int)>
<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>
<android.content.res.Resources: java.lang.String getQuantityString(int,int,java.lang.Object[])>
<android.content.res.Resources: java.lang.String getQuantityString(int,int)>
<android.content.res.Resources: java.lang.CharSequence getText(int,java.lang.CharSequence)>
<android.content.res.Resources: java.lang.CharSequence[] getTextArray(int)>
<android.content.res.Resources: java.lang.String[] getStringArray(int)>
<android.content.res.Resources: int[] getIntArray(int)>
<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)>
<android.content.res.Resources: float getDimension(int)>
<android.content.res.Resources: int getDimensionPixelOffset(int)>
<android.content.res.Resources: int getDimensionPixelSize(int)>
<android.content.res.Resources: float getFraction(int,int,int)>
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int)>
<android.content.res.Resources: android.graphics.Movie getMovie(int)>
<android.content.res.Resources: int getColor(int)>
<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int)>
<android.content.res.Resources: boolean getBoolean(int)>
<android.content.res.Resources: int getInteger(int)>
<android.content.res.Resources: android.content.res.XmlResourceParser getLayout(int)>
<android.content.res.Resources: android.content.res.XmlResourceParser getAnimation(int)>
<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>
<android.content.res.Resources: java.io.InputStream openRawResource(int)>
<android.content.res.Resources: java.io.InputStream openRawResource(int,android.util.TypedValue)>
<android.content.res.Resources: android.content.res.AssetFileDescriptor openRawResourceFd(int)>
<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>
<android.content.res.Resources: void getValueForDensity(int,int,android.util.TypedValue,boolean)>
<android.content.res.Resources: void getValue(java.lang.String,android.util.TypedValue,boolean)>
<android.content.res.Resources: android.content.res.Resources$Theme newTheme()>
<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>
<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>
<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>
<android.content.res.Resources: android.content.res.Configuration getConfiguration()>
<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>
<android.content.res.Resources: java.lang.String getResourceName(int)>
<android.content.res.Resources: java.lang.String getResourcePackageName(int)>
<android.content.res.Resources: java.lang.String getResourceTypeName(int)>
<android.content.res.Resources: java.lang.String getResourceEntryName(int)>
<android.content.res.Resources: void parseBundleExtras(android.content.res.XmlResourceParser,android.os.Bundle)>
<android.content.res.Resources: void parseBundleExtra(java.lang.String,android.util.AttributeSet,android.os.Bundle)>
<android.content.res.Resources: android.content.res.AssetManager getAssets()>
<android.content.res.Resources: void flushLayoutCache()>
<android.content.res.Resources: void finishPreloading()>
<org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()>
<org.xmlpull.v1.XmlPullParserException: int getLineNumber()>
<org.xmlpull.v1.XmlPullParserException: int getColumnNumber()>
<org.xmlpull.v1.XmlPullParserException: void printStackTrace()>
<android.view.Display: int getDisplayId()>
<android.view.Display: void getSize(android.graphics.Point)>
<android.view.Display: void getRectSize(android.graphics.Rect)>
<android.view.Display: void getCurrentSizeRange(android.graphics.Point,android.graphics.Point)>
<android.view.Display: int getWidth()>
<android.view.Display: int getHeight()>
<android.view.Display: int getRotation()>
<android.view.Display: int getPixelFormat()>
<android.view.Display: float getRefreshRate()>
<android.view.Display: void getMetrics(android.util.DisplayMetrics)>
<android.content.res.TypedArray: int length()>
<android.content.res.TypedArray: int getIndexCount()>
<android.content.res.TypedArray: int getIndex(int)>
<android.content.res.TypedArray: android.content.res.Resources getResources()>
<android.content.res.TypedArray: java.lang.CharSequence getText(int)>
<android.content.res.TypedArray: java.lang.String getString(int)>
<android.content.res.TypedArray: java.lang.String getNonResourceString(int)>
<android.content.res.TypedArray: boolean getBoolean(int,boolean)>
<android.content.res.TypedArray: int getInt(int,int)>
<android.content.res.TypedArray: float getFloat(int,float)>
<android.content.res.TypedArray: int getColor(int,int)>
<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>
<android.content.res.TypedArray: int getInteger(int,int)>
<android.content.res.TypedArray: float getDimension(int,float)>
<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>
<android.content.res.TypedArray: int getLayoutDimension(int,java.lang.String)>
<android.content.res.TypedArray: int getLayoutDimension(int,int)>
<android.content.res.TypedArray: float getFraction(int,int,int,float)>
<android.content.res.TypedArray: int getResourceId(int,int)>
<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>
<android.content.res.TypedArray: java.lang.CharSequence[] getTextArray(int)>
<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>
<android.content.res.TypedArray: boolean hasValue(int)>
<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>
<android.content.res.TypedArray: java.lang.String getPositionDescription()>
<android.content.res.TypedArray: void recycle()>
<android.content.res.TypedArray: java.lang.String toString()>
<android.content.Loader: void deliverResult(java.lang.Object)>
<android.content.Loader: void deliverCancellation()>
<android.content.Loader: android.content.Context getContext()>
<android.content.Loader: int getId()>
<android.content.Loader: void registerListener(int,android.content.Loader$OnLoadCompleteListener)>
<android.content.Loader: void unregisterListener(android.content.Loader$OnLoadCompleteListener)>
<android.content.Loader: void registerOnLoadCanceledListener(android.content.Loader$OnLoadCanceledListener)>
<android.content.Loader: void unregisterOnLoadCanceledListener(android.content.Loader$OnLoadCanceledListener)>
<android.content.Loader: boolean isStarted()>
<android.content.Loader: boolean isAbandoned()>
<android.content.Loader: boolean isReset()>
<android.content.Loader: void startLoading()>
<android.content.Loader: void onStartLoading()>
<android.content.Loader: boolean cancelLoad()>
<android.content.Loader: boolean onCancelLoad()>
<android.content.Loader: void forceLoad()>
<android.content.Loader: void onForceLoad()>
<android.content.Loader: void stopLoading()>
<android.content.Loader: void onStopLoading()>
<android.content.Loader: void abandon()>
<android.content.Loader: void onAbandon()>
<android.content.Loader: void reset()>
<android.content.Loader: void onReset()>
<android.content.Loader: boolean takeContentChanged()>
<android.content.Loader: void onContentChanged()>
<android.content.Loader: java.lang.String dataToString(java.lang.Object)>
<android.content.Loader: java.lang.String toString()>
<android.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.util.Property: android.util.Property of(java.lang.Class,java.lang.Class,java.lang.String)>
<android.util.Property: boolean isReadOnly()>
<android.util.Property: void set(java.lang.Object,java.lang.Object)>
<android.util.Property: java.lang.String getName()>
<android.util.Property: java.lang.Class getType()>
<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo findFocus(int)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo focusSearch(int)>
<android.view.accessibility.AccessibilityNodeInfo: int getWindowId()>
<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)>
<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: int getActions()>
<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setMovementGranularities(int)>
<android.view.accessibility.AccessibilityNodeInfo: int getMovementGranularities()>
<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int)>
<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int,android.os.Bundle)>
<android.view.accessibility.AccessibilityNodeInfo: java.util.List findAccessibilityNodeInfosByText(java.lang.String)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent()>
<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInParent(android.graphics.Rect)>
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(android.graphics.Rect)>
<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInScreen(android.graphics.Rect)>
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInScreen(android.graphics.Rect)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isCheckable()>
<android.view.accessibility.AccessibilityNodeInfo: void setCheckable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isChecked()>
<android.view.accessibility.AccessibilityNodeInfo: void setChecked(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isFocusable()>
<android.view.accessibility.AccessibilityNodeInfo: void setFocusable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()>
<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isVisibleToUser()>
<android.view.accessibility.AccessibilityNodeInfo: void setVisibleToUser(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isAccessibilityFocused()>
<android.view.accessibility.AccessibilityNodeInfo: void setAccessibilityFocused(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isSelected()>
<android.view.accessibility.AccessibilityNodeInfo: void setSelected(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()>
<android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isLongClickable()>
<android.view.accessibility.AccessibilityNodeInfo: void setLongClickable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()>
<android.view.accessibility.AccessibilityNodeInfo: void setEnabled(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isPassword()>
<android.view.accessibility.AccessibilityNodeInfo: void setPassword(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isScrollable()>
<android.view.accessibility.AccessibilityNodeInfo: void setScrollable(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()>
<android.view.accessibility.AccessibilityNodeInfo: void setPackageName(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()>
<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>
<android.view.accessibility.AccessibilityNodeInfo: void setText(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>
<android.view.accessibility.AccessibilityNodeInfo: void setContentDescription(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityNodeInfo: int describeContents()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View,int)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.accessibility.AccessibilityNodeInfo)>
<android.view.accessibility.AccessibilityNodeInfo: void recycle()>
<android.view.accessibility.AccessibilityNodeInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.accessibility.AccessibilityNodeInfo: boolean equals(java.lang.Object)>
<android.view.accessibility.AccessibilityNodeInfo: int hashCode()>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String toString()>
<android.view.View$AccessibilityDelegate: void sendAccessibilityEvent(android.view.View,int)>
<android.view.View$AccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>
<android.view.View$AccessibilityDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.View$AccessibilityDelegate: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.View$AccessibilityDelegate: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>
<android.view.View$AccessibilityDelegate: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.View$AccessibilityDelegate: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View)>
<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>
<android.view.accessibility.AccessibilityNodeProvider: boolean performAction(int,int,android.os.Bundle)>
<android.view.accessibility.AccessibilityNodeProvider: java.util.List findAccessibilityNodeInfosByText(java.lang.String,int)>
<android.view.KeyEvent$DispatcherState: void reset()>
<android.view.KeyEvent$DispatcherState: void reset(java.lang.Object)>
<android.view.KeyEvent$DispatcherState: void startTracking(android.view.KeyEvent,java.lang.Object)>
<android.view.KeyEvent$DispatcherState: boolean isTracking(android.view.KeyEvent)>
<android.view.KeyEvent$DispatcherState: void performedLongPress(android.view.KeyEvent)>
<android.view.KeyEvent$DispatcherState: void handleUpEvent(android.view.KeyEvent)>
<android.view.inputmethod.EditorInfo: void makeCompatible(int)>
<android.view.inputmethod.EditorInfo: void dump(android.util.Printer,java.lang.String)>
<android.view.inputmethod.EditorInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.EditorInfo: int describeContents()>
<android.view.TouchDelegate: boolean onTouchEvent(android.view.MotionEvent)>
<android.graphics.Matrix: boolean isIdentity()>
<android.graphics.Matrix: boolean rectStaysRect()>
<android.graphics.Matrix: void set(android.graphics.Matrix)>
<android.graphics.Matrix: boolean equals(java.lang.Object)>
<android.graphics.Matrix: void reset()>
<android.graphics.Matrix: void setTranslate(float,float)>
<android.graphics.Matrix: void setScale(float,float,float,float)>
<android.graphics.Matrix: void setScale(float,float)>
<android.graphics.Matrix: void setRotate(float,float,float)>
<android.graphics.Matrix: void setRotate(float)>
<android.graphics.Matrix: void setSinCos(float,float,float,float)>
<android.graphics.Matrix: void setSinCos(float,float)>
<android.graphics.Matrix: void setSkew(float,float,float,float)>
<android.graphics.Matrix: void setSkew(float,float)>
<android.graphics.Matrix: boolean setConcat(android.graphics.Matrix,android.graphics.Matrix)>
<android.graphics.Matrix: boolean preTranslate(float,float)>
<android.graphics.Matrix: boolean preScale(float,float,float,float)>
<android.graphics.Matrix: boolean preScale(float,float)>
<android.graphics.Matrix: boolean preRotate(float,float,float)>
<android.graphics.Matrix: boolean preRotate(float)>
<android.graphics.Matrix: boolean preSkew(float,float,float,float)>
<android.graphics.Matrix: boolean preSkew(float,float)>
<android.graphics.Matrix: boolean preConcat(android.graphics.Matrix)>
<android.graphics.Matrix: boolean postTranslate(float,float)>
<android.graphics.Matrix: boolean postScale(float,float,float,float)>
<android.graphics.Matrix: boolean postScale(float,float)>
<android.graphics.Matrix: boolean postRotate(float,float,float)>
<android.graphics.Matrix: boolean postRotate(float)>
<android.graphics.Matrix: boolean postSkew(float,float,float,float)>
<android.graphics.Matrix: boolean postSkew(float,float)>
<android.graphics.Matrix: boolean postConcat(android.graphics.Matrix)>
<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)>
<android.graphics.Matrix: boolean setPolyToPoly(float[],int,float[],int,int)>
<android.graphics.Matrix: boolean invert(android.graphics.Matrix)>
<android.graphics.Matrix: void mapPoints(float[],int,float[],int,int)>
<android.graphics.Matrix: void mapVectors(float[],int,float[],int,int)>
<android.graphics.Matrix: void mapPoints(float[],float[])>
<android.graphics.Matrix: void mapVectors(float[],float[])>
<android.graphics.Matrix: void mapPoints(float[])>
<android.graphics.Matrix: void mapVectors(float[])>
<android.graphics.Matrix: boolean mapRect(android.graphics.RectF,android.graphics.RectF)>
<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>
<android.graphics.Matrix: float mapRadius(float)>
<android.graphics.Matrix: void getValues(float[])>
<android.graphics.Matrix: void setValues(float[])>
<android.graphics.Matrix: java.lang.String toString()>
<android.graphics.Matrix: java.lang.String toShortString()>
<android.graphics.Matrix: void finalize()>
<android.graphics.Point: void set(int,int)>
<android.graphics.Point: void negate()>
<android.graphics.Point: void offset(int,int)>
<android.graphics.Point: boolean equals(int,int)>
<android.graphics.Point: boolean equals(java.lang.Object)>
<android.graphics.Point: int hashCode()>
<android.graphics.Point: java.lang.String toString()>
<android.graphics.Point: int describeContents()>
<android.graphics.Point: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Point: void readFromParcel(android.os.Parcel)>
<android.os.Handler: void handleMessage(android.os.Message)>
<android.os.Handler: void dispatchMessage(android.os.Message)>
<android.os.Handler: java.lang.String getMessageName(android.os.Message)>
<android.os.Handler: void removeCallbacks(java.lang.Runnable)>
<android.os.Handler: void removeCallbacks(java.lang.Runnable,java.lang.Object)>
<android.os.Handler: void removeMessages(int)>
<android.os.Handler: void removeMessages(int,java.lang.Object)>
<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>
<android.os.Handler: boolean hasMessages(int)>
<android.os.Handler: boolean hasMessages(int,java.lang.Object)>
<android.os.Handler: android.os.Looper getLooper()>
<android.os.Handler: void dump(android.util.Printer,java.lang.String)>
<android.os.Handler: java.lang.String toString()>
<android.util.SparseArray: android.util.SparseArray clone()>
<android.util.SparseArray: java.lang.Object get(int)>
<android.util.SparseArray: java.lang.Object get(int,java.lang.Object)>
<android.util.SparseArray: void delete(int)>
<android.util.SparseArray: void remove(int)>
<android.util.SparseArray: void removeAt(int)>
<android.util.SparseArray: void put(int,java.lang.Object)>
<android.util.SparseArray: int size()>
<android.util.SparseArray: int keyAt(int)>
<android.util.SparseArray: java.lang.Object valueAt(int)>
<android.util.SparseArray: void setValueAt(int,java.lang.Object)>
<android.util.SparseArray: int indexOfKey(int)>
<android.util.SparseArray: int indexOfValue(java.lang.Object)>
<android.util.SparseArray: void clear()>
<android.util.SparseArray: void append(int,java.lang.Object)>
<android.graphics.Paint: void reset()>
<android.graphics.Paint: void set(android.graphics.Paint)>
<android.graphics.Paint: boolean isAntiAlias()>
<android.graphics.Paint: boolean isDither()>
<android.graphics.Paint: boolean isLinearText()>
<android.graphics.Paint: boolean isSubpixelText()>
<android.graphics.Paint: boolean isUnderlineText()>
<android.graphics.Paint: boolean isStrikeThruText()>
<android.graphics.Paint: boolean isFakeBoldText()>
<android.graphics.Paint: boolean isFilterBitmap()>
<android.graphics.Paint: android.graphics.Paint$Style getStyle()>
<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>
<android.graphics.Paint: void setARGB(int,int,int,int)>
<android.graphics.Paint: android.graphics.Paint$Cap getStrokeCap()>
<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)>
<android.graphics.Paint: android.graphics.Paint$Join getStrokeJoin()>
<android.graphics.Paint: void setStrokeJoin(android.graphics.Paint$Join)>
<android.graphics.Paint: boolean getFillPath(android.graphics.Path,android.graphics.Path)>
<android.graphics.Paint: android.graphics.Shader getShader()>
<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>
<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()>
<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>
<android.graphics.Paint: android.graphics.Xfermode getXfermode()>
<android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)>
<android.graphics.Paint: android.graphics.PathEffect getPathEffect()>
<android.graphics.Paint: android.graphics.PathEffect setPathEffect(android.graphics.PathEffect)>
<android.graphics.Paint: android.graphics.MaskFilter getMaskFilter()>
<android.graphics.Paint: android.graphics.MaskFilter setMaskFilter(android.graphics.MaskFilter)>
<android.graphics.Paint: android.graphics.Typeface getTypeface()>
<android.graphics.Paint: android.graphics.Typeface setTypeface(android.graphics.Typeface)>
<android.graphics.Paint: android.graphics.Rasterizer getRasterizer()>
<android.graphics.Paint: android.graphics.Rasterizer setRasterizer(android.graphics.Rasterizer)>
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>
<android.graphics.Paint: void clearShadowLayer()>
<android.graphics.Paint: android.graphics.Paint$Align getTextAlign()>
<android.graphics.Paint: void setTextAlign(android.graphics.Paint$Align)>
<android.graphics.Paint: android.graphics.Paint$FontMetrics getFontMetrics()>
<android.graphics.Paint: android.graphics.Paint$FontMetricsInt getFontMetricsInt()>
<android.graphics.Paint: float getFontSpacing()>
<android.graphics.Paint: float measureText(char[],int,int)>
<android.graphics.Paint: float measureText(java.lang.String,int,int)>
<android.graphics.Paint: float measureText(java.lang.String)>
<android.graphics.Paint: float measureText(java.lang.CharSequence,int,int)>
<android.graphics.Paint: int breakText(char[],int,int,float,float[])>
<android.graphics.Paint: int breakText(java.lang.CharSequence,int,int,boolean,float,float[])>
<android.graphics.Paint: int breakText(java.lang.String,boolean,float,float[])>
<android.graphics.Paint: int getTextWidths(char[],int,int,float[])>
<android.graphics.Paint: int getTextWidths(java.lang.CharSequence,int,int,float[])>
<android.graphics.Paint: int getTextWidths(java.lang.String,int,int,float[])>
<android.graphics.Paint: int getTextWidths(java.lang.String,float[])>
<android.graphics.Paint: void getTextPath(char[],int,int,float,float,android.graphics.Path)>
<android.graphics.Paint: void getTextPath(java.lang.String,int,int,float,float,android.graphics.Path)>
<android.graphics.Paint: void getTextBounds(java.lang.String,int,int,android.graphics.Rect)>
<android.graphics.Paint: void getTextBounds(char[],int,int,android.graphics.Rect)>
<android.graphics.Paint: void finalize()>
<android.view.ViewTreeObserver: void addOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener)>
<android.view.ViewTreeObserver: void removeOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener)>
<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.view.ViewTreeObserver: void removeGlobalOnLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.view.ViewTreeObserver: void removeOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>
<android.view.ViewTreeObserver: void removeOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>
<android.view.ViewTreeObserver: void addOnDrawListener(android.view.ViewTreeObserver$OnDrawListener)>
<android.view.ViewTreeObserver: void removeOnDrawListener(android.view.ViewTreeObserver$OnDrawListener)>
<android.view.ViewTreeObserver: void addOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)>
<android.view.ViewTreeObserver: void removeOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)>
<android.view.ViewTreeObserver: void addOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>
<android.view.ViewTreeObserver: void removeOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>
<android.view.ViewTreeObserver: boolean isAlive()>
<android.view.ViewTreeObserver: void dispatchOnGlobalLayout()>
<android.view.ViewTreeObserver: boolean dispatchOnPreDraw()>
<android.view.ViewTreeObserver: void dispatchOnDraw()>
<android.view.animation.Animation: android.view.animation.Animation clone()>
<android.view.animation.Animation: void reset()>
<android.view.animation.Animation: void cancel()>
<android.view.animation.Animation: boolean isInitialized()>
<android.view.animation.Animation: void initialize(int,int,int,int)>
<android.view.animation.Animation: void setInterpolator(android.content.Context,int)>
<android.view.animation.Animation: void setInterpolator(android.view.animation.Interpolator)>
<android.view.animation.Animation: void setStartOffset(long)>
<android.view.animation.Animation: void setDuration(long)>
<android.view.animation.Animation: void restrictDuration(long)>
<android.view.animation.Animation: void scaleCurrentDuration(float)>
<android.view.animation.Animation: void setStartTime(long)>
<android.view.animation.Animation: void start()>
<android.view.animation.Animation: void startNow()>
<android.view.animation.Animation: void setRepeatMode(int)>
<android.view.animation.Animation: void setRepeatCount(int)>
<android.view.animation.Animation: boolean isFillEnabled()>
<android.view.animation.Animation: void setFillEnabled(boolean)>
<android.view.animation.Animation: void setFillBefore(boolean)>
<android.view.animation.Animation: void setFillAfter(boolean)>
<android.view.animation.Animation: void setZAdjustment(int)>
<android.view.animation.Animation: void setBackgroundColor(int)>
<android.view.animation.Animation: float getScaleFactor()>
<android.view.animation.Animation: void setDetachWallpaper(boolean)>
<android.view.animation.Animation: android.view.animation.Interpolator getInterpolator()>
<android.view.animation.Animation: long getStartTime()>
<android.view.animation.Animation: long getDuration()>
<android.view.animation.Animation: long getStartOffset()>
<android.view.animation.Animation: int getRepeatMode()>
<android.view.animation.Animation: int getRepeatCount()>
<android.view.animation.Animation: boolean getFillBefore()>
<android.view.animation.Animation: boolean getFillAfter()>
<android.view.animation.Animation: int getZAdjustment()>
<android.view.animation.Animation: int getBackgroundColor()>
<android.view.animation.Animation: boolean getDetachWallpaper()>
<android.view.animation.Animation: boolean willChangeTransformationMatrix()>
<android.view.animation.Animation: boolean willChangeBounds()>
<android.view.animation.Animation: void setAnimationListener(android.view.animation.Animation$AnimationListener)>
<android.view.animation.Animation: void ensureInterpolator()>
<android.view.animation.Animation: long computeDurationHint()>
<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation)>
<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation,float)>
<android.view.animation.Animation: boolean hasStarted()>
<android.view.animation.Animation: boolean hasEnded()>
<android.view.animation.Animation: void applyTransformation(float,android.view.animation.Transformation)>
<android.view.animation.Animation: float resolveSize(int,float,int,int)>
<android.view.animation.Animation: void finalize()>
<android.view.View$DragShadowBuilder: android.view.View getView()>
<android.view.View$DragShadowBuilder: void onProvideShadowMetrics(android.graphics.Point,android.graphics.Point)>
<android.view.View$DragShadowBuilder: void onDrawShadow(android.graphics.Canvas)>
<android.view.DragEvent: int getAction()>
<android.view.DragEvent: float getX()>
<android.view.DragEvent: float getY()>
<android.view.DragEvent: android.content.ClipData getClipData()>
<android.view.DragEvent: android.content.ClipDescription getClipDescription()>
<android.view.DragEvent: java.lang.Object getLocalState()>
<android.view.DragEvent: boolean getResult()>
<android.view.DragEvent: java.lang.String toString()>
<android.view.DragEvent: int describeContents()>
<android.view.DragEvent: void writeToParcel(android.os.Parcel,int)>
<android.view.ViewGroup: int getDescendantFocusability()>
<android.view.ViewGroup: void setDescendantFocusability(int)>
<android.view.ViewGroup: void requestChildFocus(android.view.View,android.view.View)>
<android.view.ViewGroup: void focusableViewAvailable(android.view.View)>
<android.view.ViewGroup: boolean showContextMenuForChild(android.view.View)>
<android.view.ViewGroup: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback)>
<android.view.ViewGroup: android.view.View focusSearch(android.view.View,int)>
<android.view.ViewGroup: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>
<android.view.ViewGroup: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.ViewGroup: boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.view.ViewGroup: boolean dispatchUnhandledMove(android.view.View,int)>
<android.view.ViewGroup: void clearChildFocus(android.view.View)>
<android.view.ViewGroup: void clearFocus()>
<android.view.ViewGroup: android.view.View getFocusedChild()>
<android.view.ViewGroup: boolean hasFocus()>
<android.view.ViewGroup: android.view.View findFocus()>
<android.view.ViewGroup: boolean hasFocusable()>
<android.view.ViewGroup: void addFocusables(java.util.ArrayList,int,int)>
<android.view.ViewGroup: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)>
<android.view.ViewGroup: void dispatchWindowFocusChanged(boolean)>
<android.view.ViewGroup: void addTouchables(java.util.ArrayList)>
<android.view.ViewGroup: void dispatchDisplayHint(int)>
<android.view.ViewGroup: void dispatchVisibilityChanged(android.view.View,int)>
<android.view.ViewGroup: void dispatchWindowVisibilityChanged(int)>
<android.view.ViewGroup: void dispatchConfigurationChanged(android.content.res.Configuration)>
<android.view.ViewGroup: void recomputeViewAttributes(android.view.View)>
<android.view.ViewGroup: void bringChildToFront(android.view.View)>
<android.view.ViewGroup: boolean dispatchDragEvent(android.view.DragEvent)>
<android.view.ViewGroup: void dispatchWindowSystemUiVisiblityChanged(int)>
<android.view.ViewGroup: void dispatchSystemUiVisibilityChanged(int)>
<android.view.ViewGroup: boolean dispatchKeyEventPreIme(android.view.KeyEvent)>
<android.view.ViewGroup: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.view.ViewGroup: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>
<android.view.ViewGroup: boolean dispatchTrackballEvent(android.view.MotionEvent)>
<android.view.ViewGroup: boolean dispatchHoverEvent(android.view.MotionEvent)>
<android.view.ViewGroup: void addChildrenForAccessibility(java.util.ArrayList)>
<android.view.ViewGroup: boolean onInterceptHoverEvent(android.view.MotionEvent)>
<android.view.ViewGroup: boolean dispatchGenericPointerEvent(android.view.MotionEvent)>
<android.view.ViewGroup: boolean dispatchGenericFocusedEvent(android.view.MotionEvent)>
<android.view.ViewGroup: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.view.ViewGroup: void setMotionEventSplittingEnabled(boolean)>
<android.view.ViewGroup: boolean isMotionEventSplittingEnabled()>
<android.view.ViewGroup: void requestDisallowInterceptTouchEvent(boolean)>
<android.view.ViewGroup: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<android.view.ViewGroup: boolean requestFocus(int,android.graphics.Rect)>
<android.view.ViewGroup: boolean onRequestFocusInDescendants(int,android.graphics.Rect)>
<android.view.ViewGroup: void setPadding(int,int,int,int)>
<android.view.ViewGroup: void dispatchSaveInstanceState(android.util.SparseArray)>
<android.view.ViewGroup: void dispatchFreezeSelfOnly(android.util.SparseArray)>
<android.view.ViewGroup: void dispatchRestoreInstanceState(android.util.SparseArray)>
<android.view.ViewGroup: void dispatchThawSelfOnly(android.util.SparseArray)>
<android.view.ViewGroup: void setChildrenDrawingCacheEnabled(boolean)>
<android.view.ViewGroup: void onAnimationStart()>
<android.view.ViewGroup: void onAnimationEnd()>
<android.view.ViewGroup: void dispatchDraw(android.graphics.Canvas)>
<android.view.ViewGroup: int getChildDrawingOrder(int,int)>
<android.view.ViewGroup: boolean drawChild(android.graphics.Canvas,android.view.View,long)>
<android.view.ViewGroup: void setClipChildren(boolean)>
<android.view.ViewGroup: void setClipToPadding(boolean)>
<android.view.ViewGroup: void dispatchSetSelected(boolean)>
<android.view.ViewGroup: void dispatchSetActivated(boolean)>
<android.view.ViewGroup: void dispatchSetPressed(boolean)>
<android.view.ViewGroup: void setStaticTransformationsEnabled(boolean)>
<android.view.ViewGroup: boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation)>
<android.view.ViewGroup: void addView(android.view.View)>
<android.view.ViewGroup: void addView(android.view.View,int)>
<android.view.ViewGroup: void addView(android.view.View,int,int)>
<android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroup: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroup: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroup: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)>
<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean)>
<android.view.ViewGroup: void cleanupLayoutState(android.view.View)>
<android.view.ViewGroup: void attachLayoutAnimationParameters(android.view.View,android.view.ViewGroup$LayoutParams,int,int)>
<android.view.ViewGroup: void removeView(android.view.View)>
<android.view.ViewGroup: void removeViewInLayout(android.view.View)>
<android.view.ViewGroup: void removeViewsInLayout(int,int)>
<android.view.ViewGroup: void removeViewAt(int)>
<android.view.ViewGroup: void removeViews(int,int)>
<android.view.ViewGroup: void setLayoutTransition(android.animation.LayoutTransition)>
<android.view.ViewGroup: android.animation.LayoutTransition getLayoutTransition()>
<android.view.ViewGroup: void removeAllViews()>
<android.view.ViewGroup: void removeAllViewsInLayout()>
<android.view.ViewGroup: void removeDetachedView(android.view.View,boolean)>
<android.view.ViewGroup: void attachViewToParent(android.view.View,int,android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroup: void detachViewFromParent(android.view.View)>
<android.view.ViewGroup: void detachViewFromParent(int)>
<android.view.ViewGroup: void detachViewsFromParent(int,int)>
<android.view.ViewGroup: void detachAllViewsFromParent()>
<android.view.ViewGroup: void invalidateChild(android.view.View,android.graphics.Rect)>
<android.view.ViewGroup: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>
<android.view.ViewGroup: void offsetDescendantRectToMyCoords(android.view.View,android.graphics.Rect)>
<android.view.ViewGroup: void offsetRectIntoDescendantCoords(android.view.View,android.graphics.Rect)>
<android.view.ViewGroup: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>
<android.view.ViewGroup: void layout(int,int,int,int)>
<android.view.ViewGroup: boolean canAnimate()>
<android.view.ViewGroup: void startLayoutAnimation()>
<android.view.ViewGroup: void scheduleLayoutAnimation()>
<android.view.ViewGroup: void setLayoutAnimation(android.view.animation.LayoutAnimationController)>
<android.view.ViewGroup: android.view.animation.LayoutAnimationController getLayoutAnimation()>
<android.view.ViewGroup: boolean isAnimationCacheEnabled()>
<android.view.ViewGroup: void setAnimationCacheEnabled(boolean)>
<android.view.ViewGroup: boolean isAlwaysDrawnWithCacheEnabled()>
<android.view.ViewGroup: void setAlwaysDrawnWithCacheEnabled(boolean)>
<android.view.ViewGroup: boolean isChildrenDrawnWithCacheEnabled()>
<android.view.ViewGroup: void setChildrenDrawnWithCacheEnabled(boolean)>
<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>
<android.view.ViewGroup: void setChildrenDrawingOrderEnabled(boolean)>
<android.view.ViewGroup: int getPersistentDrawingCache()>
<android.view.ViewGroup: void setPersistentDrawingCache(int)>
<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<android.view.ViewGroup: void debug(int)>
<android.view.ViewGroup: int indexOfChild(android.view.View)>
<android.view.ViewGroup: int getChildCount()>
<android.view.ViewGroup: android.view.View getChildAt(int)>
<android.view.ViewGroup: void measureChildren(int,int)>
<android.view.ViewGroup: void measureChild(android.view.View,int,int)>
<android.view.ViewGroup: void measureChildWithMargins(android.view.View,int,int,int,int)>
<android.view.ViewGroup: int getChildMeasureSpec(int,int,int)>
<android.view.ViewGroup: void clearDisappearingChildren()>
<android.view.ViewGroup: void startViewTransition(android.view.View)>
<android.view.ViewGroup: void endViewTransition(android.view.View)>
<android.view.ViewGroup: boolean gatherTransparentRegion(android.graphics.Region)>
<android.view.ViewGroup: void requestTransparentRegion(android.view.View)>
<android.view.ViewGroup: boolean fitSystemWindows(android.graphics.Rect)>
<android.view.ViewGroup: android.view.animation.Animation$AnimationListener getLayoutAnimationListener()>
<android.view.ViewGroup: void drawableStateChanged()>
<android.view.ViewGroup: void jumpDrawablesToCurrentState()>
<android.view.ViewGroup: int[] onCreateDrawableState(int)>
<android.view.ViewGroup: void setAddStatesFromChildren(boolean)>
<android.view.ViewGroup: boolean addStatesFromChildren()>
<android.view.ViewGroup: void childDrawableStateChanged(android.view.View)>
<android.view.ViewGroup: void setLayoutAnimationListener(android.view.animation.Animation$AnimationListener)>
<android.view.ViewGroup: boolean shouldDelayChildPressedState()>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setDuration(long)>
<android.view.ViewPropertyAnimator: long getDuration()>
<android.view.ViewPropertyAnimator: long getStartDelay()>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setStartDelay(long)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener)>
<android.view.ViewPropertyAnimator: void start()>
<android.view.ViewPropertyAnimator: void cancel()>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator x(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator xBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator y(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator yBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotation(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationX(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationXBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationY(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationYBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationX(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationXBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationY(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationYBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleX(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleXBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleY(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleYBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alpha(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alphaBy(float)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withLayer()>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withStartAction(java.lang.Runnable)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withEndAction(java.lang.Runnable)>
<java.lang.Byte: byte byteValue()>
<java.lang.Byte: int compareTo(java.lang.Byte)>
<java.lang.Byte: java.lang.Byte decode(java.lang.String)>
<java.lang.Byte: double doubleValue()>
<java.lang.Byte: boolean equals(java.lang.Object)>
<java.lang.Byte: float floatValue()>
<java.lang.Byte: int hashCode()>
<java.lang.Byte: int intValue()>
<java.lang.Byte: long longValue()>
<java.lang.Byte: byte parseByte(java.lang.String)>
<java.lang.Byte: byte parseByte(java.lang.String,int)>
<java.lang.Byte: short shortValue()>
<java.lang.Byte: java.lang.String toString()>
<java.lang.Byte: java.lang.String toString(byte)>
<java.lang.Byte: java.lang.Byte valueOf(java.lang.String)>
<java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)>
<java.lang.Byte: java.lang.Byte valueOf(byte)>
<android.util.DisplayMetrics: void setTo(android.util.DisplayMetrics)>
<android.util.DisplayMetrics: void setToDefaults()>
<android.util.DisplayMetrics: java.lang.String toString()>
<android.graphics.RectF: boolean equals(java.lang.Object)>
<android.graphics.RectF: int hashCode()>
<android.graphics.RectF: java.lang.String toString()>
<android.graphics.RectF: java.lang.String toShortString()>
<android.graphics.RectF: boolean isEmpty()>
<android.graphics.RectF: float width()>
<android.graphics.RectF: float height()>
<android.graphics.RectF: float centerX()>
<android.graphics.RectF: float centerY()>
<android.graphics.RectF: void setEmpty()>
<android.graphics.RectF: void set(float,float,float,float)>
<android.graphics.RectF: void set(android.graphics.RectF)>
<android.graphics.RectF: void set(android.graphics.Rect)>
<android.graphics.RectF: void offset(float,float)>
<android.graphics.RectF: void offsetTo(float,float)>
<android.graphics.RectF: void inset(float,float)>
<android.graphics.RectF: boolean contains(float,float)>
<android.graphics.RectF: boolean contains(float,float,float,float)>
<android.graphics.RectF: boolean contains(android.graphics.RectF)>
<android.graphics.RectF: boolean intersect(float,float,float,float)>
<android.graphics.RectF: boolean intersect(android.graphics.RectF)>
<android.graphics.RectF: boolean setIntersect(android.graphics.RectF,android.graphics.RectF)>
<android.graphics.RectF: boolean intersects(float,float,float,float)>
<android.graphics.RectF: boolean intersects(android.graphics.RectF,android.graphics.RectF)>
<android.graphics.RectF: void round(android.graphics.Rect)>
<android.graphics.RectF: void roundOut(android.graphics.Rect)>
<android.graphics.RectF: void union(float,float,float,float)>
<android.graphics.RectF: void union(android.graphics.RectF)>
<android.graphics.RectF: void union(float,float)>
<android.graphics.RectF: void sort()>
<android.graphics.RectF: int describeContents()>
<android.graphics.RectF: void writeToParcel(android.os.Parcel,int)>
<android.graphics.RectF: void readFromParcel(android.os.Parcel)>
<android.graphics.Path: void reset()>
<android.graphics.Path: void rewind()>
<android.graphics.Path: void set(android.graphics.Path)>
<android.graphics.Path: android.graphics.Path$FillType getFillType()>
<android.graphics.Path: void setFillType(android.graphics.Path$FillType)>
<android.graphics.Path: boolean isInverseFillType()>
<android.graphics.Path: void toggleInverseFillType()>
<android.graphics.Path: boolean isEmpty()>
<android.graphics.Path: boolean isRect(android.graphics.RectF)>
<android.graphics.Path: void computeBounds(android.graphics.RectF,boolean)>
<android.graphics.Path: void incReserve(int)>
<android.graphics.Path: void moveTo(float,float)>
<android.graphics.Path: void rMoveTo(float,float)>
<android.graphics.Path: void lineTo(float,float)>
<android.graphics.Path: void rLineTo(float,float)>
<android.graphics.Path: void quadTo(float,float,float,float)>
<android.graphics.Path: void rQuadTo(float,float,float,float)>
<android.graphics.Path: void cubicTo(float,float,float,float,float,float)>
<android.graphics.Path: void rCubicTo(float,float,float,float,float,float)>
<android.graphics.Path: void arcTo(android.graphics.RectF,float,float,boolean)>
<android.graphics.Path: void arcTo(android.graphics.RectF,float,float)>
<android.graphics.Path: void close()>
<android.graphics.Path: void addRect(android.graphics.RectF,android.graphics.Path$Direction)>
<android.graphics.Path: void addRect(float,float,float,float,android.graphics.Path$Direction)>
<android.graphics.Path: void addOval(android.graphics.RectF,android.graphics.Path$Direction)>
<android.graphics.Path: void addCircle(float,float,float,android.graphics.Path$Direction)>
<android.graphics.Path: void addArc(android.graphics.RectF,float,float)>
<android.graphics.Path: void addRoundRect(android.graphics.RectF,float,float,android.graphics.Path$Direction)>
<android.graphics.Path: void addRoundRect(android.graphics.RectF,float[],android.graphics.Path$Direction)>
<android.graphics.Path: void addPath(android.graphics.Path,float,float)>
<android.graphics.Path: void addPath(android.graphics.Path)>
<android.graphics.Path: void addPath(android.graphics.Path,android.graphics.Matrix)>
<android.graphics.Path: void offset(float,float,android.graphics.Path)>
<android.graphics.Path: void offset(float,float)>
<android.graphics.Path: void setLastPoint(float,float)>
<android.graphics.Path: void transform(android.graphics.Matrix,android.graphics.Path)>
<android.graphics.Path: void transform(android.graphics.Matrix)>
<android.graphics.Path: void finalize()>
<android.graphics.Region: void setEmpty()>
<android.graphics.Region: boolean set(android.graphics.Region)>
<android.graphics.Region: boolean set(android.graphics.Rect)>
<android.graphics.Region: boolean set(int,int,int,int)>
<android.graphics.Region: boolean setPath(android.graphics.Path,android.graphics.Region)>
<android.graphics.Region: android.graphics.Rect getBounds()>
<android.graphics.Region: boolean getBounds(android.graphics.Rect)>
<android.graphics.Region: android.graphics.Path getBoundaryPath()>
<android.graphics.Region: boolean getBoundaryPath(android.graphics.Path)>
<android.graphics.Region: boolean quickContains(android.graphics.Rect)>
<android.graphics.Region: boolean quickReject(android.graphics.Rect)>
<android.graphics.Region: void translate(int,int)>
<android.graphics.Region: boolean union(android.graphics.Rect)>
<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region$Op)>
<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>
<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)>
<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region,android.graphics.Region$Op)>
<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region,android.graphics.Region$Op)>
<android.graphics.Region: java.lang.String toString()>
<android.graphics.Region: int describeContents()>
<android.graphics.Region: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Region: boolean equals(java.lang.Object)>
<android.graphics.Region: void finalize()>
<android.graphics.DrawFilter: void finalize()>
<android.graphics.Picture: android.graphics.Canvas beginRecording(int,int)>
<android.graphics.Picture: void endRecording()>
<android.graphics.Picture: void draw(android.graphics.Canvas)>
<android.graphics.Picture: android.graphics.Picture createFromStream(java.io.InputStream)>
<android.graphics.Picture: void writeToStream(java.io.OutputStream)>
<android.graphics.Picture: void finalize()>
<android.app.Fragment$SavedState: int describeContents()>
<android.app.Fragment$SavedState: void writeToParcel(android.os.Parcel,int)>
<android.animation.Animator: void start()>
<android.animation.Animator: void cancel()>
<android.animation.Animator: void end()>
<android.animation.Animator: boolean isStarted()>
<android.animation.Animator: void addListener(android.animation.Animator$AnimatorListener)>
<android.animation.Animator: void removeListener(android.animation.Animator$AnimatorListener)>
<android.animation.Animator: java.util.ArrayList getListeners()>
<android.animation.Animator: void removeAllListeners()>
<android.animation.Animator: android.animation.Animator clone()>
<android.animation.Animator: void setupStartValues()>
<android.animation.Animator: void setupEndValues()>
<android.animation.Animator: void setTarget(java.lang.Object)>
<android.database.ContentObserver: boolean deliverSelfNotifications()>
<android.database.ContentObserver: void onChange(boolean)>
<android.database.ContentObserver: void onChange(boolean,android.net.Uri)>
<android.database.ContentObserver: void dispatchChange(boolean)>
<android.database.ContentObserver: void dispatchChange(boolean,android.net.Uri)>
<android.database.DataSetObserver: void onChanged()>
<android.database.DataSetObserver: void onInvalidated()>
<android.view.InputEvent: android.view.InputDevice getDevice()>
<android.view.InputEvent: int describeContents()>
<android.view.KeyCharacterMap: void finalize()>
<android.view.KeyCharacterMap: android.view.KeyCharacterMap load(int)>
<android.view.KeyCharacterMap: int get(int,int)>
<android.view.KeyCharacterMap: char getNumber(int)>
<android.view.KeyCharacterMap: char getMatch(int,char[])>
<android.view.KeyCharacterMap: char getMatch(int,char[],int)>
<android.view.KeyCharacterMap: char getDisplayLabel(int)>
<android.view.KeyCharacterMap: int getDeadChar(int,int)>
<android.view.KeyCharacterMap: boolean getKeyData(int,android.view.KeyCharacterMap$KeyData)>
<android.view.KeyCharacterMap: android.view.KeyEvent[] getEvents(char[])>
<android.view.KeyCharacterMap: boolean isPrintingKey(int)>
<android.view.KeyCharacterMap: int getKeyboardType()>
<android.view.KeyCharacterMap: int getModifierBehavior()>
<android.view.KeyCharacterMap: boolean deviceHasKey(int)>
<android.view.KeyCharacterMap: boolean[] deviceHasKeys(int[])>
<android.view.KeyCharacterMap: void writeToParcel(android.os.Parcel,int)>
<android.view.KeyCharacterMap: int describeContents()>
<android.view.MotionEvent$PointerProperties: void clear()>
<android.view.MotionEvent$PointerProperties: void copyFrom(android.view.MotionEvent$PointerProperties)>
<android.view.MotionEvent$PointerProperties: boolean equals(java.lang.Object)>
<android.view.MotionEvent$PointerProperties: int hashCode()>
<android.view.MotionEvent$PointerCoords: void clear()>
<android.view.MotionEvent$PointerCoords: void copyFrom(android.view.MotionEvent$PointerCoords)>
<android.view.MotionEvent$PointerCoords: float getAxisValue(int)>
<android.view.MotionEvent$PointerCoords: void setAxisValue(int,float)>
<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View)>
<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View,int)>
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityNodeInfo getSource()>
<android.view.accessibility.AccessibilityRecord: int getWindowId()>
<android.view.accessibility.AccessibilityRecord: boolean isChecked()>
<android.view.accessibility.AccessibilityRecord: void setChecked(boolean)>
<android.view.accessibility.AccessibilityRecord: boolean isEnabled()>
<android.view.accessibility.AccessibilityRecord: void setEnabled(boolean)>
<android.view.accessibility.AccessibilityRecord: boolean isPassword()>
<android.view.accessibility.AccessibilityRecord: void setPassword(boolean)>
<android.view.accessibility.AccessibilityRecord: boolean isFullScreen()>
<android.view.accessibility.AccessibilityRecord: void setFullScreen(boolean)>
<android.view.accessibility.AccessibilityRecord: boolean isScrollable()>
<android.view.accessibility.AccessibilityRecord: void setScrollable(boolean)>
<android.view.accessibility.AccessibilityRecord: int getItemCount()>
<android.view.accessibility.AccessibilityRecord: void setItemCount(int)>
<android.view.accessibility.AccessibilityRecord: int getCurrentItemIndex()>
<android.view.accessibility.AccessibilityRecord: void setCurrentItemIndex(int)>
<android.view.accessibility.AccessibilityRecord: int getFromIndex()>
<android.view.accessibility.AccessibilityRecord: void setFromIndex(int)>
<android.view.accessibility.AccessibilityRecord: int getToIndex()>
<android.view.accessibility.AccessibilityRecord: void setToIndex(int)>
<android.view.accessibility.AccessibilityRecord: int getScrollX()>
<android.view.accessibility.AccessibilityRecord: void setScrollX(int)>
<android.view.accessibility.AccessibilityRecord: int getScrollY()>
<android.view.accessibility.AccessibilityRecord: void setScrollY(int)>
<android.view.accessibility.AccessibilityRecord: int getMaxScrollX()>
<android.view.accessibility.AccessibilityRecord: void setMaxScrollX(int)>
<android.view.accessibility.AccessibilityRecord: int getMaxScrollY()>
<android.view.accessibility.AccessibilityRecord: void setMaxScrollY(int)>
<android.view.accessibility.AccessibilityRecord: int getAddedCount()>
<android.view.accessibility.AccessibilityRecord: void setAddedCount(int)>
<android.view.accessibility.AccessibilityRecord: int getRemovedCount()>
<android.view.accessibility.AccessibilityRecord: void setRemovedCount(int)>
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getClassName()>
<android.view.accessibility.AccessibilityRecord: void setClassName(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityRecord: java.util.List getText()>
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getBeforeText()>
<android.view.accessibility.AccessibilityRecord: void setBeforeText(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getContentDescription()>
<android.view.accessibility.AccessibilityRecord: void setContentDescription(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityRecord: android.os.Parcelable getParcelableData()>
<android.view.accessibility.AccessibilityRecord: void setParcelableData(android.os.Parcelable)>
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain(android.view.accessibility.AccessibilityRecord)>
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain()>
<android.view.accessibility.AccessibilityRecord: void recycle()>
<android.view.accessibility.AccessibilityRecord: java.lang.String toString()>
<android.view.ActionProvider: android.view.View onCreateActionView(android.view.MenuItem)>
<android.view.ActionProvider: boolean overridesItemVisibility()>
<android.view.ActionProvider: boolean isVisible()>
<android.view.ActionProvider: void refreshVisibility()>
<android.view.ActionProvider: boolean onPerformDefaultAction()>
<android.view.ActionProvider: boolean hasSubMenu()>
<android.view.ActionProvider: void onPrepareSubMenu(android.view.SubMenu)>
<android.view.ActionProvider: void setVisibilityListener(android.view.ActionProvider$VisibilityListener)>
<android.os.Message: android.os.Message obtain()>
<android.os.Message: android.os.Message obtain(android.os.Message)>
<android.os.Message: android.os.Message obtain(android.os.Handler)>
<android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)>
<android.os.Message: android.os.Message obtain(android.os.Handler,int)>
<android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>
<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int)>
<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int,java.lang.Object)>
<android.os.Message: void recycle()>
<android.os.Message: void copyFrom(android.os.Message)>
<android.os.Message: long getWhen()>
<android.os.Message: void setTarget(android.os.Handler)>
<android.os.Message: android.os.Handler getTarget()>
<android.os.Message: java.lang.Runnable getCallback()>
<android.os.Message: android.os.Bundle getData()>
<android.os.Message: android.os.Bundle peekData()>
<android.os.Message: void setData(android.os.Bundle)>
<android.os.Message: void sendToTarget()>
<android.os.Message: java.lang.String toString()>
<android.os.Message: int describeContents()>
<android.os.Message: void writeToParcel(android.os.Parcel,int)>
<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder opaquePart(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder encodedOpaquePart(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder encodedAuthority(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder path(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder encodedPath(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder appendEncodedPath(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder query(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder encodedQuery(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder fragment(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder encodedFragment(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder clearQuery()>
<android.net.Uri$Builder: android.net.Uri build()>
<android.net.Uri$Builder: java.lang.String toString()>
<android.graphics.ColorFilter: void finalize()>
<android.util.TypedValue: float getFloat()>
<android.util.TypedValue: float complexToFloat(int)>
<android.util.TypedValue: float complexToDimension(int,android.util.DisplayMetrics)>
<android.util.TypedValue: int complexToDimensionPixelOffset(int,android.util.DisplayMetrics)>
<android.util.TypedValue: int complexToDimensionPixelSize(int,android.util.DisplayMetrics)>
<android.util.TypedValue: float complexToDimensionNoisy(int,android.util.DisplayMetrics)>
<android.util.TypedValue: float applyDimension(int,float,android.util.DisplayMetrics)>
<android.util.TypedValue: float getDimension(android.util.DisplayMetrics)>
<android.util.TypedValue: float complexToFraction(int,float,float)>
<android.util.TypedValue: float getFraction(float,float)>
<android.util.TypedValue: java.lang.CharSequence coerceToString()>
<android.util.TypedValue: java.lang.String coerceToString(int,int)>
<android.util.TypedValue: void setTo(android.util.TypedValue)>
<android.util.TypedValue: java.lang.String toString()>
<android.graphics.BitmapFactory$Options: void requestCancelDecode()>
<android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>
<android.content.res.AssetManager: void close()>
<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>
<android.content.res.AssetManager: java.io.InputStream open(java.lang.String,int)>
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openFd(java.lang.String)>
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(java.lang.String)>
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(int,java.lang.String)>
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String)>
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(int,java.lang.String)>
<android.content.res.AssetManager: void finalize()>
<android.os.Looper: void prepare()>
<android.os.Looper: void prepareMainLooper()>
<android.os.Looper: android.os.Looper getMainLooper()>
<android.os.Looper: void loop()>
<android.os.Looper: android.os.Looper myLooper()>
<android.os.Looper: void setMessageLogging(android.util.Printer)>
<android.os.Looper: android.os.MessageQueue myQueue()>
<android.os.Looper: void quit()>
<android.os.Looper: java.lang.Thread getThread()>
<android.os.Looper: void dump(android.util.Printer,java.lang.String)>
<android.os.Looper: java.lang.String toString()>
<android.content.pm.ApplicationInfo: void dump(android.util.Printer,java.lang.String)>
<android.content.pm.ApplicationInfo: java.lang.String toString()>
<android.content.pm.ApplicationInfo: int describeContents()>
<android.content.pm.ApplicationInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ApplicationInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>
<java.io.FileInputStream: int available()>
<java.io.FileInputStream: void close()>
<java.io.FileInputStream: void finalize()>
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>
<java.io.FileInputStream: long skip(long)>
<java.io.FileOutputStream: void close()>
<java.io.FileOutputStream: void finalize()>
<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>
<android.database.sqlite.SQLiteDatabase: void finalize()>
<android.database.sqlite.SQLiteDatabase: void onAllReferencesReleased()>
<android.database.sqlite.SQLiteDatabase: int releaseMemory()>
<android.database.sqlite.SQLiteDatabase: void setLockingEnabled(boolean)>
<android.database.sqlite.SQLiteDatabase: void beginTransaction()>
<android.database.sqlite.SQLiteDatabase: void beginTransactionNonExclusive()>
<android.database.sqlite.SQLiteDatabase: void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)>
<android.database.sqlite.SQLiteDatabase: void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)>
<android.database.sqlite.SQLiteDatabase: void endTransaction()>
<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>
<android.database.sqlite.SQLiteDatabase: boolean inTransaction()>
<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByCurrentThread()>
<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByOtherThreads()>
<android.database.sqlite.SQLiteDatabase: boolean yieldIfContended()>
<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely()>
<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely(long)>
<android.database.sqlite.SQLiteDatabase: java.util.Map getSyncedTables()>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$CursorFactory)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>
<android.database.sqlite.SQLiteDatabase: boolean deleteDatabase(java.io.File)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase$CursorFactory)>
<android.database.sqlite.SQLiteDatabase: int getVersion()>
<android.database.sqlite.SQLiteDatabase: void setVersion(int)>
<android.database.sqlite.SQLiteDatabase: long getMaximumSize()>
<android.database.sqlite.SQLiteDatabase: long setMaximumSize(long)>
<android.database.sqlite.SQLiteDatabase: long getPageSize()>
<android.database.sqlite.SQLiteDatabase: void setPageSize(long)>
<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[],android.os.CancellationSignal)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>
<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)>
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])>
<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>
<android.database.sqlite.SQLiteDatabase: boolean isOpen()>
<android.database.sqlite.SQLiteDatabase: boolean needUpgrade(int)>
<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>
<android.database.sqlite.SQLiteDatabase: void setLocale(java.util.Locale)>
<android.database.sqlite.SQLiteDatabase: void setMaxSqlCacheSize(int)>
<android.database.sqlite.SQLiteDatabase: void setForeignKeyConstraintsEnabled(boolean)>
<android.database.sqlite.SQLiteDatabase: boolean enableWriteAheadLogging()>
<android.database.sqlite.SQLiteDatabase: void disableWriteAheadLogging()>
<android.database.sqlite.SQLiteDatabase: boolean isWriteAheadLoggingEnabled()>
<android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()>
<android.database.sqlite.SQLiteDatabase: boolean isDatabaseIntegrityOk()>
<android.database.sqlite.SQLiteDatabase: java.lang.String toString()>
<android.content.BroadcastReceiver: android.content.BroadcastReceiver$PendingResult goAsync()>
<android.content.BroadcastReceiver: android.os.IBinder peekService(android.content.Context,android.content.Intent)>
<android.content.BroadcastReceiver: void setResultCode(int)>
<android.content.BroadcastReceiver: int getResultCode()>
<android.content.BroadcastReceiver: void setResultData(java.lang.String)>
<android.content.BroadcastReceiver: java.lang.String getResultData()>
<android.content.BroadcastReceiver: void setResultExtras(android.os.Bundle)>
<android.content.BroadcastReceiver: android.os.Bundle getResultExtras(boolean)>
<android.content.BroadcastReceiver: void setResult(int,java.lang.String,android.os.Bundle)>
<android.content.BroadcastReceiver: boolean getAbortBroadcast()>
<android.content.BroadcastReceiver: void abortBroadcast()>
<android.content.BroadcastReceiver: void clearAbortBroadcast()>
<android.content.BroadcastReceiver: boolean isOrderedBroadcast()>
<android.content.BroadcastReceiver: boolean isInitialStickyBroadcast()>
<android.content.BroadcastReceiver: void setOrderedHint(boolean)>
<android.content.BroadcastReceiver: void setDebugUnregister(boolean)>
<android.content.BroadcastReceiver: boolean getDebugUnregister()>
<android.content.IntentFilter: android.content.IntentFilter create(java.lang.String,java.lang.String)>
<android.content.IntentFilter: void setPriority(int)>
<android.content.IntentFilter: int getPriority()>
<android.content.IntentFilter: void addAction(java.lang.String)>
<android.content.IntentFilter: int countActions()>
<android.content.IntentFilter: java.lang.String getAction(int)>
<android.content.IntentFilter: boolean hasAction(java.lang.String)>
<android.content.IntentFilter: boolean matchAction(java.lang.String)>
<android.content.IntentFilter: java.util.Iterator actionsIterator()>
<android.content.IntentFilter: void addDataType(java.lang.String)>
<android.content.IntentFilter: boolean hasDataType(java.lang.String)>
<android.content.IntentFilter: int countDataTypes()>
<android.content.IntentFilter: java.lang.String getDataType(int)>
<android.content.IntentFilter: java.util.Iterator typesIterator()>
<android.content.IntentFilter: void addDataScheme(java.lang.String)>
<android.content.IntentFilter: int countDataSchemes()>
<android.content.IntentFilter: java.lang.String getDataScheme(int)>
<android.content.IntentFilter: boolean hasDataScheme(java.lang.String)>
<android.content.IntentFilter: java.util.Iterator schemesIterator()>
<android.content.IntentFilter: void addDataAuthority(java.lang.String,java.lang.String)>
<android.content.IntentFilter: int countDataAuthorities()>
<android.content.IntentFilter: android.content.IntentFilter$AuthorityEntry getDataAuthority(int)>
<android.content.IntentFilter: boolean hasDataAuthority(android.net.Uri)>
<android.content.IntentFilter: java.util.Iterator authoritiesIterator()>
<android.content.IntentFilter: void addDataPath(java.lang.String,int)>
<android.content.IntentFilter: int countDataPaths()>
<android.content.IntentFilter: android.os.PatternMatcher getDataPath(int)>
<android.content.IntentFilter: boolean hasDataPath(java.lang.String)>
<android.content.IntentFilter: java.util.Iterator pathsIterator()>
<android.content.IntentFilter: int matchDataAuthority(android.net.Uri)>
<android.content.IntentFilter: int matchData(java.lang.String,java.lang.String,android.net.Uri)>
<android.content.IntentFilter: void addCategory(java.lang.String)>
<android.content.IntentFilter: int countCategories()>
<android.content.IntentFilter: java.lang.String getCategory(int)>
<android.content.IntentFilter: boolean hasCategory(java.lang.String)>
<android.content.IntentFilter: java.util.Iterator categoriesIterator()>
<android.content.IntentFilter: java.lang.String matchCategories(java.util.Set)>
<android.content.IntentFilter: int match(android.content.ContentResolver,android.content.Intent,boolean,java.lang.String)>
<android.content.IntentFilter: int match(java.lang.String,java.lang.String,java.lang.String,android.net.Uri,java.util.Set,java.lang.String)>
<android.content.IntentFilter: void writeToXml(org.xmlpull.v1.XmlSerializer)>
<android.content.IntentFilter: void readFromXml(org.xmlpull.v1.XmlPullParser)>
<android.content.IntentFilter: void dump(android.util.Printer,java.lang.String)>
<android.content.IntentFilter: int describeContents()>
<android.content.IntentFilter: void writeToParcel(android.os.Parcel,int)>
<android.content.ContentProvider: android.content.Context getContext()>
<android.content.ContentProvider: void setReadPermission(java.lang.String)>
<android.content.ContentProvider: java.lang.String getReadPermission()>
<android.content.ContentProvider: void setWritePermission(java.lang.String)>
<android.content.ContentProvider: java.lang.String getWritePermission()>
<android.content.ContentProvider: void setPathPermissions(android.content.pm.PathPermission[])>
<android.content.ContentProvider: android.content.pm.PathPermission[] getPathPermissions()>
<android.content.ContentProvider: void onConfigurationChanged(android.content.res.Configuration)>
<android.content.ContentProvider: void onLowMemory()>
<android.content.ContentProvider: void onTrimMemory(int)>
<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<android.content.ContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])>
<android.content.ContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
<android.content.ContentProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>
<android.content.ContentProvider: android.os.ParcelFileDescriptor openFileHelper(android.net.Uri,java.lang.String)>
<android.content.ContentProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>
<android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>
<android.content.ContentProvider: android.os.ParcelFileDescriptor openPipeHelper(android.net.Uri,java.lang.String,android.os.Bundle,java.lang.Object,android.content.ContentProvider$PipeDataWriter)>
<android.content.ContentProvider: boolean isTemporary()>
<android.content.ContentProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>
<android.content.ContentProvider: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)>
<android.content.ContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>
<android.content.ContentProvider: void shutdown()>
<android.os.CancellationSignal: boolean isCanceled()>
<android.os.CancellationSignal: void throwIfCanceled()>
<android.os.CancellationSignal: void cancel()>
<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup()>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromFd(int)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor adoptFd(int)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromSocket(java.net.Socket)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromDatagramSocket(java.net.DatagramSocket)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createPipe()>
<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>
<android.os.ParcelFileDescriptor: int getFd()>
<android.os.ParcelFileDescriptor: int detachFd()>
<android.os.ParcelFileDescriptor: void close()>
<android.os.ParcelFileDescriptor: java.lang.String toString()>
<android.os.ParcelFileDescriptor: void finalize()>
<android.os.ParcelFileDescriptor: int describeContents()>
<android.os.ParcelFileDescriptor: void writeToParcel(android.os.Parcel,int)>
<android.content.res.AssetFileDescriptor: android.os.ParcelFileDescriptor getParcelFileDescriptor()>
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>
<android.content.res.AssetFileDescriptor: long getStartOffset()>
<android.content.res.AssetFileDescriptor: long getLength()>
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>
<android.content.res.AssetFileDescriptor: void close()>
<android.content.res.AssetFileDescriptor: java.io.FileInputStream createInputStream()>
<android.content.res.AssetFileDescriptor: java.io.FileOutputStream createOutputStream()>
<android.content.res.AssetFileDescriptor: java.lang.String toString()>
<android.content.res.AssetFileDescriptor: int describeContents()>
<android.content.res.AssetFileDescriptor: void writeToParcel(android.os.Parcel,int)>
<android.content.ContentValues: boolean equals(java.lang.Object)>
<android.content.ContentValues: int hashCode()>
<android.content.ContentValues: void put(java.lang.String,java.lang.String)>
<android.content.ContentValues: void putAll(android.content.ContentValues)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Byte)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Short)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Float)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Double)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>
<android.content.ContentValues: void put(java.lang.String,byte[])>
<android.content.ContentValues: void putNull(java.lang.String)>
<android.content.ContentValues: int size()>
<android.content.ContentValues: void remove(java.lang.String)>
<android.content.ContentValues: void clear()>
<android.content.ContentValues: boolean containsKey(java.lang.String)>
<android.content.ContentValues: java.lang.Object get(java.lang.String)>
<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>
<android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)>
<android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)>
<android.content.ContentValues: java.lang.Short getAsShort(java.lang.String)>
<android.content.ContentValues: java.lang.Byte getAsByte(java.lang.String)>
<android.content.ContentValues: java.lang.Double getAsDouble(java.lang.String)>
<android.content.ContentValues: java.lang.Float getAsFloat(java.lang.String)>
<android.content.ContentValues: java.lang.Boolean getAsBoolean(java.lang.String)>
<android.content.ContentValues: byte[] getAsByteArray(java.lang.String)>
<android.content.ContentValues: java.util.Set valueSet()>
<android.content.ContentValues: java.util.Set keySet()>
<android.content.ContentValues: int describeContents()>
<android.content.ContentValues: void writeToParcel(android.os.Parcel,int)>
<android.content.ContentValues: java.lang.String toString()>
<android.content.ContentProviderResult: void writeToParcel(android.os.Parcel,int)>
<android.content.ContentProviderResult: int describeContents()>
<android.content.ContentProviderResult: java.lang.String toString()>
<android.content.OperationApplicationException: int getNumSuccessfulYieldPoints()>
<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<android.content.ContentProviderClient: java.lang.String getType(android.net.Uri)>
<android.content.ContentProviderClient: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>
<android.content.ContentProviderClient: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.content.ContentProviderClient: int bulkInsert(android.net.Uri,android.content.ContentValues[])>
<android.content.ContentProviderClient: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.content.ContentProviderClient: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.content.ContentProviderClient: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>
<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)>
<android.content.ContentProviderClient: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)>
<android.content.ContentProviderClient: boolean release()>
<android.content.ContentProviderClient: android.content.ContentProvider getLocalContentProvider()>
<android.accounts.Account: boolean equals(java.lang.Object)>
<android.accounts.Account: int hashCode()>
<android.accounts.Account: int describeContents()>
<android.accounts.Account: void writeToParcel(android.os.Parcel,int)>
<android.accounts.Account: java.lang.String toString()>
<android.content.SyncAdapterType: boolean supportsUploading()>
<android.content.SyncAdapterType: boolean isUserVisible()>
<android.content.SyncAdapterType: boolean allowParallelSyncs()>
<android.content.SyncAdapterType: boolean isAlwaysSyncable()>
<android.content.SyncAdapterType: java.lang.String getSettingsActivity()>
<android.content.SyncAdapterType: android.content.SyncAdapterType newKey(java.lang.String,java.lang.String)>
<android.content.SyncAdapterType: boolean equals(java.lang.Object)>
<android.content.SyncAdapterType: int hashCode()>
<android.content.SyncAdapterType: java.lang.String toString()>
<android.content.SyncAdapterType: int describeContents()>
<android.content.SyncAdapterType: void writeToParcel(android.os.Parcel,int)>
<android.content.SyncInfo: int describeContents()>
<android.content.SyncInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.ClipData$Item: java.lang.CharSequence getText()>
<android.content.ClipData$Item: java.lang.String getHtmlText()>
<android.content.ClipData$Item: android.content.Intent getIntent()>
<android.content.ClipData$Item: android.net.Uri getUri()>
<android.content.ClipData$Item: java.lang.CharSequence coerceToText(android.content.Context)>
<android.content.ClipData$Item: java.lang.CharSequence coerceToStyledText(android.content.Context)>
<android.content.ClipData$Item: java.lang.String coerceToHtmlText(android.content.Context)>
<android.content.ClipData$Item: java.lang.String toString()>
<android.content.ClipDescription: boolean compareMimeTypes(java.lang.String,java.lang.String)>
<android.content.ClipDescription: java.lang.CharSequence getLabel()>
<android.content.ClipDescription: boolean hasMimeType(java.lang.String)>
<android.content.ClipDescription: java.lang.String[] filterMimeTypes(java.lang.String)>
<android.content.ClipDescription: int getMimeTypeCount()>
<android.content.ClipDescription: java.lang.String getMimeType(int)>
<android.content.ClipDescription: java.lang.String toString()>
<android.content.ClipDescription: int describeContents()>
<android.content.ClipDescription: void writeToParcel(android.os.Parcel,int)>
<java.util.AbstractList: void add(int,java.lang.Object)>
<java.util.AbstractList: boolean add(java.lang.Object)>
<java.util.AbstractList: boolean addAll(int,java.util.Collection)>
<java.util.AbstractList: void clear()>
<java.util.AbstractList: boolean equals(java.lang.Object)>
<java.util.AbstractList: int hashCode()>
<java.util.AbstractList: int indexOf(java.lang.Object)>
<java.util.AbstractList: java.util.Iterator iterator()>
<java.util.AbstractList: int lastIndexOf(java.lang.Object)>
<java.util.AbstractList: java.util.ListIterator listIterator()>
<java.util.AbstractList: java.util.ListIterator listIterator(int)>
<java.util.AbstractList: java.lang.Object remove(int)>
<java.util.AbstractList: void removeRange(int,int)>
<java.util.AbstractList: java.lang.Object set(int,java.lang.Object)>
<java.util.AbstractList: java.util.List subList(int,int)>
<android.content.pm.PackageInfo: java.lang.String toString()>
<android.content.pm.PackageInfo: int describeContents()>
<android.content.pm.PackageInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.PermissionInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>
<android.content.pm.PermissionInfo: java.lang.String toString()>
<android.content.pm.PermissionInfo: int describeContents()>
<android.content.pm.PermissionInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.PermissionGroupInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>
<android.content.pm.PermissionGroupInfo: java.lang.String toString()>
<android.content.pm.PermissionGroupInfo: int describeContents()>
<android.content.pm.PermissionGroupInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ServiceInfo: void dump(android.util.Printer,java.lang.String)>
<android.content.pm.ServiceInfo: java.lang.String toString()>
<android.content.pm.ServiceInfo: int describeContents()>
<android.content.pm.ServiceInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ProviderInfo: int describeContents()>
<android.content.pm.ProviderInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ProviderInfo: java.lang.String toString()>
<android.content.pm.FeatureInfo: java.lang.String toString()>
<android.content.pm.FeatureInfo: int describeContents()>
<android.content.pm.FeatureInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.FeatureInfo: java.lang.String getGlEsVersion()>
<android.content.pm.ResolveInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>
<android.content.pm.ResolveInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
<android.content.pm.ResolveInfo: int getIconResource()>
<android.content.pm.ResolveInfo: void dump(android.util.Printer,java.lang.String)>
<android.content.pm.ResolveInfo: java.lang.String toString()>
<android.content.pm.ResolveInfo: int describeContents()>
<android.content.pm.ResolveInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.InstrumentationInfo: java.lang.String toString()>
<android.content.pm.InstrumentationInfo: int describeContents()>
<android.content.pm.InstrumentationInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ComponentInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>
<android.content.pm.ComponentInfo: boolean isEnabled()>
<android.content.pm.ComponentInfo: int getIconResource()>
<android.content.pm.ComponentInfo: void dumpFront(android.util.Printer,java.lang.String)>
<android.content.pm.ComponentInfo: void dumpBack(android.util.Printer,java.lang.String)>
<android.content.pm.ComponentInfo: void writeToParcel(android.os.Parcel,int)>
<android.util.SparseBooleanArray: android.util.SparseBooleanArray clone()>
<android.util.SparseBooleanArray: boolean get(int)>
<android.util.SparseBooleanArray: boolean get(int,boolean)>
<android.util.SparseBooleanArray: void delete(int)>
<android.util.SparseBooleanArray: void put(int,boolean)>
<android.util.SparseBooleanArray: int size()>
<android.util.SparseBooleanArray: int keyAt(int)>
<android.util.SparseBooleanArray: boolean valueAt(int)>
<android.util.SparseBooleanArray: int indexOfKey(int)>
<android.util.SparseBooleanArray: int indexOfValue(boolean)>
<android.util.SparseBooleanArray: void clear()>
<android.util.SparseBooleanArray: void append(int,boolean)>
<java.util.HashMap: java.lang.Object clone()>
<java.util.HashMap: boolean isEmpty()>
<java.util.HashMap: int size()>
<java.util.HashMap: boolean containsKey(java.lang.Object)>
<java.util.HashMap: boolean containsValue(java.lang.Object)>
<java.util.HashMap: void putAll(java.util.Map)>
<java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<java.util.HashMap: void clear()>
<java.util.HashMap: java.util.Set keySet()>
<java.util.HashMap: java.util.Set entrySet()>
<android.graphics.Movie: void draw(android.graphics.Canvas,float,float)>
<android.graphics.Movie: android.graphics.Movie decodeFile(java.lang.String)>
<android.graphics.Movie: void finalize()>
<android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>
<android.content.res.ColorStateList: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)>
<android.content.res.ColorStateList: android.content.res.ColorStateList withAlpha(int)>
<android.content.res.ColorStateList: boolean isStateful()>
<android.content.res.ColorStateList: int getColorForState(int[],int)>
<android.content.res.ColorStateList: int getDefaultColor()>
<android.content.res.ColorStateList: java.lang.String toString()>
<android.content.res.ColorStateList: int describeContents()>
<android.content.res.ColorStateList: void writeToParcel(android.os.Parcel,int)>
<java.io.Reader: void mark(int)>
<java.io.Reader: boolean markSupported()>
<java.io.Reader: int read()>
<java.io.Reader: int read(char[])>
<java.io.Reader: boolean ready()>
<java.io.Reader: void reset()>
<java.io.Reader: long skip(long)>
<java.io.Reader: int read(java.nio.CharBuffer)>
<android.view.inputmethod.ExtractedText: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.ExtractedText: int describeContents()>
<android.view.inputmethod.ExtractedTextRequest: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.ExtractedTextRequest: int describeContents()>
<android.view.inputmethod.CompletionInfo: long getId()>
<android.view.inputmethod.CompletionInfo: int getPosition()>
<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getText()>
<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getLabel()>
<android.view.inputmethod.CompletionInfo: java.lang.String toString()>
<android.view.inputmethod.CompletionInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.CompletionInfo: int describeContents()>
<android.view.inputmethod.CorrectionInfo: int getOffset()>
<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getOldText()>
<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getNewText()>
<android.view.inputmethod.CorrectionInfo: java.lang.String toString()>
<android.view.inputmethod.CorrectionInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.CorrectionInfo: int describeContents()>
<android.graphics.Shader: boolean getLocalMatrix(android.graphics.Matrix)>
<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>
<android.graphics.Shader: void finalize()>
<android.graphics.Xfermode: void finalize()>
<android.graphics.PathEffect: void finalize()>
<android.graphics.MaskFilter: void finalize()>
<android.graphics.Typeface: int getStyle()>
<android.graphics.Typeface: boolean isBold()>
<android.graphics.Typeface: boolean isItalic()>
<android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>
<android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int)>
<android.graphics.Typeface: android.graphics.Typeface defaultFromStyle(int)>
<android.graphics.Typeface: android.graphics.Typeface createFromAsset(android.content.res.AssetManager,java.lang.String)>
<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.io.File)>
<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.lang.String)>
<android.graphics.Typeface: void finalize()>
<android.graphics.Typeface: boolean equals(java.lang.Object)>
<android.graphics.Typeface: int hashCode()>
<android.graphics.Rasterizer: void finalize()>
<android.graphics.Paint$FontMetricsInt: java.lang.String toString()>
<android.view.animation.Transformation: void clear()>
<android.view.animation.Transformation: int getTransformationType()>
<android.view.animation.Transformation: void setTransformationType(int)>
<android.view.animation.Transformation: void set(android.view.animation.Transformation)>
<android.view.animation.Transformation: void compose(android.view.animation.Transformation)>
<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>
<android.view.animation.Transformation: void setAlpha(float)>
<android.view.animation.Transformation: float getAlpha()>
<android.view.animation.Transformation: java.lang.String toString()>
<android.view.animation.Transformation: java.lang.String toShortString()>
<android.animation.LayoutTransition: void setDuration(long)>
<android.animation.LayoutTransition: void enableTransitionType(int)>
<android.animation.LayoutTransition: void disableTransitionType(int)>
<android.animation.LayoutTransition: boolean isTransitionTypeEnabled(int)>
<android.animation.LayoutTransition: void setStartDelay(int,long)>
<android.animation.LayoutTransition: long getStartDelay(int)>
<android.animation.LayoutTransition: void setDuration(int,long)>
<android.animation.LayoutTransition: long getDuration(int)>
<android.animation.LayoutTransition: void setStagger(int,long)>
<android.animation.LayoutTransition: long getStagger(int)>
<android.animation.LayoutTransition: void setInterpolator(int,android.animation.TimeInterpolator)>
<android.animation.LayoutTransition: android.animation.TimeInterpolator getInterpolator(int)>
<android.animation.LayoutTransition: void setAnimator(int,android.animation.Animator)>
<android.animation.LayoutTransition: android.animation.Animator getAnimator(int)>
<android.animation.LayoutTransition: void setAnimateParentHierarchy(boolean)>
<android.animation.LayoutTransition: boolean isChangingLayout()>
<android.animation.LayoutTransition: boolean isRunning()>
<android.animation.LayoutTransition: void addChild(android.view.ViewGroup,android.view.View)>
<android.animation.LayoutTransition: void showChild(android.view.ViewGroup,android.view.View)>
<android.animation.LayoutTransition: void showChild(android.view.ViewGroup,android.view.View,int)>
<android.animation.LayoutTransition: void removeChild(android.view.ViewGroup,android.view.View)>
<android.animation.LayoutTransition: void hideChild(android.view.ViewGroup,android.view.View)>
<android.animation.LayoutTransition: void hideChild(android.view.ViewGroup,android.view.View,int)>
<android.animation.LayoutTransition: void addTransitionListener(android.animation.LayoutTransition$TransitionListener)>
<android.animation.LayoutTransition: void removeTransitionListener(android.animation.LayoutTransition$TransitionListener)>
<android.animation.LayoutTransition: java.util.List getTransitionListeners()>
<android.view.animation.LayoutAnimationController: int getOrder()>
<android.view.animation.LayoutAnimationController: void setOrder(int)>
<android.view.animation.LayoutAnimationController: void setAnimation(android.content.Context,int)>
<android.view.animation.LayoutAnimationController: void setAnimation(android.view.animation.Animation)>
<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimation()>
<android.view.animation.LayoutAnimationController: void setInterpolator(android.content.Context,int)>
<android.view.animation.LayoutAnimationController: void setInterpolator(android.view.animation.Interpolator)>
<android.view.animation.LayoutAnimationController: android.view.animation.Interpolator getInterpolator()>
<android.view.animation.LayoutAnimationController: float getDelay()>
<android.view.animation.LayoutAnimationController: void setDelay(float)>
<android.view.animation.LayoutAnimationController: boolean willOverlap()>
<android.view.animation.LayoutAnimationController: void start()>
<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimationForView(android.view.View)>
<android.view.animation.LayoutAnimationController: boolean isDone()>
<android.view.animation.LayoutAnimationController: long getDelayForView(android.view.View)>
<android.view.animation.LayoutAnimationController: int getTransformedIndex(android.view.animation.LayoutAnimationController$AnimationParameters)>
<java.lang.Number: byte byteValue()>
<java.lang.Number: short shortValue()>
<android.view.ViewGroup$MarginLayoutParams: void setMargins(int,int,int,int)>
<android.view.InputDevice: android.view.InputDevice getDevice(int)>
<android.view.InputDevice: int[] getDeviceIds()>
<android.view.InputDevice: int getId()>
<android.view.InputDevice: java.lang.String getDescriptor()>
<android.view.InputDevice: boolean isVirtual()>
<android.view.InputDevice: java.lang.String getName()>
<android.view.InputDevice: int getSources()>
<android.view.InputDevice: int getKeyboardType()>
<android.view.InputDevice: android.view.KeyCharacterMap getKeyCharacterMap()>
<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int)>
<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int,int)>
<android.view.InputDevice: java.util.List getMotionRanges()>
<android.view.InputDevice: android.os.Vibrator getVibrator()>
<android.view.InputDevice: void writeToParcel(android.os.Parcel,int)>
<android.view.InputDevice: int describeContents()>
<android.view.InputDevice: java.lang.String toString()>
<android.os.Messenger: void send(android.os.Message)>
<android.os.Messenger: android.os.IBinder getBinder()>
<android.os.Messenger: boolean equals(java.lang.Object)>
<android.os.Messenger: int hashCode()>
<android.os.Messenger: int describeContents()>
<android.os.Messenger: void writeToParcel(android.os.Parcel,int)>
<android.os.Messenger: void writeMessengerOrNullToParcel(android.os.Messenger,android.os.Parcel)>
<android.os.Messenger: android.os.Messenger readMessengerOrNullFromParcel(android.os.Parcel)>
<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)>
<android.os.MessageQueue: void removeIdleHandler(android.os.MessageQueue$IdleHandler)>
<android.os.MessageQueue: void finalize()>
<java.lang.Thread: int activeCount()>
<java.lang.Thread: void checkAccess()>
<java.lang.Thread: int countStackFrames()>
<java.lang.Thread: java.lang.Thread currentThread()>
<java.lang.Thread: void destroy()>
<java.lang.Thread: void dumpStack()>
<java.lang.Thread: int enumerate(java.lang.Thread[])>
<java.lang.Thread: java.util.Map getAllStackTraces()>
<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>
<java.lang.Thread: long getId()>
<java.lang.Thread: java.lang.String getName()>
<java.lang.Thread: int getPriority()>
<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>
<java.lang.Thread: java.lang.Thread$State getState()>
<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>
<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>
<java.lang.Thread: void interrupt()>
<java.lang.Thread: boolean interrupted()>
<java.lang.Thread: boolean isAlive()>
<java.lang.Thread: boolean isDaemon()>
<java.lang.Thread: boolean isInterrupted()>
<java.lang.Thread: void join()>
<java.lang.Thread: void join(long)>
<java.lang.Thread: void join(long,int)>
<java.lang.Thread: void resume()>
<java.lang.Thread: void run()>
<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
<java.lang.Thread: void setDaemon(boolean)>
<java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>
<java.lang.Thread: void setName(java.lang.String)>
<java.lang.Thread: void setPriority(int)>
<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>
<java.lang.Thread: void sleep(long)>
<java.lang.Thread: void sleep(long,int)>
<java.lang.Thread: void stop()>
<java.lang.Thread: void stop(java.lang.Throwable)>
<java.lang.Thread: void suspend()>
<java.lang.Thread: java.lang.String toString()>
<java.lang.Thread: void yield()>
<java.lang.Thread: boolean holdsLock(java.lang.Object)>
<android.content.pm.PackageItemInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>
<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>
<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadLogo(android.content.pm.PackageManager)>
<android.content.pm.PackageItemInfo: android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager,java.lang.String)>
<android.content.pm.PackageItemInfo: void dumpFront(android.util.Printer,java.lang.String)>
<android.content.pm.PackageItemInfo: void dumpBack(android.util.Printer,java.lang.String)>
<android.content.pm.PackageItemInfo: void writeToParcel(android.os.Parcel,int)>
<java.nio.channels.FileChannel: java.nio.channels.FileLock lock()>
<java.nio.channels.FileChannel: long read(java.nio.ByteBuffer[])>
<java.nio.channels.FileChannel: java.nio.channels.FileLock tryLock()>
<java.nio.channels.FileChannel: long write(java.nio.ByteBuffer[])>
<android.database.sqlite.SQLiteClosable: void onAllReferencesReleasedFromContainer()>
<android.database.sqlite.SQLiteClosable: void acquireReference()>
<android.database.sqlite.SQLiteClosable: void releaseReference()>
<android.database.sqlite.SQLiteClosable: void releaseReferenceFromContainer()>
<android.database.sqlite.SQLiteClosable: void close()>
<android.database.sqlite.SQLiteStatement: void execute()>
<android.database.sqlite.SQLiteStatement: int executeUpdateDelete()>
<android.database.sqlite.SQLiteStatement: long executeInsert()>
<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>
<android.database.sqlite.SQLiteStatement: java.lang.String simpleQueryForString()>
<android.database.sqlite.SQLiteStatement: android.os.ParcelFileDescriptor simpleQueryForBlobFileDescriptor()>
<android.database.sqlite.SQLiteStatement: java.lang.String toString()>
<android.database.sqlite.SQLiteQuery: java.lang.String toString()>
<android.content.BroadcastReceiver$PendingResult: void setResultCode(int)>
<android.content.BroadcastReceiver$PendingResult: int getResultCode()>
<android.content.BroadcastReceiver$PendingResult: void setResultData(java.lang.String)>
<android.content.BroadcastReceiver$PendingResult: java.lang.String getResultData()>
<android.content.BroadcastReceiver$PendingResult: void setResultExtras(android.os.Bundle)>
<android.content.BroadcastReceiver$PendingResult: android.os.Bundle getResultExtras(boolean)>
<android.content.BroadcastReceiver$PendingResult: void setResult(int,java.lang.String,android.os.Bundle)>
<android.content.BroadcastReceiver$PendingResult: boolean getAbortBroadcast()>
<android.content.BroadcastReceiver$PendingResult: void abortBroadcast()>
<android.content.BroadcastReceiver$PendingResult: void clearAbortBroadcast()>
<android.content.BroadcastReceiver$PendingResult: void finish()>
<android.content.IntentFilter$AuthorityEntry: java.lang.String getHost()>
<android.content.IntentFilter$AuthorityEntry: int getPort()>
<android.content.IntentFilter$AuthorityEntry: int match(android.net.Uri)>
<android.os.PatternMatcher: java.lang.String getPath()>
<android.os.PatternMatcher: int getType()>
<android.os.PatternMatcher: boolean match(java.lang.String)>
<android.os.PatternMatcher: java.lang.String toString()>
<android.os.PatternMatcher: int describeContents()>
<android.os.PatternMatcher: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.PathPermission: java.lang.String getReadPermission()>
<android.content.pm.PathPermission: java.lang.String getWritePermission()>
<android.content.pm.PathPermission: void writeToParcel(android.os.Parcel,int)>
<java.net.Socket: void close()>
<java.net.Socket: java.net.InetAddress getInetAddress()>
<java.net.Socket: java.io.InputStream getInputStream()>
<java.net.Socket: boolean getKeepAlive()>
<java.net.Socket: java.net.InetAddress getLocalAddress()>
<java.net.Socket: int getLocalPort()>
<java.net.Socket: java.io.OutputStream getOutputStream()>
<java.net.Socket: int getPort()>
<java.net.Socket: int getSoLinger()>
<java.net.Socket: int getReceiveBufferSize()>
<java.net.Socket: int getSendBufferSize()>
<java.net.Socket: int getSoTimeout()>
<java.net.Socket: boolean getTcpNoDelay()>
<java.net.Socket: void setKeepAlive(boolean)>
<java.net.Socket: void setSocketImplFactory(java.net.SocketImplFactory)>
<java.net.Socket: void setSendBufferSize(int)>
<java.net.Socket: void setReceiveBufferSize(int)>
<java.net.Socket: void setSoLinger(boolean,int)>
<java.net.Socket: void setSoTimeout(int)>
<java.net.Socket: void setTcpNoDelay(boolean)>
<java.net.Socket: java.lang.String toString()>
<java.net.Socket: void shutdownInput()>
<java.net.Socket: void shutdownOutput()>
<java.net.Socket: java.net.SocketAddress getLocalSocketAddress()>
<java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()>
<java.net.Socket: boolean isBound()>
<java.net.Socket: boolean isConnected()>
<java.net.Socket: boolean isClosed()>
<java.net.Socket: void bind(java.net.SocketAddress)>
<java.net.Socket: boolean isInputShutdown()>
<java.net.Socket: boolean isOutputShutdown()>
<java.net.Socket: void setReuseAddress(boolean)>
<java.net.Socket: boolean getReuseAddress()>
<java.net.Socket: void setOOBInline(boolean)>
<java.net.Socket: boolean getOOBInline()>
<java.net.Socket: void setTrafficClass(int)>
<java.net.Socket: int getTrafficClass()>
<java.net.Socket: void sendUrgentData(int)>
<java.net.Socket: java.nio.channels.SocketChannel getChannel()>
<java.net.Socket: void setPerformancePreferences(int,int,int)>
<java.net.DatagramSocket: void close()>
<java.net.DatagramSocket: void disconnect()>
<java.net.DatagramSocket: java.net.InetAddress getInetAddress()>
<java.net.DatagramSocket: java.net.InetAddress getLocalAddress()>
<java.net.DatagramSocket: int getLocalPort()>
<java.net.DatagramSocket: int getPort()>
<java.net.DatagramSocket: int getReceiveBufferSize()>
<java.net.DatagramSocket: int getSendBufferSize()>
<java.net.DatagramSocket: int getSoTimeout()>
<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>
<java.net.DatagramSocket: void setSendBufferSize(int)>
<java.net.DatagramSocket: void setReceiveBufferSize(int)>
<java.net.DatagramSocket: void setSoTimeout(int)>
<java.net.DatagramSocket: void setDatagramSocketImplFactory(java.net.DatagramSocketImplFactory)>
<java.net.DatagramSocket: void bind(java.net.SocketAddress)>
<java.net.DatagramSocket: void connect(java.net.SocketAddress)>
<java.net.DatagramSocket: void connect(java.net.InetAddress,int)>
<java.net.DatagramSocket: boolean isBound()>
<java.net.DatagramSocket: boolean isConnected()>
<java.net.DatagramSocket: java.net.SocketAddress getRemoteSocketAddress()>
<java.net.DatagramSocket: java.net.SocketAddress getLocalSocketAddress()>
<java.net.DatagramSocket: void setReuseAddress(boolean)>
<java.net.DatagramSocket: boolean getReuseAddress()>
<java.net.DatagramSocket: void setBroadcast(boolean)>
<java.net.DatagramSocket: boolean getBroadcast()>
<java.net.DatagramSocket: void setTrafficClass(int)>
<java.net.DatagramSocket: int getTrafficClass()>
<java.net.DatagramSocket: boolean isClosed()>
<java.net.DatagramSocket: java.nio.channels.DatagramChannel getChannel()>
<java.lang.Short: byte byteValue()>
<java.lang.Short: int compareTo(java.lang.Short)>
<java.lang.Short: java.lang.Short decode(java.lang.String)>
<java.lang.Short: double doubleValue()>
<java.lang.Short: boolean equals(java.lang.Object)>
<java.lang.Short: float floatValue()>
<java.lang.Short: int hashCode()>
<java.lang.Short: int intValue()>
<java.lang.Short: long longValue()>
<java.lang.Short: short parseShort(java.lang.String)>
<java.lang.Short: short parseShort(java.lang.String,int)>
<java.lang.Short: short shortValue()>
<java.lang.Short: java.lang.String toString()>
<java.lang.Short: java.lang.String toString(short)>
<java.lang.Short: java.lang.Short valueOf(java.lang.String)>
<java.lang.Short: java.lang.Short valueOf(java.lang.String,int)>
<java.lang.Short: short reverseBytes(short)>
<java.lang.Short: java.lang.Short valueOf(short)>
<java.lang.Integer: int compareTo(java.lang.Integer)>
<java.lang.Integer: boolean equals(java.lang.Object)>
<java.lang.Integer: int highestOneBit(int)>
<java.lang.Integer: int lowestOneBit(int)>
<java.lang.Integer: int numberOfLeadingZeros(int)>
<java.lang.Integer: int numberOfTrailingZeros(int)>
<java.lang.Integer: int bitCount(int)>
<java.lang.Integer: int signum(int)>
<java.lang.Long: byte byteValue()>
<java.lang.Long: int compareTo(java.lang.Long)>
<java.lang.Long: java.lang.Long decode(java.lang.String)>
<java.lang.Long: double doubleValue()>
<java.lang.Long: boolean equals(java.lang.Object)>
<java.lang.Long: float floatValue()>
<java.lang.Long: java.lang.Long getLong(java.lang.String)>
<java.lang.Long: java.lang.Long getLong(java.lang.String,long)>
<java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)>
<java.lang.Long: int hashCode()>
<java.lang.Long: int intValue()>
<java.lang.Long: long longValue()>
<java.lang.Long: long parseLong(java.lang.String)>
<java.lang.Long: long parseLong(java.lang.String,int)>
<java.lang.Long: short shortValue()>
<java.lang.Long: java.lang.String toBinaryString(long)>
<java.lang.Long: java.lang.String toHexString(long)>
<java.lang.Long: java.lang.String toOctalString(long)>
<java.lang.Long: java.lang.String toString()>
<java.lang.Long: java.lang.String toString(long)>
<java.lang.Long: java.lang.String toString(long,int)>
<java.lang.Long: java.lang.Long valueOf(java.lang.String)>
<java.lang.Long: java.lang.Long valueOf(java.lang.String,int)>
<java.lang.Long: long highestOneBit(long)>
<java.lang.Long: long lowestOneBit(long)>
<java.lang.Long: int numberOfLeadingZeros(long)>
<java.lang.Long: int numberOfTrailingZeros(long)>
<java.lang.Long: int bitCount(long)>
<java.lang.Long: long rotateLeft(long,int)>
<java.lang.Long: long rotateRight(long,int)>
<java.lang.Long: long reverseBytes(long)>
<java.lang.Long: long reverse(long)>
<java.lang.Long: int signum(long)>
<java.lang.Long: java.lang.Long valueOf(long)>
<java.lang.Float: int compareTo(java.lang.Float)>
<java.lang.Float: byte byteValue()>
<java.lang.Float: double doubleValue()>
<java.lang.Float: boolean equals(java.lang.Object)>
<java.lang.Float: float floatValue()>
<java.lang.Float: int hashCode()>
<java.lang.Float: int intValue()>
<java.lang.Float: boolean isInfinite()>
<java.lang.Float: boolean isInfinite(float)>
<java.lang.Float: boolean isNaN()>
<java.lang.Float: boolean isNaN(float)>
<java.lang.Float: long longValue()>
<java.lang.Float: float parseFloat(java.lang.String)>
<java.lang.Float: short shortValue()>
<java.lang.Float: java.lang.String toString()>
<java.lang.Float: java.lang.String toString(float)>
<java.lang.Float: java.lang.Float valueOf(java.lang.String)>
<java.lang.Float: int compare(float,float)>
<java.lang.Float: java.lang.Float valueOf(float)>
<java.lang.Float: java.lang.String toHexString(float)>
<java.lang.Double: boolean equals(java.lang.Object)>
<java.lang.Double: boolean isInfinite()>
<java.lang.Double: boolean isInfinite(double)>
<java.lang.Double: boolean isNaN()>
<java.lang.Double: boolean isNaN(double)>
<java.lang.Boolean: boolean booleanValue()>
<java.lang.Boolean: boolean equals(java.lang.Object)>
<java.lang.Boolean: int compareTo(java.lang.Boolean)>
<java.lang.Boolean: int hashCode()>
<java.lang.Boolean: java.lang.String toString()>
<java.lang.Boolean: boolean getBoolean(java.lang.String)>
<java.lang.Boolean: boolean parseBoolean(java.lang.String)>
<java.lang.Boolean: java.lang.String toString(boolean)>
<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<java.util.AbstractCollection: boolean add(java.lang.Object)>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<java.util.AbstractCollection: void clear()>
<java.util.AbstractCollection: boolean contains(java.lang.Object)>
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>
<java.util.AbstractCollection: boolean isEmpty()>
<java.util.AbstractCollection: boolean remove(java.lang.Object)>
<java.util.AbstractCollection: boolean removeAll(java.util.Collection)>
<java.util.AbstractCollection: boolean retainAll(java.util.Collection)>
<java.util.AbstractCollection: java.lang.Object[] toArray()>
<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.AbstractCollection: java.lang.String toString()>
<android.content.pm.Signature: char[] toChars()>
<android.content.pm.Signature: char[] toChars(char[],int[])>
<android.content.pm.Signature: java.lang.String toCharsString()>
<android.content.pm.Signature: byte[] toByteArray()>
<android.content.pm.Signature: boolean equals(java.lang.Object)>
<android.content.pm.Signature: int hashCode()>
<android.content.pm.Signature: int describeContents()>
<android.content.pm.Signature: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ConfigurationInfo: java.lang.String toString()>
<android.content.pm.ConfigurationInfo: int describeContents()>
<android.content.pm.ConfigurationInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ConfigurationInfo: java.lang.String getGlEsVersion()>
<java.util.AbstractMap: void clear()>
<java.util.AbstractMap: boolean containsKey(java.lang.Object)>
<java.util.AbstractMap: boolean containsValue(java.lang.Object)>
<java.util.AbstractMap: boolean equals(java.lang.Object)>
<java.util.AbstractMap: java.lang.Object get(java.lang.Object)>
<java.util.AbstractMap: int hashCode()>
<java.util.AbstractMap: boolean isEmpty()>
<java.util.AbstractMap: java.util.Set keySet()>
<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.AbstractMap: void putAll(java.util.Map)>
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>
<java.util.AbstractMap: int size()>
<java.util.AbstractMap: java.lang.String toString()>
<java.util.AbstractMap: java.util.Collection values()>
<java.util.AbstractMap: java.lang.Object clone()>
<android.view.Surface: android.graphics.Canvas lockCanvas(android.graphics.Rect)>
<android.view.Surface: java.lang.String toString()>
<android.view.Surface: int describeContents()>
<android.view.Surface: void finalize()>
<java.util.Random: int next(int)>
<java.util.Random: boolean nextBoolean()>
<java.util.Random: void nextBytes(byte[])>
<java.util.Random: double nextDouble()>
<java.util.Random: float nextFloat()>
<java.util.Random: double nextGaussian()>
<java.util.Random: int nextInt()>
<java.util.Random: int nextInt(int)>
<java.util.Random: long nextLong()>
<java.util.Random: void setSeed(long)>
<android.view.InputDevice$MotionRange: int getAxis()>
<android.view.InputDevice$MotionRange: int getSource()>
<android.view.InputDevice$MotionRange: float getMin()>
<android.view.InputDevice$MotionRange: float getMax()>
<android.view.InputDevice$MotionRange: float getRange()>
<android.view.InputDevice$MotionRange: float getFlat()>
<android.view.InputDevice$MotionRange: float getFuzz()>
<java.lang.ThreadGroup: int activeCount()>
<java.lang.ThreadGroup: int activeGroupCount()>
<java.lang.ThreadGroup: boolean allowThreadSuspension(boolean)>
<java.lang.ThreadGroup: void checkAccess()>
<java.lang.ThreadGroup: void destroy()>
<java.lang.ThreadGroup: int enumerate(java.lang.Thread[])>
<java.lang.ThreadGroup: int enumerate(java.lang.Thread[],boolean)>
<java.lang.ThreadGroup: int enumerate(java.lang.ThreadGroup[])>
<java.lang.ThreadGroup: int enumerate(java.lang.ThreadGroup[],boolean)>
<java.lang.ThreadGroup: int getMaxPriority()>
<java.lang.ThreadGroup: java.lang.String getName()>
<java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>
<java.lang.ThreadGroup: void interrupt()>
<java.lang.ThreadGroup: boolean isDaemon()>
<java.lang.ThreadGroup: boolean isDestroyed()>
<java.lang.ThreadGroup: void list()>
<java.lang.ThreadGroup: boolean parentOf(java.lang.ThreadGroup)>
<java.lang.ThreadGroup: void resume()>
<java.lang.ThreadGroup: void setDaemon(boolean)>
<java.lang.ThreadGroup: void setMaxPriority(int)>
<java.lang.ThreadGroup: void stop()>
<java.lang.ThreadGroup: void suspend()>
<java.lang.ThreadGroup: java.lang.String toString()>
<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>
<java.nio.channels.spi.AbstractInterruptibleChannel: boolean isOpen()>
<java.nio.channels.spi.AbstractInterruptibleChannel: void close()>
<java.nio.channels.spi.AbstractInterruptibleChannel: void begin()>
<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>
<java.nio.channels.FileLock: java.nio.channels.FileChannel channel()>
<java.nio.channels.FileLock: long position()>
<java.nio.channels.FileLock: long size()>
<java.nio.channels.FileLock: boolean isShared()>
<java.nio.channels.FileLock: boolean overlaps(long,long)>
<java.nio.channels.FileLock: java.lang.String toString()>
<java.nio.MappedByteBuffer: boolean isLoaded()>
<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer load()>
<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer force()>
<java.nio.channels.FileChannel$MapMode: java.lang.String toString()>
<android.database.sqlite.SQLiteProgram: int getUniqueId()>
<android.database.sqlite.SQLiteProgram: void bindNull(int)>
<android.database.sqlite.SQLiteProgram: void bindLong(int,long)>
<android.database.sqlite.SQLiteProgram: void bindDouble(int,double)>
<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>
<android.database.sqlite.SQLiteProgram: void bindBlob(int,byte[])>
<android.database.sqlite.SQLiteProgram: void clearBindings()>
<android.database.sqlite.SQLiteProgram: void bindAllArgsAsStrings(java.lang.String[])>
<android.database.sqlite.SQLiteProgram: void onAllReferencesReleased()>
<java.net.SocketImpl: java.io.FileDescriptor getFileDescriptor()>
<java.net.SocketImpl: java.net.InetAddress getInetAddress()>
<java.net.SocketImpl: int getLocalPort()>
<java.net.SocketImpl: int getPort()>
<java.net.SocketImpl: java.lang.String toString()>
<java.net.SocketImpl: void shutdownInput()>
<java.net.SocketImpl: void shutdownOutput()>
<java.net.SocketImpl: boolean supportsUrgentData()>
<java.net.SocketImpl: void setPerformancePreferences(int,int,int)>
<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open()>
<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open(java.net.SocketAddress)>
<java.nio.channels.SocketChannel: int validOps()>
<java.nio.channels.SocketChannel: long read(java.nio.ByteBuffer[])>
<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[])>
<java.net.DatagramSocketImpl: java.io.FileDescriptor getFileDescriptor()>
<java.net.DatagramSocketImpl: int getLocalPort()>
<java.net.DatagramSocketImpl: void connect(java.net.InetAddress,int)>
<java.net.DatagramSocketImpl: void disconnect()>
<java.net.DatagramPacket: java.net.InetAddress getAddress()>
<java.net.DatagramPacket: byte[] getData()>
<java.net.DatagramPacket: int getLength()>
<java.net.DatagramPacket: int getOffset()>
<java.net.DatagramPacket: int getPort()>
<java.net.DatagramPacket: void setAddress(java.net.InetAddress)>
<java.net.DatagramPacket: void setLength(int)>
<java.net.DatagramPacket: void setPort(int)>
<java.net.DatagramPacket: java.net.SocketAddress getSocketAddress()>
<java.net.DatagramPacket: void setSocketAddress(java.net.SocketAddress)>
<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()>
<java.nio.channels.DatagramChannel: int validOps()>
<java.nio.channels.DatagramChannel: long read(java.nio.ByteBuffer[])>
<java.nio.channels.DatagramChannel: long write(java.nio.ByteBuffer[])>
<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener)>
<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)>
<android.graphics.SurfaceTexture: void updateTexImage()>
<android.graphics.SurfaceTexture: void detachFromGLContext()>
<android.graphics.SurfaceTexture: void attachToGLContext(int)>
<android.graphics.SurfaceTexture: void getTransformMatrix(float[])>
<android.graphics.SurfaceTexture: long getTimestamp()>
<android.graphics.SurfaceTexture: void release()>
<android.graphics.SurfaceTexture: void finalize()>
<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.spi.SelectorProvider provider()>
<java.nio.channels.spi.AbstractSelectableChannel: boolean isRegistered()>
<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey keyFor(java.nio.channels.Selector)>
<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int,java.lang.Object)>
<java.nio.channels.spi.AbstractSelectableChannel: void implCloseChannel()>
<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking()>
<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object blockingLock()>
<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>
<java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>
<java.nio.channels.spi.SelectorProvider: java.nio.channels.Channel inheritedChannel()>
<java.nio.channels.SelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int)>
<java.nio.channels.SelectionKey: java.lang.Object attach(java.lang.Object)>
<java.nio.channels.SelectionKey: java.lang.Object attachment()>
<java.nio.channels.SelectionKey: boolean isAcceptable()>
<java.nio.channels.SelectionKey: boolean isConnectable()>
<java.nio.channels.SelectionKey: boolean isReadable()>
<java.nio.channels.SelectionKey: boolean isWritable()>
<java.nio.channels.Selector: java.nio.channels.Selector open()>
<java.nio.channels.Pipe: java.nio.channels.Pipe open()>
<java.nio.channels.spi.AbstractSelector: void close()>
<java.nio.channels.spi.AbstractSelector: boolean isOpen()>
<java.nio.channels.spi.AbstractSelector: java.nio.channels.spi.SelectorProvider provider()>
<java.nio.channels.spi.AbstractSelector: java.util.Set cancelledKeys()>
<java.nio.channels.spi.AbstractSelector: void deregister(java.nio.channels.spi.AbstractSelectionKey)>
<java.nio.channels.spi.AbstractSelector: void begin()>
<java.nio.channels.spi.AbstractSelector: void end()>
<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel open()>
<java.nio.channels.ServerSocketChannel: int validOps()>
<java.nio.channels.Pipe$SinkChannel: int validOps()>
<java.nio.channels.Pipe$SourceChannel: int validOps()>
<java.nio.channels.spi.AbstractSelectionKey: boolean isValid()>
<java.nio.channels.spi.AbstractSelectionKey: void cancel()>
<java.net.ServerSocket: java.net.Socket accept()>
<java.net.ServerSocket: void close()>
<java.net.ServerSocket: java.net.InetAddress getInetAddress()>
<java.net.ServerSocket: int getLocalPort()>
<java.net.ServerSocket: int getSoTimeout()>
<java.net.ServerSocket: void implAccept(java.net.Socket)>
<java.net.ServerSocket: void setSocketFactory(java.net.SocketImplFactory)>
<java.net.ServerSocket: void setSoTimeout(int)>
<java.net.ServerSocket: java.lang.String toString()>
<java.net.ServerSocket: void bind(java.net.SocketAddress)>
<java.net.ServerSocket: void bind(java.net.SocketAddress,int)>
<java.net.ServerSocket: java.net.SocketAddress getLocalSocketAddress()>
<java.net.ServerSocket: boolean isBound()>
<java.net.ServerSocket: boolean isClosed()>
<java.net.ServerSocket: void setReuseAddress(boolean)>
<java.net.ServerSocket: boolean getReuseAddress()>
<java.net.ServerSocket: void setReceiveBufferSize(int)>
<java.net.ServerSocket: int getReceiveBufferSize()>
<java.net.ServerSocket: java.nio.channels.ServerSocketChannel getChannel()>
<java.net.ServerSocket: void setPerformancePreferences(int,int,int)>
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()>
<android.telephony.TelephonyManager: int getPhoneType()>
<android.telephony.TelephonyManager: boolean isNetworkRoaming()>
<android.telephony.TelephonyManager: int getNetworkType()>
<android.telephony.TelephonyManager: boolean hasIccCard()>
<android.telephony.TelephonyManager: int getSimState()>
<android.telephony.TelephonyManager: int getCallState()>
<android.telephony.TelephonyManager: int getDataActivity()>
<android.telephony.TelephonyManager: int getDataState()>
<android.location.LocationManager: java.util.List getAllProviders()>
<android.location.LocationManager: java.util.List getProviders(boolean)>
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>
<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)>
<android.location.LocationManager: void removeProximityAlert(android.app.PendingIntent)>
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>
<android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)>
<android.location.LocationManager: void removeTestProvider(java.lang.String)>
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)>
<android.location.LocationManager: void clearTestProviderLocation(java.lang.String)>
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)>
<android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)>
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>
<android.location.LocationManager: void clearTestProviderStatus(java.lang.String)>
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)>
<android.location.LocationManager: void removeGpsStatusListener(android.location.GpsStatus$Listener)>
<android.location.LocationManager: void removeNmeaListener(android.location.GpsStatus$NmeaListener)>
<android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)>
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
<android.content.Intent$FilterComparison: android.content.Intent getIntent()>
<android.content.Intent$FilterComparison: boolean equals(java.lang.Object)>
<android.content.Intent$FilterComparison: int hashCode()>
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>
<android.content.Intent$ShortcutIconResource: int describeContents()>
<android.content.Intent$ShortcutIconResource: void writeToParcel(android.os.Parcel,int)>
<android.content.Intent$ShortcutIconResource: java.lang.String toString()>
<android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>
<android.view.View$MeasureSpec: int getMode(int)>
<android.view.View$MeasureSpec: int getSize(int)>
<android.view.View$MeasureSpec: java.lang.String toString(int)>
<android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug$RecyclerTraceType,int[])>
<android.view.ViewDebug: void startRecyclerTracing(java.lang.String,android.view.View)>
<android.view.ViewDebug: void stopRecyclerTracing()>
<android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug$HierarchyTraceType)>
<android.view.ViewDebug: void startHierarchyTracing(java.lang.String,android.view.View)>
<android.view.ViewDebug: void stopHierarchyTracing()>
<android.view.ViewDebug: void dumpCapturedView(java.lang.String,java.lang.Object)>
<android.net.StampUri: boolean isHierarchical()>
<android.net.StampUri: boolean isOpaque()>
<android.net.StampUri: boolean isRelative()>
<android.net.StampUri: boolean isAbsolute()>
<android.net.StampUri: java.lang.String getScheme()>
<android.net.StampUri: java.lang.String getSchemeSpecificPart()>
<android.net.StampUri: java.lang.String getEncodedSchemeSpecificPart()>
<android.net.StampUri: java.lang.String getAuthority()>
<android.net.StampUri: java.lang.String getEncodedAuthority()>
<android.net.StampUri: java.lang.String getUserInfo()>
<android.net.StampUri: java.lang.String getEncodedUserInfo()>
<android.net.StampUri: java.lang.String getHost()>
<android.net.StampUri: int getPort()>
<android.net.StampUri: java.lang.String getPath()>
<android.net.StampUri: java.lang.String getEncodedPath()>
<android.net.StampUri: java.lang.String getQuery()>
<android.net.StampUri: java.lang.String getEncodedQuery()>
<android.net.StampUri: java.lang.String getFragment()>
<android.net.StampUri: java.lang.String getEncodedFragment()>
<android.net.StampUri: java.util.List getPathSegments()>
<android.net.StampUri: java.lang.String getLastPathSegment()>
<android.net.StampUri: boolean equals(java.lang.Object)>
<android.net.StampUri: int hashCode()>
<android.net.StampUri: int compareTo(android.net.Uri)>
<android.net.StampUri: java.lang.String toString()>
<android.net.StampUri: android.net.Uri$Builder buildUpon()>
<android.net.StampUri: void writeToParcel(android.os.Parcel,int)>
<android.net.StampUri: int describeContents()>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor)>
<android.test.mock.MockContentResolver: void addProvider(java.lang.String,android.content.ContentProvider)>
<android.test.mock.MockContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)>
<android.test.mock.MockContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.test.mock.MockContentProvider: java.lang.String getType(android.net.Uri)>
<android.test.mock.MockContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.test.mock.MockContentProvider: boolean onCreate()>
<android.test.mock.MockContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.test.mock.MockContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])>
<android.test.mock.MockContentProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>
<android.test.mock.MockContentProvider: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)>
<android.test.mock.MockContentProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>
<android.test.mock.MockContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>
<java.util.ArrayList$ArrayListIterator: boolean hasNext()>
<java.util.ArrayList$ArrayListIterator: void remove()>
<android.content.Loader$ForceLoadContentObserver: boolean deliverSelfNotifications()>
<android.content.Loader$ForceLoadContentObserver: void onChange(boolean)>
<android.content.res.AssetManager$AssetInputStream: int getAssetInt()>
<android.content.res.AssetManager$AssetInputStream: int read()>
<android.content.res.AssetManager$AssetInputStream: boolean markSupported()>
<android.content.res.AssetManager$AssetInputStream: int available()>
<android.content.res.AssetManager$AssetInputStream: void close()>
<android.content.res.AssetManager$AssetInputStream: void mark(int)>
<android.content.res.AssetManager$AssetInputStream: void reset()>
<android.content.res.AssetManager$AssetInputStream: int read(byte[])>
<android.content.res.AssetManager$AssetInputStream: int read(byte[],int,int)>
<android.content.res.AssetManager$AssetInputStream: long skip(long)>
<android.content.res.AssetManager$AssetInputStream: void finalize()>
<android.content.pm.ApplicationInfo$DisplayNameComparator: int compare(android.content.pm.ApplicationInfo,android.content.pm.ApplicationInfo)>
<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void close()>
<android.os.ParcelFileDescriptor$AutoCloseInputStream: void close()>
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[],int,int)>
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[])>
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(int)>
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int available()>
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read()>
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[],int,int)>
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[])>
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: long skip(long)>
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: void mark(int)>
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: boolean markSupported()>
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: void reset()>
<android.content.pm.ResolveInfo$DisplayNameComparator: int compare(android.content.pm.ResolveInfo,android.content.pm.ResolveInfo)>
<android.content.pm.PackageItemInfo$DisplayNameComparator: int compare(android.content.pm.PackageItemInfo,android.content.pm.PackageItemInfo)>
<java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
<java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
<java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object setValue(java.lang.Object)>
<java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
<java.util.AbstractMap$SimpleImmutableEntry: java.lang.String toString()>
<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>
<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>
<java.util.AbstractMap$SimpleEntry: java.lang.Object setValue(java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: boolean equals(java.lang.Object)>
<java.util.AbstractMap$SimpleEntry: int hashCode()>
<java.util.AbstractMap$SimpleEntry: java.lang.String toString()>
<android.telephony.cdma.CdmaCellLocation: void setStateInvalid()>
<android.telephony.cdma.CdmaCellLocation: void setCellLocationData(int,int,int)>
<android.telephony.cdma.CdmaCellLocation: void setCellLocationData(int,int,int,int,int)>
<android.telephony.cdma.CdmaCellLocation: int hashCode()>
<android.telephony.cdma.CdmaCellLocation: boolean equals(java.lang.Object)>
<android.telephony.cdma.CdmaCellLocation: java.lang.String toString()>
<android.telephony.cdma.CdmaCellLocation: void fillInNotifierBundle(android.os.Bundle)>
<android.telephony.CellLocation: void requestLocationUpdate()>
<android.telephony.CellLocation: android.telephony.CellLocation getEmpty()>
<android.telephony.PhoneStateListener: void onServiceStateChanged(android.telephony.ServiceState)>
<android.telephony.PhoneStateListener: void onSignalStrengthChanged(int)>
<android.telephony.PhoneStateListener: void onMessageWaitingIndicatorChanged(boolean)>
<android.telephony.PhoneStateListener: void onCallForwardingIndicatorChanged(boolean)>
<android.telephony.PhoneStateListener: void onCellLocationChanged(android.telephony.CellLocation)>
<android.telephony.PhoneStateListener: void onCallStateChanged(int,java.lang.String)>
<android.telephony.PhoneStateListener: void onDataConnectionStateChanged(int)>
<android.telephony.PhoneStateListener: void onDataConnectionStateChanged(int,int)>
<android.telephony.PhoneStateListener: void onDataActivity(int)>
<android.telephony.PhoneStateListener: void onSignalStrengthsChanged(android.telephony.SignalStrength)>
<android.telephony.gsm.GsmCellLocation: void setStateInvalid()>
<android.telephony.gsm.GsmCellLocation: void setLacAndCid(int,int)>
<android.telephony.gsm.GsmCellLocation: int hashCode()>
<android.telephony.gsm.GsmCellLocation: boolean equals(java.lang.Object)>
<android.telephony.gsm.GsmCellLocation: java.lang.String toString()>
<android.telephony.gsm.GsmCellLocation: void fillInNotifierBundle(android.os.Bundle)>
<android.location.LocationProvider: java.lang.String getName()>
<android.location.LocationProvider: boolean meetsCriteria(android.location.Criteria)>
<android.location.Criteria: void setHorizontalAccuracy(int)>
<android.location.Criteria: int getHorizontalAccuracy()>
<android.location.Criteria: void setVerticalAccuracy(int)>
<android.location.Criteria: int getVerticalAccuracy()>
<android.location.Criteria: void setSpeedAccuracy(int)>
<android.location.Criteria: int getSpeedAccuracy()>
<android.location.Criteria: void setBearingAccuracy(int)>
<android.location.Criteria: int getBearingAccuracy()>
<android.location.Criteria: void setAccuracy(int)>
<android.location.Criteria: int getAccuracy()>
<android.location.Criteria: void setPowerRequirement(int)>
<android.location.Criteria: int getPowerRequirement()>
<android.location.Criteria: void setCostAllowed(boolean)>
<android.location.Criteria: boolean isCostAllowed()>
<android.location.Criteria: void setAltitudeRequired(boolean)>
<android.location.Criteria: boolean isAltitudeRequired()>
<android.location.Criteria: void setSpeedRequired(boolean)>
<android.location.Criteria: boolean isSpeedRequired()>
<android.location.Criteria: void setBearingRequired(boolean)>
<android.location.Criteria: boolean isBearingRequired()>
<android.location.Criteria: int describeContents()>
<android.location.Criteria: void writeToParcel(android.os.Parcel,int)>
<android.location.Location: void dump(android.util.Printer,java.lang.String)>
<android.location.Location: void set(android.location.Location)>
<android.location.Location: void reset()>
<android.location.Location: java.lang.String convert(double,int)>
<android.location.Location: double convert(java.lang.String)>
<android.location.Location: void distanceBetween(double,double,double,double,float[])>
<android.location.Location: float distanceTo(android.location.Location)>
<android.location.Location: float bearingTo(android.location.Location)>
<android.location.Location: java.lang.String getProvider()>
<android.location.Location: void setProvider(java.lang.String)>
<android.location.Location: long getTime()>
<android.location.Location: void setTime(long)>
<android.location.Location: void setLatitude(double)>
<android.location.Location: void setLongitude(double)>
<android.location.Location: boolean hasAltitude()>
<android.location.Location: double getAltitude()>
<android.location.Location: void setAltitude(double)>
<android.location.Location: void removeAltitude()>
<android.location.Location: boolean hasSpeed()>
<android.location.Location: float getSpeed()>
<android.location.Location: void setSpeed(float)>
<android.location.Location: void removeSpeed()>
<android.location.Location: boolean hasBearing()>
<android.location.Location: float getBearing()>
<android.location.Location: void setBearing(float)>
<android.location.Location: void removeBearing()>
<android.location.Location: boolean hasAccuracy()>
<android.location.Location: float getAccuracy()>
<android.location.Location: void setAccuracy(float)>
<android.location.Location: void removeAccuracy()>
<android.location.Location: android.os.Bundle getExtras()>
<android.location.Location: void setExtras(android.os.Bundle)>
<android.location.Location: int describeContents()>
<android.location.Location: void writeToParcel(android.os.Parcel,int)>
<android.location.GpsStatus: int getTimeToFirstFix()>
<android.location.GpsStatus: java.lang.Iterable getSatellites()>
<android.location.GpsStatus: int getMaxSatellites()>
<android.view.AbsSavedState: android.os.Parcelable getSuperState()>
<android.view.AbsSavedState: int describeContents()>
<android.view.AbsSavedState: void writeToParcel(android.os.Parcel,int)>
<android.test.mock.MockCursor: int getColumnCount()>
<android.test.mock.MockCursor: int getColumnIndex(java.lang.String)>
<android.test.mock.MockCursor: int getColumnIndexOrThrow(java.lang.String)>
<android.test.mock.MockCursor: java.lang.String getColumnName(int)>
<android.test.mock.MockCursor: java.lang.String[] getColumnNames()>
<android.test.mock.MockCursor: int getCount()>
<android.test.mock.MockCursor: boolean isNull(int)>
<android.test.mock.MockCursor: int getInt(int)>
<android.test.mock.MockCursor: long getLong(int)>
<android.test.mock.MockCursor: short getShort(int)>
<android.test.mock.MockCursor: float getFloat(int)>
<android.test.mock.MockCursor: double getDouble(int)>
<android.test.mock.MockCursor: byte[] getBlob(int)>
<android.test.mock.MockCursor: android.os.Bundle getExtras()>
<android.test.mock.MockCursor: int getPosition()>
<android.test.mock.MockCursor: boolean isAfterLast()>
<android.test.mock.MockCursor: boolean isBeforeFirst()>
<android.test.mock.MockCursor: boolean isFirst()>
<android.test.mock.MockCursor: boolean isLast()>
<android.test.mock.MockCursor: boolean move(int)>
<android.test.mock.MockCursor: boolean moveToFirst()>
<android.test.mock.MockCursor: boolean moveToLast()>
<android.test.mock.MockCursor: boolean moveToNext()>
<android.test.mock.MockCursor: boolean moveToPrevious()>
<android.test.mock.MockCursor: boolean moveToPosition(int)>
<android.test.mock.MockCursor: void copyStringToBuffer(int,android.database.CharArrayBuffer)>
<android.test.mock.MockCursor: void deactivate()>
<android.test.mock.MockCursor: void close()>
<android.test.mock.MockCursor: boolean isClosed()>
<android.test.mock.MockCursor: boolean requery()>
<android.test.mock.MockCursor: void registerContentObserver(android.database.ContentObserver)>
<android.test.mock.MockCursor: void registerDataSetObserver(android.database.DataSetObserver)>
<android.test.mock.MockCursor: android.os.Bundle respond(android.os.Bundle)>
<android.test.mock.MockCursor: boolean getWantsAllOnMoveCalls()>
<android.test.mock.MockCursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>
<android.test.mock.MockCursor: void unregisterContentObserver(android.database.ContentObserver)>
<android.test.mock.MockCursor: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.test.mock.MockCursor: int getType(int)>
<android.telephony.SignalStrength: void writeToParcel(android.os.Parcel,int)>
<android.telephony.SignalStrength: int describeContents()>
<android.telephony.SignalStrength: int getGsmSignalStrength()>
<android.telephony.SignalStrength: int getGsmBitErrorRate()>
<android.telephony.SignalStrength: int getCdmaDbm()>
<android.telephony.SignalStrength: int getCdmaEcio()>
<android.telephony.SignalStrength: int getEvdoDbm()>
<android.telephony.SignalStrength: int getEvdoEcio()>
<android.telephony.SignalStrength: int getEvdoSnr()>
<android.telephony.SignalStrength: boolean isGsm()>
<android.telephony.SignalStrength: int hashCode()>
<android.telephony.SignalStrength: boolean equals(java.lang.Object)>
<android.telephony.SignalStrength: java.lang.String toString()>
<android.telephony.ServiceState: void copyFrom(android.telephony.ServiceState)>
<android.telephony.ServiceState: void writeToParcel(android.os.Parcel,int)>
<android.telephony.ServiceState: int describeContents()>
<android.telephony.ServiceState: int getState()>
<android.telephony.ServiceState: boolean getRoaming()>
<android.telephony.ServiceState: java.lang.String getOperatorAlphaLong()>
<android.telephony.ServiceState: java.lang.String getOperatorAlphaShort()>
<android.telephony.ServiceState: java.lang.String getOperatorNumeric()>
<android.telephony.ServiceState: boolean getIsManualSelection()>
<android.telephony.ServiceState: int hashCode()>
<android.telephony.ServiceState: boolean equals(java.lang.Object)>
<android.telephony.ServiceState: java.lang.String toString()>
<android.telephony.ServiceState: void setStateOutOfService()>
<android.telephony.ServiceState: void setStateOff()>
<android.telephony.ServiceState: void setState(int)>
<android.telephony.ServiceState: void setRoaming(boolean)>
<android.telephony.ServiceState: void setOperatorName(java.lang.String,java.lang.String,java.lang.String)>
<android.telephony.ServiceState: void setIsManualSelection(boolean)>
<java.lang.Character: char charValue()>
<java.lang.Character: int compareTo(java.lang.Character)>
<java.lang.Character: java.lang.Character valueOf(char)>
<java.lang.Character: boolean isValidCodePoint(int)>
<java.lang.Character: boolean isSupplementaryCodePoint(int)>
<java.lang.Character: boolean isHighSurrogate(char)>
<java.lang.Character: boolean isLowSurrogate(char)>
<java.lang.Character: boolean isSurrogatePair(char,char)>
<java.lang.Character: int charCount(int)>
<java.lang.Character: int toCodePoint(char,char)>
<java.lang.Character: int codePointAt(java.lang.CharSequence,int)>
<java.lang.Character: int codePointAt(char[],int)>
<java.lang.Character: int codePointAt(char[],int,int)>
<java.lang.Character: int codePointBefore(java.lang.CharSequence,int)>
<java.lang.Character: int codePointBefore(char[],int)>
<java.lang.Character: int codePointBefore(char[],int,int)>
<java.lang.Character: int toChars(int,char[],int)>
<java.lang.Character: char[] toChars(int)>
<java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>
<java.lang.Character: int codePointCount(char[],int,int)>
<java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)>
<java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)>
<java.lang.Character: int digit(char,int)>
<java.lang.Character: int digit(int,int)>
<java.lang.Character: boolean equals(java.lang.Object)>
<java.lang.Character: char forDigit(int,int)>
<java.lang.Character: int getNumericValue(char)>
<java.lang.Character: int getNumericValue(int)>
<java.lang.Character: int getType(char)>
<java.lang.Character: int getType(int)>
<java.lang.Character: byte getDirectionality(char)>
<java.lang.Character: byte getDirectionality(int)>
<java.lang.Character: boolean isMirrored(char)>
<java.lang.Character: boolean isMirrored(int)>
<java.lang.Character: int hashCode()>
<java.lang.Character: boolean isDefined(char)>
<java.lang.Character: boolean isDefined(int)>
<java.lang.Character: boolean isDigit(char)>
<java.lang.Character: boolean isDigit(int)>
<java.lang.Character: boolean isIdentifierIgnorable(char)>
<java.lang.Character: boolean isIdentifierIgnorable(int)>
<java.lang.Character: boolean isISOControl(char)>
<java.lang.Character: boolean isISOControl(int)>
<java.lang.Character: boolean isJavaIdentifierPart(char)>
<java.lang.Character: boolean isJavaIdentifierPart(int)>
<java.lang.Character: boolean isJavaIdentifierStart(char)>
<java.lang.Character: boolean isJavaIdentifierStart(int)>
<java.lang.Character: boolean isJavaLetter(char)>
<java.lang.Character: boolean isJavaLetterOrDigit(char)>
<java.lang.Character: boolean isLetter(char)>
<java.lang.Character: boolean isLetter(int)>
<java.lang.Character: boolean isLetterOrDigit(char)>
<java.lang.Character: boolean isLetterOrDigit(int)>
<java.lang.Character: boolean isLowerCase(char)>
<java.lang.Character: boolean isLowerCase(int)>
<java.lang.Character: boolean isSpace(char)>
<java.lang.Character: boolean isSpaceChar(char)>
<java.lang.Character: boolean isSpaceChar(int)>
<java.lang.Character: boolean isTitleCase(char)>
<java.lang.Character: boolean isTitleCase(int)>
<java.lang.Character: boolean isUnicodeIdentifierPart(char)>
<java.lang.Character: boolean isUnicodeIdentifierPart(int)>
<java.lang.Character: boolean isUnicodeIdentifierStart(char)>
<java.lang.Character: boolean isUnicodeIdentifierStart(int)>
<java.lang.Character: boolean isUpperCase(char)>
<java.lang.Character: boolean isUpperCase(int)>
<java.lang.Character: boolean isWhitespace(char)>
<java.lang.Character: boolean isWhitespace(int)>
<java.lang.Character: char reverseBytes(char)>
<java.lang.Character: char toLowerCase(char)>
<java.lang.Character: int toLowerCase(int)>
<java.lang.Character: java.lang.String toString()>
<java.lang.Character: java.lang.String toString(char)>
<java.lang.Character: char toTitleCase(char)>
<java.lang.Character: int toTitleCase(int)>
<java.lang.Character: char toUpperCase(char)>
<java.lang.Character: int toUpperCase(int)>
<java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock forName(java.lang.String)>
<java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock of(char)>
<java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock of(int)>
<java.lang.Character$Subset: boolean equals(java.lang.Object)>
<java.lang.Character$Subset: int hashCode()>
<java.lang.Character$Subset: java.lang.String toString()>
<java.lang.ExceptionInInitializerError: java.lang.Throwable getException()>
<java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()>
