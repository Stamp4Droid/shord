# Field-sensitive, k-CFA-based, heap-flow-based, taint-flow-based taint
# analysis.

# Compared to T2.java.cfg, infers sources and sinks (e.g. G1 + T3)

# Not handling:
# - Nested passthrough taint
# - ...

# Points-to rules
R1[f] :: cs_refStore[f] _FlowsTo
R2[f] :: FlowsTo cs_refLoad[f]
R3 :: R1[f] R2[f]

FlowsTo :: cs_refAlloc
         | FlowsTo cs_refAssign
         | FlowsTo cs_refAssignArg
         | FlowsTo cs_refAssignRet
         | FlowsTo R3

# Basic taint propagation rules
Src2Obj :: cs_srcRefFlow _FlowsTo
	  | cs_srcFlowStub _FlowsTo

R4[f] :: cs_primStore[f] _FlowsTo
R5[f] :: FlowsTo cs_primLoad[f]
R6 :: R4[f] R5[f]

Src2Prim :: cs_srcPrimFlow
	  | cs_primSrcFlowStub
          | Src2Prim cs_primAssign
          | Src2Prim cs_primAssignArg
          | Src2Prim cs_primAssignRet
          | Src2Prim R6
	  | Src2Obj R5[*]

Obj2Sink :: FlowsTo cs_refSinkFlow
	  | FlowsTo cs_sinkFlowStub

# Passthrough handling
Src2Ref :: Src2Obj FlowsTo

Src2Obj :: Src2Ref cs_refRefFlow _FlowsTo
	 | Src2Ref cs_passThroughStub _FlowsTo
         | Src2Prim cs_primRefFlow _FlowsTo
	 | Src2Prim cs_primRefFlowStub _FlowsTo

Src2Prim :: Src2Prim cs_primPrimFlow
	  | Src2Prim cs_primPassThroughStub
          | Src2Ref cs_refPrimFlow
	  | Src2Ref cs_refPrimFlowStub

# Nested taint rules
# o tainted => o.* tainted
InstFldPt :: _R1[*] _FlowsTo
Src2Obj :: Src2Obj InstFldPt

# o escapes => o.* escapes
Obj2Sink :: _InstFldPt Obj2Sink

Src2Sink :: Src2Prim R4[*] Obj2Sink
          | Src2Obj Obj2Sink
          | Src2Prim cs_primSinkFlow
	  | Src2Prim cs_primSinkFlowStub

.output Src2Sink
.weights cs_passThroughStub 1 cs_primRefFlowStub 1 cs_primPassThroughStub 1 cs_refPrimFlowStub 1
.weights cs_srcFlowStub 10 cs_sinkFlowStub 10 cs_primSrcFlowStub 10 cs_primSinkFlowStub 10
