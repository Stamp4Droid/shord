# name=contextify-dlog

.include "M.dom"
.include "I.dom"
.include "V.dom"
.include "C.dom"
.include "F.dom"
.include "H.dom"
.include "Z.dom"
.include "U.dom"
.include "SRC.dom"
.include "SINK.dom"

.bddvarorder F0_I0xM0_V0xV1_H0_C0xC1_Z0_Z1_U0xU1_SRC0_SINK0

## INPUT RELATIONS ============================================================

# Assignment operations - reference-type variables
MobjValAsgnInst(m:M,l:V,h:H) input
MobjVarAsgnInst(m:M,l:V,r:V) input
MgetInstFldInst(m:M,l:V,b:V,f:F) input
MputInstFldInst(m:M,b:V,f:F,r:V) input
MgetStatFldInst(m:M,l:V,f:F) input
MputStatFldInst(m:M,f:F,r:V) input

# Method call information - reference-type variables
MmethArg(m:M0,z:Z0,v:V0) input
MmethRet(m:M0,z:Z0,v:V1) input
IinvkRet(i:I0,n:Z0,v:V0) input
IinvkArg(i:I0,n:Z0,v:V1) input

# Assignment operations - primitive-type variables
MprimDataDep(m:M0,l:U0,r:U1) input
MgetInstFldPrimInst(m:M0,l:U0,b:V0,f:F0) input
MputInstFldPrimInst(m:M0,b:V0,f:F0,r:U0) input
MgetStatFldPrimInst(m:M0,l:U0,f:F0) input
MputStatFldPrimInst(m:M0,f:F0,r:U0) input

# Method calls - primitive-type variables
MmethPrimArg(m:M0,z:Z0,u:U0) input
MmethPrimRet(m:M0,z:Z0,u:U0) input
IinvkPrimRet(i:I0,n:Z0,u:U0) input
IinvkPrimArg(i:I0,n:Z0,u:U0) input

# Calling context information
chaIM(i:I,m:M) input
CtxtCtxt(c:C,d:C) input # d = [* c]
CtxtInvki(c:C,i:I) input # c = [i ...]
MethCtxt(c:C,m:M) input
CtxtAbsObj(c:C,h:H) input

# Flow annotations
SrcRetFlow(src:SRC0,m:M0) input
SrcArgFlow(src:SRC0,m:M0,z:Z0) input
ArgSinkFlow(m:M0,z:Z0,sink:SINK0) input
ArgRetFlow(m:M0,z:Z0) input
ArgArgFlow(m:M0,z0:Z0,z1:Z1) input

## INTERMEDIATE RELATIONS =====================================================

cfl_cs_retCopy(i:I,u:V,m:M,v:V)
cfl_cs_argCopy(i:I,u:V,m:M,v:V)

cfl_cs_primRetCopy(i:I,u:U,m:M,v:U)
cfl_cs_primArgCopy(i:I,u:U,m:M,v:U)

## OUTPUT RELATIONS ===========================================================

# Call graph calculation
cfl_cs_callEdges(c:C,i:I,d:C,m:M) output # in context c, call site i can call method m in context d

# Program facts - reference-type variables
cfl_cs_alloc(c:C,l:V,o:C) output
cfl_cs_assign(c:C,l:V,r:V) output
cfl_cs_loadInst(c:C,l:V,b:V,f:F) output
cfl_cs_loadStat(c:C,l:V,f:F) output
cfl_cs_storeInst(c:C,b:V,f:F,r:V) output
cfl_cs_storeStat(c:C,f:F,r:V) output

cfl_cs_assignInterproc(c:C0,u:V0,d:C1,v:V1) output

# Taint flow facts - reference-type variables
cfl_cs_srcFlow(c:C,src:SRC0,v:V0) output
cfl_cs_fullSrcFlow(c:C,src:SRC0,v:V0) output
cfl_cs_sinkFlow(c:C,v:V0,sink:SINK0) output
cfl_cs_fullSinkFlow(c:C,v:V0,sink:SINK0) output
cfl_cs_passThrough(c:C,v0:V0,v1:V1) output
cfl_cs_fullPassThrough(c:C,v0:V0,v1:V1) output

# Program facts - primitive-type variables
cfl_cs_primAssign(c:C,l:U,r:U) output
cfl_cs_primLoadInst(c:C,l:U,b:V,f:F) output
cfl_cs_primLoadStat(c:C,l:U,f:F) output
cfl_cs_primStoreInst(c:C,b:V,f:F,r:U) output
cfl_cs_primStoreStat(c:C,f:F,r:U) output

cfl_cs_primAssignInterproc(cl:C0,l:U0,cr:C1,r:U1) output

# Taint flow facts - primitive-type variables
cfl_cs_primSrcFlow(c:C,src:SRC,u:U) output
cfl_cs_primFullSrcFlow(c:C,src:SRC,u:U) output
cfl_cs_primSinkFlow(c:C,u:U,sink:SINK) output
cfl_cs_primFullSinkFlow(c:C,u:U,sink:SINK) output
cfl_cs_primPassThrough(c:C,u0:U0,u1:U1) output
cfl_cs_primFullPassThrough(c:C,u0:U0,u1:U1) output

# Taint flow facts - cross-type passthroughs
cfl_cs_primRefFlow(c:C,u:U,v:V) output
cfl_cs_primRefFullFlow(c:C,u:U,v:V) output
cfl_cs_refPrimFlow(c:C,v:V,u:U) output
cfl_cs_refPrimFullFlow(c:C,v:V,u:U) output

## RULES ======================================================================

# Call graph calculation
# Don't need to add MethCtxt here, because it's already taken into
# consideration when building the relations.
cfl_cs_callEdges(c,i,d,m) :- chaIM(i,m), CtxtCtxt(c,d), CtxtInvki(d,i).

#------------------------------------------
# Program facts - reference-type variables
#------------------------------------------

cfl_cs_alloc(c,l,d)             :- MethCtxt(c,m), MobjValAsgnInst(m,l,h), CtxtCtxt(c,d), CtxtAbsObj(d,h).
cfl_cs_assign(c,l,r)            :- MethCtxt(c,m), MobjVarAsgnInst(m,l,r).

cfl_cs_loadInst(c,l,b,f)        :- MethCtxt(c,m), MgetInstFldInst(m,l,b,f).
cfl_cs_loadStat(c,l,f)          :- MethCtxt(c,m), MgetStatFldInst(m,l,f).
cfl_cs_storeInst(c,b,f,r)       :- MethCtxt(c,m), MputInstFldInst(m,b,f,r).
cfl_cs_storeStat(c,f,r)         :- MethCtxt(c,m), MputStatFldInst(m,f,r).

cfl_cs_argCopy(i,u,m,v)         :- chaIM(i,m), IinvkArg(i,z,u), MmethArg(m,z,v).
cfl_cs_retCopy(i,u,m,v)         :- chaIM(i,m), IinvkRet(i,z,u), MmethRet(m,z,v).

cfl_cs_assignInterproc(d,v,c,u) :- cfl_cs_argCopy(i,u,m,v), cfl_cs_callEdges(c,i,d,m).
cfl_cs_assignInterproc(c,u,d,v) :- cfl_cs_retCopy(i,u,m,v), cfl_cs_callEdges(c,i,d,m).

#----------------------------------------------
# Taint flow facts - reference-type variables
#----------------------------------------------

cfl_cs_srcFlow(c,src,v)         :- SrcRetFlow(src,m), MmethRet(m,_,v), MethCtxt(c,m).
cfl_cs_fullSrcFlow(c,src,v)     :- SrcRetFlow(src,m), cfl_cs_callEdges(c,i,_,m), IinvkRet(i,_,v).
cfl_cs_srcFlow(c,src,v)         :- SrcArgFlow(src,m,z), MmethArg(m,z,v), MethCtxt(c,m).
cfl_cs_fullSrcFlow(c,src,v)     :- SrcArgFlow(src,m,z), cfl_cs_callEdges(c,i,_,m), IinvkArg(i,z,v).

cfl_cs_sinkFlow(c,v,sink)       :- ArgSinkFlow(m,z,sink), MmethArg(m,z,v), MethCtxt(c,m).
cfl_cs_fullSinkFlow(c,v,sink)   :- ArgSinkFlow(m,z,sink), cfl_cs_callEdges(c,i,_,m), IinvkArg(i,z,v).

cfl_cs_passThrough(c,v1,v2)     :- ArgRetFlow(m,z), MmethArg(m,z,v1), MmethRet(m,_,v2), MethCtxt(c,m).
cfl_cs_fullPassThrough(c,v1,v2) :- ArgRetFlow(m,z), cfl_cs_callEdges(c,i,_,m), IinvkArg(i,z,v1), IinvkRet(i,_,v2).
cfl_cs_passThrough(c,v1,v2)     :- ArgArgFlow(m,z1,z2), MmethArg(m,z1,v1), MmethArg(m,z2,v2), MethCtxt(c,m).
cfl_cs_fullPassThrough(c,v1,v2) :- ArgArgFlow(m,z1,z2), cfl_cs_callEdges(c,i,_,m), IinvkArg(i,z1,v1), IinvkArg(i,z2,v2).


#-------------------------------------------------------
# Program facts - primitive-type variables
# This covers assignments, binary and unary operations:
#-------------------------------------------------------

cfl_cs_primAssign(c,l,r)            :- MethCtxt(c,m), MprimDataDep(m,l,r).
# TODO: Should also include PrimRefDep, for primitive-reference dependencies, e.g. ArrayLength, CheckCast etc.?

cfl_cs_primLoadInst(c,l,b,f)        :- MethCtxt(c,m), MgetInstFldPrimInst(m,l,b,f).
cfl_cs_primLoadStat(c,l,f)          :- MethCtxt(c,m), MgetStatFldPrimInst(m,l,f).
cfl_cs_primStoreInst(c,b,f,r)       :- MethCtxt(c,m), MputInstFldPrimInst(m,b,f,r).
cfl_cs_primStoreStat(c,f,r)         :- MethCtxt(c,m), MputStatFldPrimInst(m,f,r).

cfl_cs_primArgCopy(i,u,m,v)         :- chaIM(i,m), IinvkPrimArg(i,z,u), MmethPrimArg(m,z,v).
cfl_cs_primRetCopy(i,u,m,v)         :- chaIM(i,m), IinvkPrimRet(i,z,u), MmethPrimRet(m,z,v).

cfl_cs_primAssignInterproc(d,v,c,u) :- cfl_cs_primArgCopy(i,u,m,v), cfl_cs_callEdges(c,i,d,m).
cfl_cs_primAssignInterproc(c,u,d,v) :- cfl_cs_primRetCopy(i,u,m,v), cfl_cs_callEdges(c,i,d,m).

#---------------------------------------------
# Taint flow facts - primitive-type variables
#---------------------------------------------

cfl_cs_primSrcFlow(c,src,u)         :- SrcRetFlow(src,m), MmethPrimRet(m,_,u), MethCtxt(c,m).
cfl_cs_primFullSrcFlow(c,src,u)     :- SrcRetFlow(src,m), cfl_cs_callEdges(c,i,_,m), IinvkPrimRet(i,_,u).
# We don't consider src-to-arg flows. Primitive-type arguments are passed by
# value, so taint can't flow out through them.

cfl_cs_primSinkFlow(c,u,sink)       :- ArgSinkFlow(m,z,sink), MmethPrimArg(m,z,u), MethCtxt(c,m).
cfl_cs_primFullSinkFlow(c,u,sink)   :- ArgSinkFlow(m,z,sink), cfl_cs_callEdges(c,i,_,m), IinvkPrimArg(i,z,u).

cfl_cs_primPassThrough(c,u1,u2)     :- ArgRetFlow(m,z), MmethPrimArg(m,z,u1), MmethPrimRet(m,_,u2), MethCtxt(c,m).
cfl_cs_primFullPassThrough(c,u1,u2) :- ArgRetFlow(m,z), cfl_cs_callEdges(c,i,_,m), IinvkPrimArg(i,z,u1), IinvkPrimRet(i,_,u2).
# We don't consider arg-to-arg flows. Primitive-type arguments are passed by
# value, so taint can't flow out through them.

#--------------------------------------------
# Taint flow facts - cross-type passthroughs
#--------------------------------------------

cfl_cs_primRefFlow(c,u,v)     :- ArgRetFlow(m,z), MmethPrimArg(m,z,u), MmethRet(m,_,v), MethCtxt(c,m).
cfl_cs_primRefFullFlow(c,u,v) :- ArgRetFlow(m,z), cfl_cs_callEdges(c,i,_,m), IinvkPrimArg(i,z,u), IinvkRet(i,_,v).
cfl_cs_primRefFlow(c,u,v)     :- ArgArgFlow(m,zu,zv), MmethPrimArg(m,zu,u), MmethArg(m,zv,v), MethCtxt(c,m).
cfl_cs_primRefFullFlow(c,u,v) :- ArgArgFlow(m,zu,zv), cfl_cs_callEdges(c,i,_,m), IinvkPrimArg(i,zu,u), IinvkArg(i,zv,v).

cfl_cs_refPrimFlow(c,v,u)     :- ArgRetFlow(m,z), MmethArg(m,z,v), MmethPrimRet(m,_,u), MethCtxt(c,m).
cfl_cs_refPrimFullFlow(c,v,u) :- ArgRetFlow(m,z), cfl_cs_callEdges(c,i,_,m), IinvkArg(i,z,v), IinvkPrimRet(i,_,u).
# We don't consider arg-to-arg flows. Primitive-type arguments are passed by
# value, so taint can't flow out through them.

