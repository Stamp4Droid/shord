##################
# CFL analysis inputs
##################

# name=cfl-dlog

.include "Z.dom"
.include "M.dom"
.include "C.dom"
.include "V.dom"
.include "U.dom"
.include "F.dom"
.include "I.dom"
.include "L.dom"
.include "CL.dom"
.include "H.dom"
.include "T.dom"

.bddvarorder Z0xZ1_M0_C0xC1xC2_V0xV1_T0_U0xU1_H0xF0_I0_L0xL1_CL0

###################
# INPUT RELATIONS
###################

# reference flow inputs
Assign(v:V,u:V)     input   # v = u
Alloc(v:V,h:H)      input   # v is the lhs in the new stmt h
Load(y:V,x:V,f:F)   input   # y = x.f
Store(u:V,f:F,v:V)  input   # u.f = v
LoadStat(y:V,f:F)   input   # y = f
StoreStat(f:F,v:V)  input   # f = v
param(u:V,v:V,i:I)  input   # u is the formal parameter, v is actual arg, i is invocation stmt
return(u:V,v:V,i:I) input   # u is the lhs at callsite, v is the return var, i is invocation stmt

# primitive flow inputs
AssignPrim(v:U,u:U)      input    # v = u
LoadPrim(y:U,x:V,f:F)    input    # y = x.f
StorePrim(u:V,f:F,v:U)   input    # u.f = v
LoadStatPrim(y:U,f:F)    input    # y = f
StoreStatPrim(f:F,v:U)   input    # f = v
paramPrim(u:U,v:U,i:I)   input    # u is the formal parameter, v is actual arg, i is invocation stmt
returnPrim(u:U,v:U,i:I)  input    # u is the lhs at callsite, v is the return var, i is invocation stm

# context information
MU(m:M,u:U) input # u is a prim type variable in m
MV(m:M,v:V) input # v is a variable in method m
CM(c:C,m:M) input # c is a context of method m
CH(o:C,h:H) input # context-ified abstract location o corresponds to new stmt h
CI(c:C,i:I) input # stmt i is the top element in the k-limited callstack c
CC(c:C,d:C) input # there exists i s.t. c++[i] = d

# method information
MmethArg(m:M,z:Z,v:V)     input
MmethRet(m:M,z:Z,v:V)     input
MmethPrimArg(m:M,z:Z,u:U) input
MmethPrimRet(m:M,z:Z,u:U) input

# type information
VT(v:V,t:T)       input
HTFilter(h:H,t:T) input

# stub information
Stub(m:M) input

# contextified label information
CCL(c:C,cl:CL)      input
LCL(l:L,cl:CL)      input
srcCtxtLabel(l:CL)  input
sinkCtxtLabel(l:CL) input

# annotations
InLabelRet(l:L,m:M)           input
OutLabelRet(l:L,m:M)          input
InLabelArg(l:L,m:M,z:Z)       input
OutLabelArg(l:L,m:M,z:Z)      input
ArgRetTransfer(m:M,z:Z)       input
ArgArgTransfer(m:M,z0:Z,z1:Z) input
ArgArgFlow(m:M,z0:Z,z1:Z)     input

###################
# INTERMEDIATE RELATIONS
###################

# temporary label relation
LabelRet(l:L,m:M)
LabelArg(l:L,m:M,z:Z)

###################
# OUTPUT RELATIONS
###################

# reference flows
AssignCtxt(c:C,v:V,u:V)        output # v = u in context c
AllocCtxt(c:C,v:V,o:C)	       output # v is the lhs of the new stmt h in context c
LoadCtxt(c:C,y:V,x:V,f:F)      output # y = x.f in context c
ArrLoadCtxt(c:C,y:V,x:V)       output # y = x[*] in context c
StoreCtxt(c:C,u:V,f:F,v:V)     output # u.f = v in context c
ArrStoreCtxt(c:C,u:V,v:V)      output # u[*] = v in context c
LoadStatCtxt(c:C,y:V,f:F)      output # y = f in context c
StoreStatCtxt(c:C,f:F,v:V)     output # f = v in context c
AssignArgCtxt(c:C,u:V,d:C,v:V) output # u is the formal parameter in context c, v is actual arg in context d
AssignRetCtxt(c:C,u:V,d:C,v:V) output # u is the lhs at callsite in context c, v is the return var in context d

# primitive & cross flows
AssignPrimCtxt(c:C,v:U,u:U)        output # v = u in context c
LoadPrimCtxt(c:C,y:U,x:V,f:F)      output # y = x.f in context c
ArrLoadPrimCtxt(c:C,y:U,x:V)       output # y = x[*] in context c
StorePrimCtxt(c:C,u:V,f:F,v:U)     output # u.f = v in context c
ArrStorePrimCtxt(c:C,u:V,v:U)      output # u[*] = v in context c
LoadStatPrimCtxt(c:C,y:U,f:F)      output # y = f in context c
StoreStatPrimCtxt(c:C,f:F,v:U)     output # f = v in context c
AssignArgPrimCtxt(c:C,u:U,d:C,v:U) output # u is the formal parameter in context c, v is actual arg in context d
AssignRetPrimCtxt(c:C,u:U,d:C,v:U) output # u is the lhs at callsite in context c, v is the return var in context d

# type filters
VTCtxt(c:C,v:V,t:T) output
OTFilter(o:C,t:T)   output

# annotations
InLabelCtxt(c:C,l:CL,v:V)      output
OutLabelCtxt(c:C,l:CL,v:V)     output

InLabelPrimCtxt(c:C,l:CL,u:U)  output
OutLabelPrimCtxt(c:C,l:CL,u:U) output

SrcArgFlowCtxt(c:C,l:CL,v:V)   output
SinklArgFlowCtxt(c:C,l:CL,v:V) output
SrcRetFlowCtxt(c:C,l:CL,v:V)   output
SinklRetFlowCtxt(c:C,l:CL,v:V) output
ArgSinkFlowCtxt(c:C,v:V,l:CL)  output

ArgArgTransferCtxt(c:C,v:V,u:V) output
ArgRetTransferCtxt(c:C,v:V,u:V) output

SrcRetPrimFlowCtxt(c:C,l:CL,v:U)   output
SinklRetPrimFlowCtxt(c:C,l:CL,v:U) output
ArgSinkPrimFlowCtxt(c:C,v:U,l:CL)  output

# The other 3 possible combinations are invalid:
# - SrcArgPrimFlowCtxt(c:C,l:CL,v:U)
# - RetSinkFlowCtxt(c:C,v:V,l:CL)
# - RetSinkPrimFlowCtxt(c:C,v:U,l:CL)
# Pass-by-value disallows taint flowing to a primitive-type argument.
# Taint can't flow from the return to the sink

ArgPrimArgTransferCtxt(c:C,v:U,u:V)     output
ArgPrimRetTransferCtxt(c:C,v:U,u:V)     output
ArgRetPrimTransferCtxt(c:C,v:V,u:U)     output
ArgPrimRetPrimTransferCtxt(c:C,v:U,u:U) output

# The other 2 possible combinations are invalid:
# - ArgArgPrimTransferCtxt(c:C,v:V,u:U)
# - ArgPrimArgPrimTransferCtxt(c:C,v:U,u:U)
# Pass-by-value disallows transfering taint through a primitive-type argument.

ArgArgFlowCtxt(c:C,v:V,u:V)         output
ArgArgPrimFlowCtxt(c:C,v:V,u:U)     output
ArgPrimArgFlowCtxt(c:C,v:U,u:V)     output
ArgPrimArgPrimFlowCtxt(c:C,v:U,u:U) output

# stub annotations
ArgArgTransferCtxtStub(c:C,v:V,u:V,m:M,z1:Z,z2:Z)     output
ArgRetTransferCtxtStub(c:C,v:V,u:V,m:M,z:Z)           output

ArgPrimArgTransferCtxtStub(c:C,v:U,u:V,m:M,z1:Z,z2:Z) output
ArgPrimRetTransferCtxtStub(c:C,v:U,u:V,m:M,z:Z)       output
ArgRetPrimTransferCtxtStub(c:C,v:V,u:U,m:M,z:Z)       output
ArgPrimRetPrimTransferCtxtStub(c:C,v:U,u:U,m:M,z:Z)   output

# phantom allocations
phAlloc(v:V,c:C)  output

###################
#    RULES
###################

LabelRet(l,m)   :- InLabelRet(l,m).
LabelRet(l,m)   :- OutLabelRet(l,m).
LabelArg(l,m,z) :- InLabelArg(l,m,z).
LabelArg(l,m,z) :- OutLabelArg(l,m,z).

AssignCtxt(c,v,u)          :- Assign(v,u), MV(m,v), CM(c,m).
AllocCtxt(c,v,o)           :- Alloc(v,h), MV(m,v), CM(c,m), CC(c,o), CH(o,h).
LoadCtxt(c,y,x,f)          :- Load(y,x,f), MV(m,y), CM(c,m).
ArrLoadCtxt(c,y,x)         :- LoadCtxt(c,y,x,0).
StoreCtxt(c,u,f,v)         :- Store(u,f,v), MV(m,v), CM(c,m).
ArrStoreCtxt(c,u,v)        :- StoreCtxt(c,u,0,v).
LoadStatCtxt(c,y,f)        :- LoadStat(y,f), MV(m,y), CM(c,m).
StoreStatCtxt(c,f,v)       :- StoreStat(f,v), MV(m,v), CM(c,m).
AssignArgCtxt(d,u,c,v)     :- param(u,v,i), MV(m,v), CM(c,m), CC(c,d), CI(d,i).
AssignRetCtxt(c,u,d,v)     :- return(u,v,i), MV(m,u), CM(c,m), CC(c,d), CI(d,i).

AssignPrimCtxt(c,v,u)      :- AssignPrim(v,u), MU(m,v), CM(c,m).
LoadPrimCtxt(c,y,x,f)      :- LoadPrim(y,x,f), MV(m,x), CM(c,m).
ArrLoadPrimCtxt(c,y,x)     :- LoadPrimCtxt(c,y,x,0).
StorePrimCtxt(c,u,f,v)     :- StorePrim(u,f,v), MV(m,u), CM(c,m).
ArrStorePrimCtxt(c,u,v)    :- StorePrimCtxt(c,u,0,v).
LoadStatPrimCtxt(c,y,f)    :- LoadStatPrim(y,f), MU(m,y), CM(c,m).
StoreStatPrimCtxt(c,f,v)   :- StoreStatPrim(f,v), MU(m,v), CM(c,m).
AssignArgPrimCtxt(d,u,c,v) :- paramPrim(u,v,i), MU(m,v), CM(c,m), CC(c,d), CI(d,i).
AssignRetPrimCtxt(c,u,d,v) :- returnPrim(u,v,i), MU(m,u), CM(c,m), CC(c,d), CI(d,i).

# type filters
VTCtxt(c,v,t) :- VT(v,t), CM(c,m), MV(m,v).
OTFilter(o,t) :- CH(o,h), HTFilter(h,t).

# annotations
InLabelCtxt(c,cl,v)  :- CCL(c,cl), LCL(l,cl), InLabelRet(l,m), MmethRet(m,_,v), CM(c,m).
InLabelCtxt(c,cl,v)  :- CCL(c,cl), LCL(l,cl), InLabelArg(l,m,z), MmethArg(m,z,v), CM(c,m).
OutLabelCtxt(c,cl,v) :- CCL(c,cl), LCL(l,cl), OutLabelRet(l,m), MmethRet(m,_,v), CM(c,m).
OutLabelCtxt(c,cl,v) :- CCL(c,cl), LCL(l,cl), OutLabelArg(l,m,z), MmethArg(m,z,v), CM(c,m).

InLabelPrimCtxt(c,cl,u)  :- CCL(c,cl), LCL(l,cl), InLabelRet(l,m), MmethPrimRet(m,_,u), CM(c,m).
# Pass-by-value semantics means that we could never introduce a taint label to
# a primitive-type argument, so we don't need to consider InLabelArg here.
OutLabelPrimCtxt(c,cl,u) :- CCL(c,cl), LCL(l,cl), OutLabelRet(l,m), MmethPrimRet(m,_,u), CM(c,m).
OutLabelPrimCtxt(c,cl,u) :- CCL(c,cl), LCL(l,cl), OutLabelArg(l,m,z), MmethPrimArg(m,z,u), CM(c,m).

SrcArgFlowCtxt(c,cl,v)   :- srcCtxtLabel(cl),  CCL(c,cl), LCL(l,cl), LabelArg(l,m,z), MmethArg(m,z,v), CM(c,m).
SinklArgFlowCtxt(c,cl,v) :- sinkCtxtLabel(cl), CCL(c,cl), LCL(l,cl), LabelArg(l,m,z), MmethArg(m,z,v), CM(c,m).
SrcRetFlowCtxt(c,cl,v)   :- srcCtxtLabel(cl),  CCL(c,cl), LCL(l,cl), LabelRet(l,m), MmethRet(m,_,v), CM(c,m).
SinklRetFlowCtxt(c,cl,v) :- sinkCtxtLabel(cl), CCL(c,cl), LCL(l,cl), LabelRet(l,m), MmethRet(m,_,v), CM(c,m).
ArgSinkFlowCtxt(c,v,cl)  :- sinkCtxtLabel(cl), CCL(c,cl), LCL(l,cl), LabelArg(l,m,z), MmethArg(m,z,v), CM(c,m).

ArgArgTransferCtxt(c,v,u) :- ArgArgTransfer(m,z0,z1), MmethArg(m,z0,v), MmethArg(m,z1,u), CM(c,m).
ArgRetTransferCtxt(c,v,u) :- ArgRetTransfer(m,z), MmethArg(m,z,v), MmethRet(m,_,u), CM(c,m).

SrcRetPrimFlowCtxt(c,cl,v)   :- srcCtxtLabel(cl),  CCL(c,cl), LCL(l,cl), LabelRet(l,m), MmethPrimRet(m,_,v), CM(c,m).
SinklRetPrimFlowCtxt(c,cl,v) :- sinkCtxtLabel(cl), CCL(c,cl), LCL(l,cl), LabelRet(l,m), MmethPrimRet(m,_,v), CM(c,m).
ArgSinkPrimFlowCtxt(c,v,cl)  :- sinkCtxtLabel(cl), CCL(c,cl), LCL(l,cl), LabelArg(l,m,z), MmethPrimArg(m,z,v), CM(c,m).

ArgPrimArgTransferCtxt(c,v,u)     :- ArgArgTransfer(m,z0,z1), MmethPrimArg(m,z0,v), MmethArg(m,z1,u), CM(c,m).
ArgPrimRetTransferCtxt(c,v,u)     :- ArgRetTransfer(m,z), MmethPrimArg(m,z,v), MmethRet(m,_,u), CM(c,m).
ArgRetPrimTransferCtxt(c,v,u)     :- ArgRetTransfer(m,z), MmethArg(m,z,v), MmethPrimRet(m,_,u), CM(c,m).
ArgPrimRetPrimTransferCtxt(c,v,u) :- ArgRetTransfer(m,z), MmethPrimArg(m,z,v), MmethPrimRet(m,_,u), CM(c,m).

ArgArgFlowCtxt(c,v,u)         :- ArgArgFlow(m,z0,z1), MmethArg(m,z0,v), MmethArg(m,z1,u), CM(c,m).
ArgArgPrimFlowCtxt(c,v,u)     :- ArgArgFlow(m,z0,z1), MmethArg(m,z0,v), MmethPrimArg(m,z1,u), CM(c,m).
ArgPrimArgFlowCtxt(c,v,u)     :- ArgArgFlow(m,z0,z1), MmethPrimArg(m,z0,v), MmethArg(m,z1,u), CM(c,m).
ArgPrimArgPrimFlowCtxt(c,v,u) :- ArgArgFlow(m,z0,z1), MmethPrimArg(m,z0,v), MmethPrimArg(m,z1,u), CM(c,m).

# stub annotations
ArgArgTransferCtxtStub(c,v,u,m,z1,z2)     :- Stub(m), MmethArg(m,z1,v), MmethArg(m,z2,u), z1 != z2, CM(c,m).
ArgRetTransferCtxtStub(c,v,u,m,z)         :- Stub(m), MmethArg(m,z,v), MmethRet(m,_,u), CM(c,m).

ArgPrimArgTransferCtxtStub(c,v,u,m,z1,z2) :- Stub(m), MmethPrimArg(m,z1,v), MmethArg(m,z2,u), CM(c,m).
ArgPrimRetTransferCtxtStub(c,v,u,m,z)     :- Stub(m), MmethPrimArg(m,z,v), MmethRet(m,_,u), CM(c,m).
ArgRetPrimTransferCtxtStub(c,v,u,m,z)     :- Stub(m), MmethArg(m,z,v), MmethPrimRet(m,_,u), CM(c,m).
ArgPrimRetPrimTransferCtxtStub(c,v,u,m,z) :- Stub(m), MmethPrimArg(m,z,v), MmethPrimRet(m,_,u), CM(c,m).

# phantom allocations
phAlloc(v,c) :- Stub(m), CM(c,m), MmethRet(m,_,v).
