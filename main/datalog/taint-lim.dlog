# Taint analysis, with support for nested taint
# - nested tainting: all fields
# - nested escaping: all fields
# - nested passthrough entry: only array elements
# - nested passthrough exit: only array elements
# - TODO: conditional escaping trigger entry: no nesting support
# - nested conditional escaping: all fields

# CONFIGURATION ===============================================================

# name=taint-lim-dlog

.include "Z.dom"
.include "M.dom"
.include "C.dom"
.include "V.dom"
.include "U.dom"
.include "F.dom"
.include "I.dom"
.include "L.dom"
.include "CL.dom"

.bddvarorder L0_M0_CL0xCL1_C0xC1_V0xV1_U0xU1_F0_I0

# INPUT RELATIONS =============================================================

pt(c:C,v:V,o:C)    input
fpt(o1:C,f:F,o2:C) input
reachableCM(c:C,m:M) input # c is a context of method m
CICM(d:C,i:I,c:C,m:M)   input

AssignPrim(v:U,u:U)     input # v = u
LoadPrim(y:U,x:V,f:F)   input # y = x.f
StorePrim(u:V,f:F,v:U)  input # u.f = v
LoadStatPrim(y:U,f:F)   input # y = f
StoreStatPrim(f:F,v:U)  input # f = v

paramPrim(u:U,v:U,i:I)  input # u: formal param, v: actual arg, i: invocation stmt
returnPrim(u:U,v:U,i:I) input # u: lhs at callsite, v: return var, i: invocation stmt

MU(m:M,u:U) input # u is a prim type variable in m
MV(m:M,v:V) input # v is a ref type variable in m

CCL(c:C,cl:CL) input 
LCL(l:L,cl:CL) input

sinkCtxtLabel(l:CL) input
srcCtxtLabel(l:CL) input

varInLabel(v:V,l:L)       input
varInLabelPrim(v:U,l:L)   input
varOutLabel(v:V,l:L)      input
varOutLabelPrim(v:U,l:L)  input

transferRefRef(u:V,v:V)   input
transferPrimRef(u:U,v:V)  input
transferRefPrim(u:V,v:U) input
transferPrimPrim(u:U,v:U) input

flowRefRef(u:V,v:V)   input
flowPrimRef(u:U,v:V)  input
flowRefPrim(u:V,v:U)  input
flowPrimPrim(u:U,v:U) input

# OUTPUT RELATIONS ============================================================

labelRef(c:C,v:V,l:CL)  output # (c,v) is labeled with l
labelPrim(c:C,u:U,l:CL) output # (c,u) is labeled with l
flow(src:CL,sink:CL) output

# INTERMEDIATE RELATIONS ======================================================
DUDU(c:C,u:U,d:C,v:U) 

flowRefRef(u:V,v:V)
flowPrimRef(u:U,v:V)
flowRefPrim(u:V,v:U)
flowPrimPrim(u:U,v:U)

transferObjRef(o:C,c:C,v:V)
transferObjPrim(o:C,c:C,u:U)

labelIn(o:C,l:CL)            # l inductively reaches o from a directly-labeled value
labelXferOut(o:C,l:CL)       # l inductively reaches o from a value tainted by a passthrough
label(o:C,l:CL)              # o is labeled with l

labelPrimFld(o:C,f:F,l:CL)   # prim fld f of object o is labeled l
labelPrimFldStat(f:F,l:CL)   # static field f of primitive type has label l

sink(o:C,l:CL)               # o escapes into sink l
sinkPrim(c:C,u:U,l:CL)       # (c,u) escapes into sink l

# RULES =======================================================================

# (backward) escape flow

# abstract objects
# base escaping objects
sink(o,cl) :- varOutLabel(v,l), MV(m,v), reachableCM(c,m), pt(c,v,o), CCL(c,cl), LCL(l,cl).
# conditional escaping
sink(o,l)  :- pt(c,u,o), flowRefRef(u,v), labelRef(c,v,l), sinkCtxtLabel(l).
sink(o,l)  :- pt(c,u,o), flowRefPrim(u,v), labelPrim(c,v,l), sinkCtxtLabel(l).
# nested escaping (regular and conditional)
sink(o2,l) :- sink(o1,l), fpt(o1,_,o2).

# primitive-type variables/fields
# base escaping variables
sinkPrim(c,u,cl) :- varOutLabelPrim(u,l), reachableCM(c,m), MU(m,u), LCL(l,cl), CCL(c,cl). 
# conditional escaping
sinkPrim(c,u,l) :- flowPrimRef(u,v), labelRef(c,v,l), sinkCtxtLabel(l).
sinkPrim(c,u,l) :- flowPrimPrim(u,v), labelPrim(c,v,l), sinkCtxtLabel(l).

# passthroughs

# base cases
transferObjRef(o,c,v)   :- transferRefRef(u,v), pt(c,u,o).
transferObjPrim(o,c,v)  :- transferRefPrim(u,v), pt(c,u,o).
# nested entry: behaves like nested escaping
transferObjRef(o2,c,v)  :- transferObjRef(o1,c,v), fpt(o1,0,o2).
transferObjPrim(o2,c,v) :- transferObjPrim(o1,c,v), fpt(o1,0,o2).

# complete flow

# basic connection of tainting and escaping
flow(src,sink) :- sink(o,sink), label(o,src), srcCtxtLabel(src).
flow(src,sink) :- sinkPrim(d,u,sink), labelPrim(d,u,src), srcCtxtLabel(src).
# nested escaping (regular and conditional)
flow(src,sink) :- sink(o,sink), labelPrimFld(o,_,src), srcCtxtLabel(src).

# (forward) label flow

# abstract objects
# label introduction
labelIn(o,cl)      :- varInLabel(v,l), MV(m,v), reachableCM(c,m), pt(c,v,o), CCL(c,cl), LCL(l,cl).
# nested tainting
labelIn(o2,l)      :- labelIn(o1,l), fpt(o1,_,o2).
label(o,l)         :- labelIn(o,l).
# passthrough handling
labelXferOut(o2,l) :- label(o1,l), transferObjRef(o1,c,v), pt(c,v,o2).
labelXferOut(o,l)  :- labelPrim(c,u,l), transferPrimRef(u,v), pt(c,v,o).
label(o,l)         :- labelXferOut(o,l).
# nested passthrough entry
labelXferOut(o2,l) :- labelPrimFld(o1,0,l), transferObjRef(o1,c,v), pt(c,v,o2).
# nested passthrough exit
labelXferOut(o2,l) :- labelXferOut(o1,l), fpt(o1,0,o2).

# reference-type variables
# labels are tracked on the abstract objects, this is only for convenience
labelRef(c,v,l) :- pt(c,v,o), label(o,l).

# primitive-type variables/fields
# label introduction
labelPrim(c,v,cl)     :- varInLabelPrim(v,l), reachableCM(c,m), MU(m,v), LCL(l,cl), CCL(c,cl).
# label propagation
labelPrim(c,v,l)      :- AssignPrim(v,u), labelPrim(c,u,l).
labelPrimFld(o,f,l)   :- labelPrim(c,v,l), StorePrim(u,f,v), pt(c,u,o).
labelPrim(c,y,l)      :- LoadPrim(y,x,f), labelPrimFld(o,f,l), pt(c,x,o).
labelPrimFldStat(f,l) :- StoreStatPrim(f,v), labelPrim(_,v,l).
labelPrim(c,y,l)      :- LoadStatPrim(y,f), labelPrimFldStat(f,l), MU(m,y), reachableCM(c,m).

DUDU(d,u,c,v)    :- CICM(c,i,d,m), MU(m,u), paramPrim(u,v,i).
DUDU(c,u,d,v)    :- CICM(c,i,d,m), MU(m,v), returnPrim(u,v,i).
labelPrim(d,u,l) :- labelPrim(c,v,l), DUDU(d,u,c,v).

# passthrough handling
labelPrim(c,v,l)      :- label(o,l), transferObjPrim(o,c,v).
labelPrim(c,v,l)      :- labelPrim(c,u,l), transferPrimPrim(u,v).
# nested tainting
labelPrim(c,y,l)      :- LoadPrim(y,x,_), labelIn(o,l), pt(c,x,o).
# nested passthrough entry
labelPrim(c,v,l)      :- labelPrimFld(o,0,l), transferObjPrim(o,c,v).
# nested passthrough exit
labelPrim(c,y,l)      :- LoadPrim(y,x,0), labelXferOut(o,l), pt(c,x,o).
