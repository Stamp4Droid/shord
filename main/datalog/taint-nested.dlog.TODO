# Taint analysis, with support for nested taint
# - nested tainting: all fields
# - nested escaping: all fields
# - nested passthrough entry: all fields
# - nested passthrough exit: all fields
# - TODO: conditional escaping trigger entry: no nesting support
# - nested conditional escaping: all fields

# CONFIGURATION ===============================================================

# name=taint-nested-dlog

.include "Z.dom"
.include "M.dom"
.include "C.dom"
.include "V.dom"
.include "U.dom"
.include "F.dom"
.include "I.dom"
.include "L.dom"

.bddvarorder Z0xZ1_M0_C0xC1_V0xV1_U0xU1_F0_I0_L0xL1

# INPUT RELATIONS =============================================================

pt(c:C,v:V,o:C)    input
fpt(o1:C,f:F,o2:C) input

AssignPrim(v:U,u:U)     input # v = u
LoadPrim(y:U,x:V,f:F)   input # y = x.f
StorePrim(u:V,f:F,v:U)  input # u.f = v
LoadStatPrim(y:U,f:F)   input # y = f
StoreStatPrim(f:F,v:U)  input # f = v

paramPrim(u:U,v:U,i:I)  input # u: formal param, v: actual arg, i: invocation stmt
returnPrim(u:U,v:U,i:I) input # u: lhs at callsite, v: return var, i: invocation stmt

MU(m:M,u:U) input # u is a prim type variable in m
MV(m:M,v:V) input # v is a ref type variable in m
CM(c:C,m:M) input # c is a context of method m
CI(c:C,i:I) input # stmt i is the top element in the k-limited callstack c
CC(c:C,d:C) input # there exists i s.t. c++[i] = d

SrcLabel(l:L)  input
SinkLabel(l:L) input

LabelRet(l:L,m:M)             input
LabelArg(l:L,m:M,z:Z)         input
ArgRetTransfer(m:M,z:Z)       input
ArgArgTransfer(m:M,z0:Z,z1:Z) input
ArgArgFlow(m:M,z0:Z,z1:Z)     input

MmethArg(m:M,z:Z,v:V)     input
MmethRet(m:M,z:Z,v:V)     input
MmethPrimArg(m:M,z:Z,u:U) input
MmethPrimRet(m:M,z:Z,u:U) input

# OUTPUT RELATIONS ============================================================

labelRef(c:C,v:V,d:C,l:L)  output # (c,v) is labeled with (d,l)
labelPrim(c:C,u:U,d:C,l:L) output # (c,u) is labeled with (d,l)
flow(c:C,src:L,d:C,sink:L) output

# INTERMEDIATE RELATIONS ======================================================

varLabel(v:V,l:L)
varLabelPrim(v:U,l:L)

transferRefRef(u:V,v:V)
transferPrimRef(u:U,v:V)
transferRefPrim(u:V,v:U)
transferPrimPrim(u:U,v:U)

flowRefRef(u:V,v:V)
flowPrimRef(u:U,v:V)
flowRefPrim(u:V,v:U)
flowPrimPrim(u:U,v:U)

transferObjRef(o:C,c:C,v:V)
transferObjPrim(o:C,c:C,u:U)

labelIntro(o:C,d:C,l:L)         # (d,l) is introduced into the program at object o
label(o:C,d:C,l:L)              # o is labeled with (d,l)
labelPrimIntro(c:C,u:U,d:C,l:L) # (d,l) is introduced into the program at (c,u)
labelPrimFld(o:C,f:F,d:C,l:L)   # prim fld f of object o is labeled (d,l)
labelPrimFldStat(f:F,d:C,l:L)   # static field f of primitive type has label (d,l)

sink(o:C,d:C,l:L)               # o escapes into sink (d,l)
sinkPrim(c:C,u:U,d:C,l:L)       # (c,u) escapes into sink (d,l)

# RULES =======================================================================

# translation of annotation facts

varLabel(v,l)     :- LabelRet(l,m), MmethRet(m,_,v).
varLabel(v,l)     :- LabelArg(l,m,z), MmethArg(m,z,v).
varLabelPrim(v,l) :- LabelRet(l,m), MmethPrimRet(m,_,v).
varLabelPrim(v,l) :- LabelArg(l,m,z), MmethPrimArg(m,z,v).

transferRefRef(u,v)   :- ArgArgTransfer(m,z0,z1), MmethArg(m,z0,u), MmethArg(m,z1,v).
transferRefPrim(u,v)  :- ArgArgTransfer(m,z0,z1), MmethArg(m,z0,u), MmethPrimArg(m,z1,v).
transferPrimRef(u,v)  :- ArgArgTransfer(m,z0,z1), MmethPrimArg(m,z0,u), MmethArg(m,z1,v).
transferPrimPrim(u,v) :- ArgArgTransfer(m,z0,z1), MmethPrimArg(m,z0,u), MmethPrimArg(m,z1,v).

transferRefRef(u,v)   :- ArgRetTransfer(m,z), MmethArg(m,z,u), MmethRet(m,_,v).
transferRefPrim(u,v)  :- ArgRetTransfer(m,z), MmethArg(m,z,u), MmethPrimRet(m,_,v).
transferPrimRef(u,v)  :- ArgRetTransfer(m,z), MmethPrimArg(m,z,u), MmethRet(m,_,v).
transferPrimPrim(u,v) :- ArgRetTransfer(m,z), MmethPrimArg(m,z,u), MmethPrimRet(m,_,v).

flowRefRef(u,v)   :- ArgArgFlow(m,z0,z1), MmethArg(m,z0,u), MmethArg(m,z1,v).
flowRefPrim(u,v)  :- ArgArgFlow(m,z0,z1), MmethArg(m,z0,u), MmethPrimArg(m,z1,v).
flowPrimRef(u,v)  :- ArgArgFlow(m,z0,z1), MmethPrimArg(m,z0,u), MmethArg(m,z1,v).
flowPrimPrim(u,v) :- ArgArgFlow(m,z0,z1), MmethPrimArg(m,z0,u), MmethPrimArg(m,z1,v).

# (backward) escape flow

# abstract objects
# base escaping objects
sink(o,d,l)  :- labelIntro(o,d,l), SinkLabel(l).
# conditional escaping
sink(o,d,l)  :- pt(c,u,o), flowRefRef(u,v), labelRef(c,v,d,l), SinkLabel(l).
sink(o,d,l)  :- pt(c,u,o), flowRefPrim(u,v), labelPrim(c,v,d,l), SinkLabel(l).
# nested escaping (regular and conditional)
sink(o2,d,l) :- sink(o1,d,l), fpt(o1,_,o2).

# primitive-type variables/fields
# base escaping variables
sinkPrim(c,u,d,l) :- labelPrimIntro(c,u,d,l), SinkLabel(l).
# conditional escaping
sinkPrim(c,u,d,l) :- flowPrimRef(u,v), labelRef(c,v,d,l), SinkLabel(l).
sinkPrim(c,u,d,l) :- flowPrimPrim(u,v), labelPrim(c,v,d,l), SinkLabel(l).

# passthroughs

# base cases
transferObjRef(o,c,v)   :- transferRefRef(u,v), pt(c,u,o).
transferObjPrim(o,c,v)  :- transferRefPrim(u,v), pt(c,u,o).
# nested entry: behaves like nested escaping
transferObjRef(o2,c,v)  :- transferObjRef(o1,c,v), fpt(o1,_,o2).
transferObjPrim(o2,c,v) :- transferObjPrim(o1,c,v), fpt(o1,_,o2).

# complete flow

# basic connection of tainting and escaping
flow(c,src,e,sink) :- sink(o,e,sink), label(o,c,src), SrcLabel(src).
flow(c,src,e,sink) :- sinkPrim(d,u,e,sink), labelPrim(d,u,c,src), SrcLabel(src).
# nested escaping (regular and conditional)
flow(c,src,e,sink) :- sink(o,e,sink), labelPrimFld(o,_,c,src), SrcLabel(src).

# (forward) label flow

# abstract objects
# label introduction
labelIntro(o,c,l) :- varLabel(v,l), CM(c,m), MV(m,v), pt(c,v,o).
label(o,d,l)      :- labelIntro(o,d,l).
# passthrough handling
label(o2,d,l)     :- label(o1,d,l), transferObjRef(o1,c,v), pt(c,v,o2).
label(o,d,l)      :- labelPrim(c,u,d,l), transferPrimRef(u,v), pt(c,v,o).
# nested tainting
label(o2,d,l)     :- label(o1,d,l), fpt(o1,_,o2).
# nested passthrough entry
label(o2,d,l)     :- labelPrimFld(o1,_,d,l), transferObjRef(o1,c,v), pt(c,v,o2).

# reference-type variables
# labels are tracked on the abstract objects, this is only for convenience
labelRef(c,v,d,l) :- pt(c,v,o), label(o,d,l).

# primitive-type variables/fields
# label introduction
labelPrimIntro(c,v,d,l) :- varLabelPrim(v,l), CM(c,m), MU(m,v), c = d.
labelPrim(c,v,d,l)      :- labelPrimIntro(c,v,d,l).
# label propagation
labelPrim(c,v,d,l)      :- AssignPrim(v,u), labelPrim(c,u,d,l).
labelPrimFld(o,f,d,l)   :- labelPrim(c,v,d,l), StorePrim(u,f,v), pt(c,u,o).
labelPrim(c,y,d,l)      :- LoadPrim(y,x,f), labelPrimFld(o,f,d,l), pt(c,x,o).
labelPrimFldStat(f,d,l) :- StoreStatPrim(f,v), labelPrim(_,v,d,l).
labelPrim(c,y,d,l)      :- LoadStatPrim(y,f), labelPrimFldStat(f,d,l), MU(m,y), CM(c,m).
labelPrim(d,u,e,l)      :- labelPrim(c,v,e,l), paramPrim(u,v,i), CC(c,d), CI(d,i).
labelPrim(c,u,e,l)      :- labelPrim(d,v,e,l), returnPrim(u,v,i), CI(d,i), CC(c,d).
# passthrough handling
labelPrim(c,v,d,l)      :- label(o,d,l), transferObjPrim(o,c,v).
labelPrim(c,v,d,l)      :- labelPrim(c,u,d,l), transferPrimPrim(u,v).
# nested tainting
labelPrim(c,y,d,l)      :- LoadPrim(y,x,_), labelRef(c,x,d,l).
# nested passthrough entry
labelPrim(c,v,d,l)      :- labelPrimFld(o,_,d,l), transferObjPrim(o,c,v).
