##################
# CFL Initialization
##################

###################
# CONFIGURATION
###################

# name=cfl-alias-models-short-dlog

.include "M.dom"
.include "C.dom"
.include "V.dom"
.include "F.dom"
.include "I.dom"
.include "H.dom"
.include "K.dom"

.bddvarorder V0_V1_K0_M0_C0_K1_M1_C1_M2_C2_I0_F0_H0

##########
# INPUTS #
##########

# points-to facts
pt(c:C,v:V,o:C) input
fpt(o1:C,f:F,o2:C) input

# type filter
HVFilter(v:V,h:H) input

# program statements
Assign(v:V,u:V) input
param(v:V,u:V,i:I) input
return(v:V,u:V,i:I) input
Store(v:V,f:F,u:V) input
Load(v:V,u:V,f:F) input

# basic relations
CC(c:C,d:C) input
CI(c:C,i:I) input
MV(m:M,v:V) input
CM(c:C,m:M) input
CH(o:C,h:H) input

# stub relations
StubParam(m:M,v:V) input
StubReturn(m:M,v:V) input

# k relations
KIncrement(h:K,k:K) input
KFilter(h:K,k:K) input

################
# INTERMEDIATE #
################

# translated points-to facts
Flow(o:C2,c:C0,v:V0) input
FlowField(o1:C,f:F,o2:C) input

# stub entry/exit
Bassign(c:C0,v:V0,m:M0) input
assignE(m:M0,c:C0,v:V0) input

###########
# OUTPUTS #
###########

FlowPreK(o:C2,k:K0,c:C0,m:M0) output
FlowPostK(k:K0,c1:C0,m:M0,c2:C1,v:V0) output
FlowFieldPostK(k:K0,c:C0,m:M0,f:F0,o:C2) output
FlowPrePostK(k:K0,c1:C0,m1:M0,k:K1,c2:C1,m2:M1) output

FlowPreFullK(o:C2,k:K0,c:C0,m:M0) output
FlowNewK(o:C2,c:C0,v:V0) output

#########
# RULES #
#########

# A_v rules

FlowPreK(o,k,c,m) :- Flow(o,c,v), Bassign(c,v,m), k=0.
FlowPreK(o,k,c,m) :- Flow(o,cp,v), Store(u,_,v), FlowPostK(h,c,m,cp,u), KIncrement(h,k).
FlowPreK(o,k,c,m) :- FlowField(o,_,op), FlowPreK(op,h,c,m), KIncrement(h,k).

# A^v rules

FlowPostK(k,c1,m,c2,v) :- assignE(m,c1,v), c1=c2, k=0.
FlowPostK(k,c1,m,c2,v) :- FlowPostK(k,c1,m,c2,u), Assign(v,u).
FlowPostK(k,c1,m,c2,v) :- FlowPostK(k,c1,m,cp,u), param(v,u,i), CC(cp,c2), CI(c2,i).
FlowPostK(k,c1,m,c2,v) :- FlowPostK(k,c1,m,cp,u), return(v,u,i), CC(c2,cp), CI(cp,i).

FlowPostK(k,c1,m,c2,v) :- FlowPostK(h,c1,m,c2,u), Load(v,u,_), KIncrement(h,k).
FlowFieldPostK(k,c,m,f,o) :- FlowPostK(k,c,m,cp,v), Store(u,f,v), Flow(o,cp,u).
FlowPostK(k,c1,m,c2,v) :- FlowFieldPostK(k,c1,m,f,o), Flow(o,c2,u), Load(v,u,f).
FlowPostK(k,c1,m,c2,v) :- FlowPreK(o,h,c1,m), Flow(o,c2,u), Load(v,u,_), KIncrement(h,k).

# A^w_v rules

FlowPrePostK(k1,c1,m1,k2,c2,m2) :- FlowPostK(k1,c1,m1,c2,v), Bassign(c2,v,m2), k2=0.

FlowPrePostK(k1,c1,m1,k2,c2,m2) :- FlowFieldPostK(k1,c1,m1,_,o), FlowPreK(o,k2,c2,m2).
FlowPrePostK(k1,c1,m1,k2,c2,m2) :- FlowPreK(o,k1,c1,m1), FlowPreK(o,k2,c2,m2).
FlowPrePostK(k1,c1,m1,k2,c2,m2) :- FlowPostK(k1,c1,m1,cp,v), Store(u,_,v), FlowPostK(k2,c2,m2,cp,u).

# Full rules

FlowPreFullK(o,k,c,m) :- FlowPreK(o,k,c,m).
FlowPreFullK(o,k,c,m) :- FlowPreK(o,kp,cp,mp), FlowPrePostK(hp,cp,mp,k,c,m), KFilter(kp,hp).
FlowNewK(o,c,v) :- FlowPreFullK(o,_,c,m), assignE(m,c,v), HVFilter(v,h), CH(o,h).
