##################
# PT CUT
##################

###################
# CONFIGURATION
###################

# name=cfl-pt-cut-dlog

.include "V.dom"
.include "H.dom"
.include "C.dom"
.include "I.dom"
.include "M.dom"
.include "F.dom"

.bddvarorder M0_I0_F0_C0xC1_V0xV1_H0xH1

###################
# INPUTS
###################

MV(m:M,v:V) input
CH(o:C,h:H) input
Framework(m:M) input

Alloc(v:V,h:H) input
Assign(v:V,u:V) input
Store(v:V,f:F,u:V) input
Load(v:V,u:V,f:F) input
param(v:V,u:V,i:I) input
return(v:V,u:V,i:I) input

pt(c:C,v:V,o:C) input

###################
# OUTPUTS
###################

FrameworkVar(v:V) output
FrameworkObj(h:H) output

ActiveSource(v:V,o:C) output
ActiveSink(v:V,u:V) output
MonitorSource(v:V,o:C) output
MonitorSink(v:V,u:V) output

###################
# RULES
###################

# helper
FrameworkVar(v) :- MV(m,v), Framework(m).
FrameworkObj(h) :- Alloc(v,h), FrameworkVar(v).

# activate anything loaded out of framework variables
ActiveSource(v,o) :- FrameworkObj(h), Alloc(v,h), CH(o,h).
ActiveSource(v,o) :- ActiveSource(u,o), Assign(v,u).
ActiveSource(v,o) :- ActiveSource(u,o), Load(v,u,_).

# monitor if loaded/returned from an active source
# v = u.f, u active, u app, v -> o, u -f-> o
MonitorSource(v,o) :- ActiveSource(u,o), !FrameworkVar(u), Load(v,u,_), pt(_,v,o).
# v = return u, u active, u framework, v app, v -> o, u -> o
MonitorSource(v,o) :- ActiveSource(u,o), FrameworkVar(u), return(v,u,_), !FrameworkVar(v), pt(_,v,o).

# activate anything stored into framework variables
ActiveSink(v,s) :- FrameworkVar(v), v=s.
ActiveSink(v,s) :- ActiveSink(u,s), Assign(u,v).
ActiveSink(v,s) :- ActiveSink(u,s), Store(u,_,v).

# monitor if stored/passed to an active sink
# u.f = v, u active, u app, v -> o, u -f-> o
MonitorSink(v,s) :- ActiveSink(u,s), !FrameworkVar(u), Store(u,_,v), pt(_,v,o), pt(_,s,o).
# u = param v, u active, u framework, v app, v -> o, u -> o
MonitorSink(v,s) :- ActiveSink(u,s), FrameworkVar(u), param(u,v,_), !FrameworkVar(v), pt(_,v,o), pt(_,s,o).