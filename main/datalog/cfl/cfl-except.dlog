##################
# Exception Analysis
##################

# name=cfl-except-dlog

.include "C.dom"
.include "T.dom"
.include "M.dom"
.include "V.dom"
.include "U.dom"
.include "I.dom"

.bddvarorder I0_M0xM1_T0_V0xV1_U0_C0xC1

# Variables

ci_IM(i:I,m:M) input
MI(m:M,i:I) input
CM(c:C,m:M) input
CICM(c:C,i:I,d:C,m:M) input

MethodExceptionDependeeBase(m:M,t:T,v:V) input
MethodExceptionDependeePrimBase(m:M,t:T,v:U) input
CaughtException(i:I,t:T,v:V) input

MethodExceptionDependee(c:C,m:M,t:T,d:C,v:V)
MethodExceptionDependeePrim(c:C,m:M,t:T,d:C,v:U)

SuperExitDependee(c:C,i:I,d:C,v:V) output
HandlerDependee(c:C,i:I,d:C,v:V,e:V) output

SuperExitDependeePrim(c:C,i:I,d:C,v:U) output
HandlerDependeePrim(c:C,i:I,d:C,v:U,e:V) output

# Rules

MethodExceptionDependee(c,m,t,d,v) :- MethodExceptionDependeeBase(m,t,v), CM(c,m), c=d.
MethodExceptionDependee(c,m,t,d,v) :- MI(m,i), ci_IM(i,mp), CICM(c,i,cp,mp), MethodExceptionDependee(cp,mp,t,d,v), !CaughtException(i,t,_).

SuperExitDependee(c,i,d,v) :- ci_IM(i,mp), CICM(c,i,cp,mp), MethodExceptionDependee(cp,mp,t,d,v), !CaughtException(i,t,_).
HandlerDependee(c,i,d,v,e) :- ci_IM(i,mp), CICM(c,i,cp,mp), MethodExceptionDependee(cp,mp,t,d,v), CaughtException(i,t,e).

MethodExceptionDependeePrim(c,m,t,d,v) :- MethodExceptionDependeePrimBase(m,t,v), CM(c,m), c=d.
MethodExceptionDependeePrim(c,m,t,d,v) :- MI(m,i), ci_IM(i,mp), CICM(c,i,cp,mp), MethodExceptionDependeePrim(cp,mp,t,d,v), !CaughtException(i,t,_).

SuperExitDependeePrim(c,i,d,v) :- ci_IM(i,mp), CICM(c,i,cp,mp), MethodExceptionDependeePrim(cp,mp,t,d,v), !CaughtException(i,t,_).
HandlerDependeePrim(c,i,d,v,e) :- ci_IM(i,mp), CICM(c,i,cp,mp), MethodExceptionDependeePrim(cp,mp,t,d,v), CaughtException(i,t,e).
