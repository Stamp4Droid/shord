##################
# Active Partial FLows Relations
##################

###################
# CONFIGURATION
###################

# name=cfl-partial-pt-active-dlog

.include "Z.dom"
.include "M.dom"
.include "C.dom"
.include "V.dom"
.include "H.dom"
.include "F.dom"
.include "I.dom"

.bddvarorder Z0xZ1_M0_C0xC1xC2_V0xV1xV2_F0_I0

###################
# INPUT: PARTIAL FLOW RELATIONS
###################

Assign(v:V,u:V) input              # v = u
param(u:V,v:V,i:I)  input   # u is the formal parameter, v is actual arg, i is invocation stmt
return(u:V,v:V,i:I) input   # u is the lhs at callsite, v is the return var, i is invocation stmt
Store(v:V,f:F,u:V) input           # v.f = u
Load(v:V,u:V,f:F) input            # v = u.f
CI(c:C,i:I) input # stmt i is the top element in the k-limited callstack c
CC(c:C,d:C) input # there exists i s.t. c++[i] = d

MmethArg(m:M,z:Z,v:V)     input
MmethRet(m:M,z:Z,v:V)     input
MV(m:M,v:V) input
CM(c:C,m:M) input # c is a context of method m

PreFlowsTo(c:C,o:C,v:V) input
PostFlowsTo(c:C,v:V,d:C,u:V) input
MidFlowsTo(c:C,v:V,d:C,u:V) input

typeFilter(v:V,o:C) input   # type wise, v can point-to o

PreFlowsToFull(c:C,o:C,v:V) input
Transfer(v:V,u:V) input

Varg(v:V) input
Vret(v:V) input

pt(c:C,v:V,o:C) input

###################
# INPUT: ACTIVE REF AND OBJ FROM TAINT
###################

ActiveRef(c:C,v:V) input
ActiveObj(o:C) input

###################
# INTERMEDIATE: CONSTRAINED
###################

CPreFlowsToFull(c:C,o:C,v:V) output

CPostFlowsTo(c:C,v:V,w:V) output
CMidFlowsTo(c:C,v:V) output

###################
# OUTPUT: ACTIVE OBJS AND REFS
###################

ActiveRefF(c:C,v:V) output
ActiveRefT(c:C,o:C,v:V) output

ActiveVarg(v:V) output
ActiveVret(v:V) output

ActiveTransfer(v:V,u:V) output
ActiveTransferArg(c:C,v:V,u:V,m:M,z1:Z,z2:Z) output
ActiveTransferRet(c:C,v:V,u:V,m:M,z:Z) output

ActiveTypeFilter(c:C,o:C,v:V) output
ActivePreFlowsTo(c:C,o:C,v:V) output
ActiveMidFlowsTo(c:C,v:V,d:C,u:V) output
ActivePostFlowsTo(c:C,v:V,d:C,u:V) output

###################
# RULES: ACTIVE VARG, VRET, AND TRANSFER
###################

ActiveVarg(v) :- Varg(v), ActiveRefF(_,v).
ActiveVarg(v) :- Varg(v), ActiveRefT(_,_,v).
ActiveVret(v) :- Vret(v), ActiveRefF(_,v).
ActiveVret(v) :- Vret(v), ActiveRefT(_,_,v).

ActiveTransfer(v,u) :- Transfer(v,u), ActiveRefF(c,v), ActiveRefT(c,_,u).
ActiveTransferArg(c,v,u,m,z1,z2) :- ActiveTransfer(v,u), MmethArg(m,z1,v), MmethArg(m,z2,u), CM(c,m).
ActiveTransferRet(c,v,u,m,z) :- ActiveTransfer(v,u), MmethArg(m,z,v), MmethRet(m,_,u), CM(c,m).
ActiveTransferRet(c,v,u,m,z) :- ActiveTransfer(v,u), MmethArg(m,z,u), MmethRet(m,_,v), CM(c,m).

ActiveTypeFilter(c,o,v) :- ActiveObj(o), typeFilter(v,o), ActiveRef(_,v), MV(m,v), CM(c,m).

ActivePreFlowsTo(c,o,v) :- ActiveObj(o), PreFlowsTo(c,o,v), ActiveRefF(c,v).
ActiveMidFlowsTo(c,v,d,u) :- ActiveRefT(c,o,v), MidFlowsTo(c,v,d,u), ActiveRefF(d,u), typeFilter(v,o).
ActivePostFlowsTo(c,v,d,u) :- ActiveRefT(c,o,v), PostFlowsTo(c,v,d,u), ActiveRef(d,u), typeFilter(v,o).

###################
# RULES: OUTPUT
###################

# o -> v_c -> u_c -> w_d
# ActiveRef denotes endpoints of PreFlowsToFull

CPreFlowsToFull(c,o,v) :- ActiveObj(o), PreFlowsToFull(c,o,v).
CPostFlowsTo(c,u,w) :- PostFlowsTo(c,u,d,w), ActiveRef(d,w).
CMidFlowsTo(c,u) :- MidFlowsTo(c,u,d,w), ActiveRefF(d,w).

ActiveRefF(c,v) :- CPostFlowsTo(c,u,w), Transfer(v,u), CPreFlowsToFull(c,o,v), typeFilter(w,o).
ActiveRefF(c,v) :- CPreFlowsToFull(c,_,v), Transfer(v,u), MidFlowsTo(c,u,_,_).

ActiveRefT(c,o,u) :- CPostFlowsTo(c,u,w), Transfer(v,u), CPreFlowsToFull(c,o,v), typeFilter(w,o).
ActiveRefT(c,o,u) :- CMidFlowsTo(c,u), Transfer(v,u), CPreFlowsToFull(c,o,v).


