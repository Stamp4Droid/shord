##################
# Taint analysis
##################

# name=taint-dlog

.include "Z.dom"
.include "M.dom"
.include "C.dom"
.include "V.dom"
.include "U.dom"
.include "F.dom"
.include "I.dom"
.include "L.dom"

.bddvarorder Z0xZ1_M0_C0xC1_V0xV1_U0xU1_F0_I0_L0xL1

### input relations ###

pt(c:C,v:V,o:C)  input # (c,v) points-to o

MU(m:M,u:U)              input    # u is a prim type variable in m
MV(m:M,v:V)              input    # v is a ref type variable in m
AssignPrim(v:U,u:U)      input    # v = u
LoadPrim(y:U,x:V,f:F)    input    # y = x.f
StorePrim(u:V,f:F,v:U)   input    # u.f = v
LoadStatPrim(y:U,f:F)    input    # y = f
StoreStatPrim(f:F,v:U)   input    # f = v

paramPrim(u:U,v:U,i:I)   input    # u is the formal parameter, v is actual arg, i is invocation stmt
returnPrim(u:U,v:U,i:I)  input    # u is the lhs at callsite, v is the return var, i is invocation stm

CM(c:C,m:M) input         # c is a context of method m
CI(c:C,i:I) input         # stmt i is the top element in the k-limited callstack c
CC(c:C,d:C) input         # there exists i s.t. c++[i] = d

SrcLabel(l:L)  input
SinkLabel(l:L) input

LabelRet(l:L,m:M)             input
LabelArg(l:L,m:M,z:Z)         input
ArgRetTransfer(m:M,z:Z)       input
ArgArgTransfer(m:M,z0:Z,z1:Z) input
ArgArgFlow(m:M,z0:Z,z1:Z)     input

MmethArg(m:M,z:Z,v:V)         input
MmethRet(m:M,z:Z,v:V)         input
MmethPrimArg(m:M,z:Z,u:U)     input
MmethPrimRet(m:M,z:Z,u:U)     input

### output relations ###

labelRef(c:C,v:V,l:L) output   # (c,v) is labeled with l
labelPrim(c:C,u:U,l:L) output  # (c,u) is labeled with l
flow(src:L,sink:L) output

### intermediate relations ###

varLabel(v:V,l:L)
varLabelPrim(v:U,l:L)

#transfer taint of u to v
transferRefRef(u:V,v:V)
transferPrimRef(u:U,v:V)
transferRefPrim(u:V,v:U)
transferPrimPrim(u:U,v:U)

flowRefRef(u:V,v:V)
flowPrimRef(u:U,v:V)
flowRefPrim(u:V,v:U)
flowPrimPrim(u:U,v:U)

label(o:C,l:L)            # o is labeled with l
labelPrimFld(o:C,f:F,l:L) # prim fld f of object o is labeled l
labelPrimFldStat(f:F,l:L) # static field f of primitive type has label l

sink(c:C,u:V,l:L)         # (c,u) is labeled with sink label l
sinkPrim(c:C,u:U,l:L)     # (c,u) is labeled with sink label l

###################
#          RULES
###################

# translation of annotation facts

varLabel(v,l)     :- LabelRet(l,m), MmethRet(m,_,v).
varLabel(v,l)     :- LabelArg(l,m,z), MmethArg(m,z,v).
varLabelPrim(v,l) :- LabelRet(l,m), MmethPrimRet(m,_,v).
varLabelPrim(v,l) :- LabelArg(l,m,z), MmethPrimArg(m,z,v).

transferRefRef(u,v)   :- ArgArgTransfer(m,z0,z1), MmethArg(m,z0,u), MmethArg(m,z1,v).
transferRefPrim(u,v)  :- ArgArgTransfer(m,z0,z1), MmethArg(m,z0,u), MmethPrimArg(m,z1,v).
transferPrimRef(u,v)  :- ArgArgTransfer(m,z0,z1), MmethPrimArg(m,z0,u), MmethArg(m,z1,v).
transferPrimPrim(u,v) :- ArgArgTransfer(m,z0,z1), MmethPrimArg(m,z0,u), MmethPrimArg(m,z1,v).

transferRefRef(u,v)   :- ArgRetTransfer(m,z), MmethArg(m,z,u), MmethRet(m,_,v).
transferRefPrim(u,v)  :- ArgRetTransfer(m,z), MmethArg(m,z,u), MmethPrimRet(m,_,v).
transferPrimRef(u,v)  :- ArgRetTransfer(m,z), MmethPrimArg(m,z,u), MmethRet(m,_,v).
transferPrimPrim(u,v) :- ArgRetTransfer(m,z), MmethPrimArg(m,z,u), MmethPrimRet(m,_,v).

flowRefRef(u,v)   :- ArgArgFlow(m,z0,z1), MmethArg(m,z0,u), MmethArg(m,z1,v).
flowRefPrim(u,v)  :- ArgArgFlow(m,z0,z1), MmethArg(m,z0,u), MmethPrimArg(m,z1,v).
flowPrimRef(u,v)  :- ArgArgFlow(m,z0,z1), MmethPrimArg(m,z0,u), MmethArg(m,z1,v).
flowPrimPrim(u,v) :- ArgArgFlow(m,z0,z1), MmethPrimArg(m,z0,u), MmethPrimArg(m,z1,v).

# (backward) escape flow

sink(c,u,l) :- CM(c,m), MV(m,u), varLabel(u,l), SinkLabel(l).
sink(c,u,l) :- flowRefRef(u,v), labelRef(c,v,l), SinkLabel(l).
sink(c,u,l) :- flowRefPrim(u,v), labelPrim(c,v,l), SinkLabel(l).

sinkPrim(c,u,l) :- CM(c,m), MU(m,u), varLabelPrim(u,l), SinkLabel(l).
sinkPrim(c,u,l) :- flowPrimRef(u,v), labelRef(c,v,l), SinkLabel(l).
sinkPrim(c,u,l) :- flowPrimPrim(u,v), labelPrim(c,v,l), SinkLabel(l).

# complete flow

flow(src,sink) :- sink(c,u,sink), labelRef(c,u,src), SrcLabel(src).
flow(src,sink) :- sinkPrim(c,u,sink), labelPrim(c,u,src), SrcLabel(src).

# (forward) label flow

label(o,l)      :- varLabel(v,l), CM(c,m), MV(m,v), pt(c,v,o).
label(o,l)      :- transferRefRef(u,v), labelRef(c,u,l), pt(c,v,o).
label(o,l)      :- transferPrimRef(u,v), labelPrim(c,u,l), pt(c,v,o).
labelRef(c,v,l) :- pt(c,v,o), label(o,l).

labelPrim(c,v,l) :- varLabelPrim(v,l), CM(c,m), MU(m,v).
labelPrim(c,v,l) :- transferRefPrim(u,v), labelRef(c,u,l).
labelPrim(c,v,l) :- transferPrimPrim(u,v), labelPrim(c,u,l).

labelPrim(c,v,l) :- AssignPrim(v,u), labelPrim(c,u,l).
labelPrimFld(o,f,l) :- labelPrim(c,v,l), StorePrim(u,f,v), pt(c,u,o).
labelPrim(c,y,l) :- LoadPrim(y,x,f), labelPrimFld(o,f,l), pt(c,x,o).
labelPrimFldStat(f,l) :- StoreStatPrim(f,v), labelPrim(_,v,l).
labelPrim(c,y,l) :- LoadStatPrim(y,f), labelPrimFldStat(f,l), MU(m,y), CM(c,m).

labelPrim(d,u,l) :- labelPrim(c,v,l), paramPrim(u,v,i), CC(c,d), CI(d,i).
labelPrim(c,u,l) :- labelPrim(d,v,l), returnPrim(u,v,i), CI(d,i), CC(c,d).
