<java.io.InputStream: int read(byte[])>
	this->return
	this->arg#1
<java.io.InputStream: void <init>()>
	this->return
<java.io.StringReader: void mark(int)>
<java.io.StringReader: int read()>
	this->return
<java.io.StringReader: boolean isClosed()>
<java.io.StringReader: void reset()>
<java.io.StringReader: boolean ready()>
<java.io.StringReader: void <init>(java.lang.String)>
	this->return
	arg#1->this
	arg#1->return
<java.io.StringReader: int read(char[],int,int)>
	this->return
	arg#3->this
	arg#3->return
<java.io.StringReader: void close()>
<java.io.StringReader: boolean markSupported()>
<java.io.StringReader: long skip(long)>
	arg#1->this
	arg#1->return
<java.io.StringReader: void checkNotClosed()>
<java.io.PrintStream: void write(byte[],int,int)>
	arg#3->this
	arg#1->this
<java.io.PrintStream: void <init>(java.io.File,java.lang.String)>
	this->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.io.PrintStream: void <init>(java.io.OutputStream)>
	this->return
	arg#1->this
	arg#1->return
<java.io.PrintStream: void print(java.lang.String)>
	arg#1->this
<java.io.PrintStream: void <init>(java.lang.String,java.lang.String)>
	this->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.io.PrintStream: void print(double)>
	arg#1->this
<java.io.PrintStream: void println(double)>
	arg#1->this
<java.io.PrintStream: void <init>(java.lang.String)>
	this->return
	arg#1->this
	arg#1->return
<java.io.PrintStream: void newline()>
<java.io.PrintStream: void println()>
<java.io.PrintStream: void println(java.lang.String)>
	arg#1->this
<java.io.PrintStream: void flush()>
<java.io.PrintStream: void close()>
<java.io.PrintStream: void <init>(java.io.File)>
	this->return
	arg#1->this
	arg#1->return
<java.io.RandomAccessFile: void write(byte[],int,int)>
<java.io.RandomAccessFile: void seek(long)>
	this->arg#1
	arg#1->this
<java.io.RandomAccessFile: int read()>
	this->return
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>
	this->return
	arg#1->this
	arg#1->return
<java.io.RandomAccessFile: int read(byte[],int,int)>
	this->arg#1
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>
	this->return
	arg#1->this
	arg#1->return
<java.io.RandomAccessFile: java.io.FileDescriptor getFD()>
	this->return
<java.io.RandomAccessFile: int read(byte[])>
	this->arg#1
<java.io.RandomAccessFile: void write(int)>
	arg#1->this
<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>
	this->return
<java.io.RandomAccessFile: void finalize()>
<java.io.RandomAccessFile: long getFilePointer()>
	this->return
<java.io.RandomAccessFile: void close()>
<java.io.RandomAccessFile: void write(byte[])>
<java.io.RandomAccessFile: long length()>
	this->return
<java.io.FileWriter: void <init>(java.io.FileDescriptor)>
	this->return
	arg#1->this
	arg#1->return
<java.io.FileWriter: void <init>(java.lang.String)>
	this->return
	arg#1->this
	arg#1->return
<java.io.FileWriter: void <init>(java.io.File,boolean)>
	this->return
	arg#1->this
	arg#1->return
<java.io.FileWriter: void <init>(java.lang.String,boolean)>
	this->return
	arg#1->this
	arg#1->return
<java.io.FileWriter: void <init>(java.io.File)>
	this->return
	arg#1->this
	arg#1->return
<java.io.ByteArrayInputStream: void mark(int)>
<java.io.ByteArrayInputStream: int read()>
	this->return
<java.io.ByteArrayInputStream: int available()>
	this->return
<java.io.ByteArrayInputStream: int read(byte[],int,int)>
	this->return
	this->arg#1
	arg#3->this
	arg#3->return
	arg#3->arg#1
<java.io.ByteArrayInputStream: void reset()>
<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>
	this->return
	arg#3->this
	arg#3->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.io.ByteArrayInputStream: void <init>(byte[])>
	this->return
	arg#1->this
	arg#1->return
<java.io.ByteArrayInputStream: void close()>
<java.io.ByteArrayInputStream: boolean markSupported()>
<java.io.ByteArrayInputStream: long skip(long)>
	this->return
	arg#1->this
	arg#1->return
<java.io.CharArrayWriter: char[] toCharArray()>
	this->return
<java.io.CharArrayWriter: void expand(int)>
<java.io.CharArrayWriter: void <init>(int)>
	this->return
<java.io.CharArrayWriter: void reset()>
<java.io.CharArrayWriter: void write(java.lang.String,int,int)>
	arg#3->this
<java.io.CharArrayWriter: java.lang.String toString()>
	this->return
<java.io.CharArrayWriter: java.io.CharArrayWriter append(char)>
	this->return
	arg#1->this
	arg#1->return
<java.io.CharArrayWriter: void write(int)>
	arg#1->this
<java.io.CharArrayWriter: void writeTo(java.io.Writer)>
	this->arg#1
<java.io.CharArrayWriter: void write(char[],int,int)>
	arg#3->this
	arg#1->this
<java.io.CharArrayWriter: void <init>()>
	this->return
<java.io.CharArrayWriter: void flush()>
<java.io.CharArrayWriter: void close()>
<java.io.CharArrayWriter: java.io.CharArrayWriter append(java.lang.CharSequence,int,int)>
	this->return
<java.io.CharArrayWriter: java.io.CharArrayWriter append(java.lang.CharSequence)>
	this->return
<java.io.CharArrayWriter: int size()>
	this->return
<java.io.SequenceInputStream: void <init>(java.io.InputStream,java.io.InputStream)>
	this->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.io.SequenceInputStream: int read()>
	this->return
<java.io.SequenceInputStream: int available()>
	this->return
<java.io.SequenceInputStream: void <init>(java.util.Enumeration)>
	this->return
	arg#1->this
	arg#1->return
<java.io.SequenceInputStream: int read(byte[],int,int)>
	this->arg#1
	arg#3->this
	arg#3->return
	arg#3->arg#1
<java.io.SequenceInputStream: void close()>
<java.io.SequenceInputStream: void nextStream()>
<java.io.FilterInputStream: int read()>
	this->return
<java.io.FilterInputStream: void <init>(java.io.InputStream)>
	this->return
	arg#1->this
	arg#1->return
<java.io.FilterInputStream: void close()>
<java.io.InputStreamReader: boolean isOpen()>
<java.io.InputStreamReader: int read()>
	this->return
<java.io.InputStreamReader: java.lang.String getEncoding()>
	this->return
<java.io.InputStreamReader: boolean ready()>
<java.io.InputStreamReader: void <init>(java.io.InputStream)>
	this->return
	arg#1->this
	arg#1->return
<java.io.InputStreamReader: int read(char[],int,int)>
	this->arg#1
	arg#2->return
	arg#1->this
<java.io.InputStreamReader: void close()>
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.CharsetDecoder)>
	this->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>
	this->return
	arg#1->this
	arg#1->return
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>
	this->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.io.Reader: int read()>
	this->return
<java.io.Reader: boolean ready()>
<java.io.Reader: int read(char[])>
	this->return
	this->arg#1
	arg#1->this
	arg#1->return
<java.io.Reader: void <init>()>
	this->return
<java.io.Reader: int read(java.nio.CharBuffer)>
	this->return
	this->arg#1
	arg#1->return
<java.io.Reader: long skip(long)>
	this->return
	this->arg#1
	arg#1->this
	arg#1->return
<java.io.BufferedWriter: void <init>(java.io.Writer,int)>
	this->return
	arg#1->this
	arg#1->return
<java.io.BufferedWriter: boolean isClosed()>
<java.io.BufferedWriter: void flushInternal()>
<java.io.BufferedWriter: void write(java.lang.String,int,int)>
	arg#3->this
<java.io.BufferedWriter: void newLine()>
<java.io.BufferedWriter: void write(int)>
	arg#1->this
<java.io.BufferedWriter: void write(char[],int,int)>
	this->arg#3
	this->arg#2
	this->arg#1
	arg#3->this
	arg#3->arg#2
	arg#3->arg#1
	arg#2->this
	arg#2->arg#3
	arg#2->arg#1
	arg#1->this
	arg#1->arg#3
	arg#1->arg#2
<java.io.BufferedWriter: void flush()>
<java.io.BufferedWriter: void close()>
<java.io.BufferedWriter: void <init>(java.io.Writer)>
	this->return
	arg#1->this
	arg#1->return
<java.io.BufferedWriter: void checkNotClosed()>
<java.io.PrintWriter: java.io.PrintWriter append(char)>
	this->return
	arg#1->this
	arg#1->return
<java.io.PrintWriter: void print(boolean)>
	arg#1->this
<java.io.PrintWriter: void println(int)>
	arg#1->this
<java.io.PrintWriter: void <init>(java.io.File,java.lang.String)>
	this->return
	arg#1->this
	arg#1->return
<java.io.PrintWriter: boolean checkError()>
	this->return
<java.io.PrintWriter: java.io.PrintWriter printf(java.util.Locale,java.lang.String,java.lang.Object[])>
	this->return
	this->arg#2
	arg#3->this
	arg#3->return
	arg#3->arg#2
	arg#1->arg#2
<java.io.PrintWriter: void <init>(java.io.OutputStream)>
	this->return
	arg#1->this
	arg#1->return
<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>
	this->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.io.PrintWriter: void print(int)>
	arg#1->this
<java.io.PrintWriter: java.io.PrintWriter format(java.util.Locale,java.lang.String,java.lang.Object[])>
	this->return
	this->arg#2
	arg#3->this
	arg#3->return
	arg#3->arg#2
	arg#1->arg#2
<java.io.PrintWriter: void print(java.lang.String)>
	this->arg#1
	arg#1->this
<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>
	this->return
	this->arg#1
	arg#2->this
	arg#2->return
	arg#2->arg#1
<java.io.PrintWriter: void clearError()>
<java.io.PrintWriter: void print(float)>
	arg#1->this
<java.io.PrintWriter: void println(long)>
	arg#1->this
<java.io.PrintWriter: void <init>(java.lang.String,java.lang.String)>
	this->return
	arg#1->this
	arg#1->return
<java.io.PrintWriter: void write(java.lang.String,int,int)>
	arg#1->this
<java.io.PrintWriter: void print(double)>
	arg#1->this
<java.io.PrintWriter: void println(double)>
	arg#1->this
<java.io.PrintWriter: void doWrite(char[],int,int)>
	this->arg#3
	this->arg#2
	this->arg#1
	arg#3->this
	arg#3->arg#2
	arg#3->arg#1
	arg#2->this
	arg#2->arg#3
	arg#2->arg#1
	arg#1->this
	arg#1->arg#3
	arg#1->arg#2
<java.io.PrintWriter: void print(java.lang.Object)>
	arg#1->this
<java.io.PrintWriter: void setError()>
<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence,int,int)>
	this->return
	arg#1->this
	arg#1->return
<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>
	this->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.io.PrintWriter: void println(float)>
	arg#1->this
<java.io.PrintWriter: void <init>(java.lang.String)>
	this->return
	arg#1->this
	arg#1->return
<java.io.PrintWriter: void println(java.lang.Object)>
	arg#1->this
<java.io.PrintWriter: void println(char[])>
	arg#1->this
<java.io.PrintWriter: void write(int)>
	arg#1->this
<java.io.PrintWriter: void print(long)>
	arg#1->this
<java.io.PrintWriter: void print(char)>
	arg#1->this
<java.io.PrintWriter: void write(char[],int,int)>
	this->arg#3
	this->arg#2
	this->arg#1
	arg#3->this
	arg#3->arg#2
	arg#3->arg#1
	arg#2->this
	arg#2->arg#3
	arg#2->arg#1
	arg#1->this
	arg#1->arg#3
	arg#1->arg#2
<java.io.PrintWriter: void print(char[])>
	arg#1->this
<java.io.PrintWriter: void println()>
<java.io.PrintWriter: void write(char[])>
	this->arg#1
	arg#1->this
<java.io.PrintWriter: void println(boolean)>
	arg#1->this
<java.io.PrintWriter: void println(java.lang.String)>
	arg#1->this
<java.io.PrintWriter: void flush()>
<java.io.PrintWriter: void println(char)>
	arg#1->this
<java.io.PrintWriter: void close()>
<java.io.PrintWriter: void write(java.lang.String)>
	this->arg#1
	arg#1->this
<java.io.PrintWriter: void <init>(java.io.Writer)>
	this->return
	arg#1->this
	arg#1->return
<java.io.PrintWriter: void <init>(java.io.File)>
	this->return
	arg#1->this
	arg#1->return
<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>
	this->return
	arg#1->this
	arg#1->return
<java.io.PrintWriter: java.io.PrintWriter format(java.lang.String,java.lang.Object[])>
	this->return
	this->arg#1
	arg#2->this
	arg#2->return
	arg#2->arg#1
<java.io.PrintWriter: java.lang.Appendable append(java.lang.CharSequence,int,int)>
	this->return
	arg#1->this
	arg#1->return
<java.io.BufferedReader: int read()>
	this->return
<java.io.BufferedReader: boolean isClosed()>
<java.io.BufferedReader: java.lang.String readLine()>
	this->return
<java.io.BufferedReader: int read(char[],int,int)>
	this->return
	this->arg#1
	arg#3->this
	arg#3->return
	arg#3->arg#1
<java.io.BufferedReader: void close()>
<java.io.BufferedReader: void <init>(java.io.Reader,int)>
	this->return
	arg#1->this
	arg#1->return
<java.io.BufferedReader: void <init>(java.io.Reader)>
	this->return
	arg#1->this
	arg#1->return
<java.io.BufferedReader: void checkNotClosed()>
<java.io.BufferedReader: int fillBuf()>
	this->return
<java.io.ObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])>
	arg#1->return
<java.io.ObjectInputStream: void readObjectNoData(java.lang.Object,java.lang.Class,java.io.ObjectStreamClass)>
<java.io.ObjectInputStream: void readObjectForClass(java.lang.Object,java.io.ObjectStreamClass)>
	this->arg#2
	this->arg#1
	arg#2->this
	arg#2->arg#1
	arg#1->this
	arg#1->arg#2
<java.io.ObjectInputStream: java.lang.Object readObjectOverride()>
<java.io.ObjectInputStream: java.lang.Object readNonPrimitiveContent(boolean)>
	this->return
	this->arg#1
	arg#1->this
	arg#1->return
<java.io.ObjectInputStream: int readUnsignedByte()>
	this->return
<java.io.ObjectInputStream: int read()>
	this->return
<java.io.ObjectInputStream: int available()>
	this->return
<java.io.ObjectInputStream: java.lang.Class readNewClass(boolean)>
	this->return
	this->arg#1
	arg#1->this
	arg#1->return
<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDescriptor()>
	this->return
<java.io.ObjectInputStream: float readFloat()>
	this->return
<java.io.ObjectInputStream: void <clinit>()>
<java.io.ObjectInputStream: java.lang.Object readObject(boolean)>
	this->return
	this->arg#1
	arg#1->this
	arg#1->return
<java.io.ObjectInputStream: void readStreamHeader()>
<java.io.ObjectInputStream: void resetState()>
<java.io.ObjectInputStream: int read(byte[],int,int)>
	this->arg#1
	arg#3->this
	arg#3->return
	arg#3->arg#1
<java.io.ObjectInputStream: double readDouble()>
	this->return
<java.io.ObjectInputStream: byte nextTC()>
	this->return
<java.io.ObjectInputStream: int skipBytes(int)>
	arg#1->this
	arg#1->return
<java.io.ObjectInputStream: void readHierarchy(java.lang.Object,java.io.ObjectStreamClass)>
	this->arg#2
	this->arg#1
	arg#2->this
	arg#2->arg#1
	arg#1->this
	arg#1->arg#2
<java.io.ObjectInputStream: long readLong()>
	this->return
<java.io.ObjectInputStream: java.lang.String readLine()>
	this->return
<java.io.ObjectInputStream: byte[] readBlockData()>
	this->return
<java.io.ObjectInputStream: boolean readBoolean()>
<java.io.ObjectInputStream: void discardData()>
<java.io.ObjectInputStream: char readChar()>
	this->return
<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDesc()>
	this->return
<java.io.ObjectInputStream: java.lang.String getBaseName(java.lang.String)>
	arg#0->return
<java.io.ObjectInputStream: int findStreamSuperclass(java.lang.Class,java.util.List,int)>
	arg#3->return
<java.io.ObjectInputStream: void <init>(java.io.InputStream)>
	this->return
	arg#1->this
	arg#1->return
<java.io.ObjectInputStream: java.io.ObjectStreamClass readNewClassDesc(boolean)>
	this->return
<java.io.ObjectInputStream: java.lang.String formatClassSig(java.lang.String)>
	arg#0->return
<java.io.ObjectInputStream: java.lang.String readUTF()>
	this->return
<java.io.ObjectInputStream: short readShort()>
	this->return
<java.io.ObjectInputStream: void resetSeenObjects()>
<java.io.ObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>
	this->return
	this->arg#1
	arg#1->this
	arg#1->return
<java.io.ObjectInputStream: void <init>()>
	this->return
<java.io.ObjectInputStream: void readFully(byte[])>
	this->arg#1
<java.io.ObjectInputStream: boolean enableResolveObject(boolean)>
	this->return
	arg#1->this
	arg#1->return
<java.io.ObjectInputStream: int readInt()>
	this->return
<java.io.ObjectInputStream: void registerObjectRead(java.lang.Object,int,boolean)>
	arg#1->this
<java.io.ObjectInputStream: void checkReadPrimitiveTypes()>
<java.io.ObjectInputStream: int nextHandle()>
	this->return
<java.io.ObjectInputStream: void verifyAndInit(java.io.ObjectStreamClass)>
<java.io.ObjectInputStream: java.lang.Object readNewString(boolean)>
<java.io.ObjectInputStream: byte readByte()>
	this->return
<java.io.ObjectInputStream: java.util.List cacheSuperclassesFor(java.lang.Class)>
	this->return
	this->arg#1
	arg#1->this
	arg#1->return
<java.io.ObjectInputStream: java.lang.ClassLoader getClosestUserClassLoader()>
<java.io.ObjectInputStream: void pushbackTC()>
<java.io.ObjectInputStream: void close()>
<java.io.ObjectInputStream: java.lang.Object readNewObject(boolean)>
	this->return
<java.io.ObjectInputStream: void readFieldValues(java.lang.Object,java.io.ObjectStreamClass)>
	this->arg#2
	this->arg#1
	arg#2->arg#1
	arg#1->arg#2
<java.io.ObjectInputStream: void readFully(byte[],int,int)>
	this->arg#1
<java.io.ObjectInputStream: java.lang.Object resolveObject(java.lang.Object)>
	arg#1->return
<java.io.ObjectInputStream: void defaultReadObject()>
<java.io.ObjectInputStream: java.lang.Object readObject()>
	this->return
<java.io.ObjectInputStream: int readUnsignedShort()>
	this->return
<java.io.ObjectInputStream: void checkedSetSuperClassDesc(java.io.ObjectStreamClass,java.io.ObjectStreamClass)>
	arg#1->arg#0
<java.io.ObjectInputStream: void readFieldDescriptors(java.io.ObjectStreamClass)>
	this->arg#1
<java.io.FileOutputStream: void write(byte[],int,int)>
	this->arg#3
	this->arg#2
	this->arg#1
	arg#3->this
	arg#3->arg#2
	arg#3->arg#1
	arg#2->this
	arg#2->arg#3
	arg#2->arg#1
	arg#1->this
	arg#1->arg#3
	arg#1->arg#2
<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>
	this->return
	arg#1->this
	arg#1->return
<java.io.FileOutputStream: java.io.FileDescriptor getFD()>
	this->return
<java.io.FileOutputStream: void <init>(java.lang.String)>
	this->return
	arg#1->this
	arg#1->return
<java.io.FileOutputStream: void write(int)>
	arg#1->this
<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>
	this->return
<java.io.FileOutputStream: void finalize()>
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>
	this->return
	arg#1->this
	arg#1->return
<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>
	this->return
	arg#1->this
	arg#1->return
<java.io.FileOutputStream: void close()>
<java.io.FileOutputStream: void <init>(java.io.File)>
	this->return
	arg#1->this
	arg#1->return
<java.io.DataOutputStream: void writeShort(int)>
	this->arg#1
	arg#1->this
<java.io.DataOutputStream: void write(byte[],int,int)>
	this->arg#3
	this->arg#2
	this->arg#1
	arg#3->this
	arg#3->arg#2
	arg#3->arg#1
	arg#2->this
	arg#2->arg#3
	arg#2->arg#1
	arg#1->this
	arg#1->arg#3
	arg#1->arg#2
<java.io.DataOutputStream: void <init>(java.io.OutputStream)>
	this->return
	arg#1->this
	arg#1->return
<java.io.DataOutputStream: void writeDouble(double)>
	arg#1->this
<java.io.DataOutputStream: void writeChar(int)>
	this->arg#1
	arg#1->this
<java.io.DataOutputStream: void writeBoolean(boolean)>
<java.io.DataOutputStream: void writeByte(int)>
	arg#1->this
<java.io.DataOutputStream: void write(int)>
	arg#1->this
<java.io.DataOutputStream: void writeFloat(float)>
	arg#1->this
<java.io.DataOutputStream: void writeLong(long)>
	this->arg#1
	arg#1->this
<java.io.DataOutputStream: void writeUTF(java.lang.String)>
	arg#1->this
<java.io.DataOutputStream: void writeBytes(java.lang.String)>
	arg#1->this
<java.io.DataOutputStream: void writeInt(int)>
	this->arg#1
	arg#1->this
<java.io.FilterWriter: void <init>(java.io.Writer)>
	this->return
	arg#1->this
	arg#1->return
<java.io.BufferedInputStream: int read(byte[],int,int)>
	this->return
	this->arg#1
	arg#3->this
	arg#3->return
	arg#3->arg#1
<java.io.BufferedInputStream: int fillbuf(java.io.InputStream,byte[])>
	arg#1->this
	arg#1->return
	arg#1->arg#2
<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>
	this->return
	arg#1->this
	arg#1->return
<java.io.BufferedInputStream: void <init>(java.io.InputStream)>
	this->return
	arg#1->this
	arg#1->return
<java.io.BufferedInputStream: void close()>
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>
	this->return
	arg#1->this
	arg#1->return
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
	this->return
	arg#1->this
	arg#1->return
<java.io.OutputStreamWriter: java.lang.String getEncoding()>
	this->return
<java.io.OutputStreamWriter: void checkStatus()>
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.CharsetEncoder)>
	this->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.io.OutputStreamWriter: void drainEncoder()>
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>
	this->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.io.OutputStreamWriter: void close()>
<java.io.OutputStreamWriter: void flushBytes(boolean)>
<java.io.DataInputStream: int readUnsignedByte()>
	this->return
<java.io.DataInputStream: float readFloat()>
	this->return
<java.io.DataInputStream: int read(byte[],int,int)>
	this->arg#1
	arg#3->this
	arg#3->return
	arg#3->arg#1
<java.io.DataInputStream: double readDouble()>
	this->return
<java.io.DataInputStream: int skipBytes(int)>
	this->return
	arg#1->this
	arg#1->return
<java.io.DataInputStream: long readLong()>
	this->return
<java.io.DataInputStream: java.lang.String readLine()>
	this->return
<java.io.DataInputStream: boolean readBoolean()>
<java.io.DataInputStream: char readChar()>
	this->return
<java.io.DataInputStream: int read(byte[])>
	this->arg#1
<java.io.DataInputStream: void <init>(java.io.InputStream)>
	this->return
	arg#1->this
	arg#1->return
<java.io.DataInputStream: java.lang.String decodeUTF(int,java.io.DataInput)>
	arg#1->return
<java.io.DataInputStream: java.lang.String decodeUTF(int)>
	this->return
<java.io.DataInputStream: java.lang.String readUTF()>
	this->return
<java.io.DataInputStream: short readShort()>
	this->return
<java.io.DataInputStream: void readFully(byte[])>
	this->arg#1
<java.io.DataInputStream: int readInt()>
	this->return
<java.io.DataInputStream: byte readByte()>
	this->return
<java.io.DataInputStream: void readFully(byte[],int,int)>
	this->arg#1
<java.io.DataInputStream: java.lang.String readUTF(java.io.DataInput)>
	arg#0->return
<java.io.DataInputStream: int readUnsignedShort()>
	this->return
<java.io.StringWriter: void write(java.lang.String,int,int)>
	arg#1->this
<java.io.StringWriter: java.lang.String toString()>
	this->return
<java.io.StringWriter: void write(int)>
	arg#1->this
<java.io.StringWriter: void write(char[],int,int)>
	arg#1->this
<java.io.StringWriter: java.lang.StringBuffer getBuffer()>
	this->return
<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence,int,int)>
	this->return
	arg#1->this
	arg#1->return
<java.io.StringWriter: void write(java.lang.String)>
	arg#1->this
<java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>
	arg#0->return
<java.nio.CharBuffer: java.nio.CharBuffer append(java.lang.CharSequence,int,int)>
	this->return
	arg#1->this
	arg#1->return
<java.nio.CharBuffer: java.nio.CharBuffer get(char[])>
	this->return
	this->arg#1
<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String,int,int)>
	this->return
	arg#1->this
	arg#1->return
<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>
	arg#0->return
<java.nio.CharBuffer: java.lang.String toString()>
	this->return
<java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence,int,int)>
	arg#2->return
	arg#1->return
	arg#0->return
<java.nio.CharBuffer: char[] array()>
	this->return
<java.nio.CharBuffer: int read(java.nio.CharBuffer)>
	this->return
	this->arg#1
	arg#1->return
<java.nio.CharBuffer: java.nio.CharBuffer put(char[])>
	this->return
	arg#1->this
	arg#1->return
<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>
	arg#2->return
	arg#1->return
	arg#0->return
<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String)>
	this->return
	arg#1->this
	arg#1->return
<java.nio.CharBuffer: java.nio.CharBuffer append(char)>
	this->return
	arg#1->this
	arg#1->return
<java.nio.CharBuffer: java.nio.CharBuffer append(java.lang.CharSequence)>
	this->return
	arg#1->this
	arg#1->return
<java.nio.CharBuffer: java.nio.CharBuffer put(java.nio.CharBuffer)>
	this->return
	arg#1->this
	arg#1->return
<java.nio.CharBuffer: char charAt(int)>
	this->return
<java.nio.ByteBuffer: byte[] array()>
	this->return
<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>
	this->return
	arg#1->this
	arg#1->return
<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>
	arg#2->return
	arg#1->return
	arg#0->return
<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>
	this->return
	this->arg#1
<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
	arg#0->return
<java.util.Arrays$ArrayList: void <init>(java.lang.Object[])>
	this->return
	arg#1->this
	arg#1->return
<java.util.Arrays$ArrayList: java.lang.Object[] toArray()>
	this->return
<java.util.Arrays$ArrayList: java.lang.Object get(int)>
	this->return
<java.util.Arrays$ArrayList: int size()>
<java.util.HashMap$HashMapEntry: void <init>(java.lang.Object,java.lang.Object,int,java.util.HashMap$HashMapEntry)>
	this->return
	arg#4->this
	arg#4->return
	arg#3->this
	arg#3->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.util.HashMap$HashMapEntry: java.lang.Object getKey()>
	this->return
<java.util.HashMap$HashMapEntry: java.lang.Object getValue()>
	this->return
<java.util.ArrayList$ArrayListIterator: java.lang.Object next()>
	this->return
<java.util.ArrayList$ArrayListIterator: boolean hasNext()>
<java.util.ArrayList$ArrayListIterator: void <init>(java.util.ArrayList)>
	this->return
	arg#1->this
	arg#1->return
<java.util.ArrayList$ArrayListIterator: void remove()>
<java.util.ArrayList$ArrayListIterator: void <init>(java.util.ArrayList,java.util.ArrayList$1)>
	this->return
	arg#1->this
	arg#1->return
<java.util.AbstractList$FullListIterator: void <init>(java.util.AbstractList,int)>
	this->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.util.AbstractList$FullListIterator: int nextIndex()>
	this->return
<java.util.AbstractList$FullListIterator: void add(java.lang.Object)>
	arg#1->this
<java.util.AbstractList$FullListIterator: boolean hasPrevious()>
<java.util.AbstractList$FullListIterator: java.lang.Object previous()>
	this->return
<java.util.AbstractList$FullListIterator: int previousIndex()>
	this->return
<java.util.ConcurrentModificationException: void <init>()>
	this->return
<java.util.Vector$1: java.lang.Object nextElement()>
	this->return
<java.util.Vector$1: boolean hasMoreElements()>
<java.util.Vector$1: void <init>(java.util.Vector)>
	this->return
	arg#1->this
	arg#1->return
<java.util.HashMap$EntryIterator: java.lang.Object next()>
	this->return
<java.util.HashMap$EntryIterator: void <init>(java.util.HashMap)>
	this->return
	arg#1->this
	arg#1->return
<java.util.HashMap$EntryIterator: java.util.Map$Entry next()>
	this->return
<java.util.HashMap$EntryIterator: void <init>(java.util.HashMap,java.util.HashMap$1)>
	this->return
	arg#1->this
	arg#1->return
<java.util.ArrayList: boolean remove(java.lang.Object)>
<java.util.ArrayList: void removeRange(int,int)>
	arg#2->this
	arg#1->this
<java.util.ArrayList: void <init>(int)>
	this->return
<java.util.ArrayList: boolean contains(java.lang.Object)>
<java.util.ArrayList: int lastIndexOf(java.lang.Object)>
	this->return
<java.util.ArrayList: boolean isEmpty()>
<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>
	this->return
	arg#2->this
	arg#2->return
<java.util.ArrayList: boolean addAll(int,java.util.Collection)>
	this->arg#2
	arg#2->this
<java.util.ArrayList: void clear()>
<java.util.ArrayList: java.lang.Object[] toArray()>
	this->return
<java.util.ArrayList: boolean add(java.lang.Object)>
	arg#1->this
<java.util.ArrayList: void <init>(java.util.Collection)>
	this->return
	arg#1->this
	arg#1->return
<java.util.ArrayList: java.lang.Object clone()>
	this->return
<java.util.ArrayList: java.lang.Object get(int)>
	this->return
<java.util.ArrayList: java.lang.Object remove(int)>
	this->return
<java.util.ArrayList: void <init>()>
	this->return
<java.util.ArrayList: int indexOf(java.lang.Object)>
<java.util.ArrayList: void trimToSize()>
<java.util.ArrayList: int hashCode()>
<java.util.ArrayList: int newCapacity(int)>
	arg#0->return
<java.util.ArrayList: boolean addAll(java.util.Collection)>
	this->arg#1
	arg#1->this
<java.util.ArrayList: java.util.Iterator iterator()>
	this->return
<java.util.ArrayList: void ensureCapacity(int)>
<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
	this->return
	this->arg#1
	arg#1->return
<java.util.ArrayList: boolean equals(java.lang.Object)>
<java.util.ArrayList: int size()>
	this->return
<java.util.ArrayList: void add(int,java.lang.Object)>
	arg#2->this
<java.util.AbstractList$SimpleListIterator: java.lang.Object next()>
	this->return
<java.util.AbstractList$SimpleListIterator: void <init>(java.util.AbstractList)>
	this->return
	arg#1->this
	arg#1->return
<java.util.AbstractList$SimpleListIterator: boolean hasNext()>
<java.util.AbstractList$SimpleListIterator: void remove()>
<java.util.LinkedList$Link: void <init>(java.lang.Object,java.util.LinkedList$Link,java.util.LinkedList$Link)>
	this->return
	arg#3->this
	arg#3->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.util.Formatter$FormatToken: char getConversionType()>
	this->return
<java.util.Formatter$FormatToken: boolean requireArgument()>
<java.util.Formatter$FormatToken: boolean isDefault()>
<java.util.Formatter$FormatToken: boolean setFlag(int)>
<java.util.Formatter$FormatToken: void setConversionType(char)>
	arg#1->this
<java.util.Formatter$FormatToken: void <init>()>
	this->return
<java.util.Formatter$FormatToken: void <init>(java.util.Formatter$1)>
	this->return
<java.util.Formatter$FormatToken: int getArgIndex()>
	this->return
<java.util.Vector: void <init>(int)>
	this->return
<java.util.Vector: boolean contains(java.lang.Object)>
<java.util.Vector: int indexOf(java.lang.Object,int)>
<java.util.Vector: void growByOne()>
<java.util.Vector: java.lang.Object[] toArray()>
	this->return
<java.util.Vector: boolean add(java.lang.Object)>
	arg#1->this
<java.util.Vector: java.lang.Object clone()>
	this->return
<java.util.Vector: void addElement(java.lang.Object)>
	arg#1->this
<java.util.Vector: void <init>(int,int)>
	this->return
	arg#2->this
	arg#2->return
<java.util.Vector: java.lang.Object[] newElementArray(int)>
<java.util.Vector: void <init>()>
	this->return
<java.util.Vector: java.util.Enumeration elements()>
	this->return
<java.util.Vector: int size()>
	this->return
<java.util.AbstractList$SubAbstractList: void removeRange(int,int)>
	arg#2->this
	arg#1->this
<java.util.AbstractList$SubAbstractList: void <init>(java.util.AbstractList,int,int)>
	this->return
	arg#3->this
	arg#3->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.util.AbstractList$SubAbstractList: void sizeChanged(boolean)>
<java.util.AbstractList$SubAbstractList: java.lang.Object get(int)>
	this->return
<java.util.AbstractList$SubAbstractList: java.util.ListIterator listIterator(int)>
	this->return
	arg#1->return
<java.util.AbstractList$SubAbstractList: int size()>
	this->return
<java.util.regex.Pattern: void finalize()>
<java.util.regex.Matcher: void finalize()>
<java.util.HashMap: java.lang.Object get(java.lang.Object)>
	this->return
<java.util.HashMap: int roundUpToPowerOfTwo(int)>
	arg#0->return
<java.util.HashMap: boolean containsKey(java.lang.Object)>
<java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<java.util.HashMap: void <init>(int)>
	this->return
<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
	this->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.util.HashMap: void preModify(java.util.HashMap$HashMapEntry)>
<java.util.HashMap: java.util.Iterator newEntryIterator()>
	this->return
<java.util.HashMap: java.util.Set entrySet()>
	this->return
<java.util.HashMap: void addNewEntry(java.lang.Object,java.lang.Object,int,int)>
	arg#3->this
	arg#2->this
	arg#1->this
<java.util.HashMap: void constructorPut(java.lang.Object,java.lang.Object)>
	arg#2->this
	arg#1->this
<java.util.HashMap: java.util.Set keySet()>
	this->return
<java.util.HashMap: void addNewEntryForNullKey(java.lang.Object)>
	arg#1->this
<java.util.HashMap: int capacityForInitSize(int)>
	arg#0->return
<java.util.HashMap: void <init>()>
	this->return
<java.util.HashMap: java.util.HashMap$HashMapEntry[] doubleCapacity()>
	this->return
<java.util.HashMap: java.util.HashMap$HashMapEntry[] makeTable(int)>
	arg#1->this
<java.util.HashMap: java.util.Iterator newKeyIterator()>
	this->return
<java.util.HashMap: void ensureCapacity(int)>
<java.util.HashMap: java.util.HashMap$HashMapEntry constructorNewEntry(java.lang.Object,java.lang.Object,int,java.util.HashMap$HashMapEntry)>
	arg#3->return
	arg#2->return
	arg#1->return
<java.util.HashMap: int secondaryHash(int)>
	arg#0->return
<java.util.HashMap: void putAll(java.util.Map)>
<java.util.HashMap: java.lang.Object putValueForNullKey(java.lang.Object)>
	this->return
	arg#1->this
	arg#1->return
<java.util.HashMap: void <init>(java.util.Map)>
	this->return
	arg#1->this
	arg#1->return
<java.util.HashMap: int size()>
	this->return
<java.util.HashMap: void constructorPutAll(java.util.Map)>
	arg#1->this
<java.util.AbstractMap: void <init>()>
	this->return
<java.util.AbstractMap: void putAll(java.util.Map)>
<java.util.AbstractCollection: java.lang.Object[] toArray()>
	this->return
<java.util.AbstractCollection: void <init>()>
	this->return
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>
	arg#1->this
<java.util.AbstractCollection: boolean removeAll(java.util.Collection)>
	this->arg#1
	arg#1->this
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>
<java.util.AbstractCollection: boolean retainAll(java.util.Collection)>
	this->arg#1
	arg#1->this
<java.util.HashMap$KeySet: void <init>(java.util.HashMap)>
	this->return
	arg#1->this
	arg#1->return
<java.util.HashMap$KeySet: java.util.Iterator iterator()>
	this->return
<java.util.HashMap$KeySet: void <init>(java.util.HashMap,java.util.HashMap$1)>
	this->return
	arg#1->this
	arg#1->return
<java.util.HashMap$KeyIterator: java.lang.Object next()>
	this->return
<java.util.HashMap$KeyIterator: void <init>(java.util.HashMap)>
	this->return
	arg#1->this
	arg#1->return
<java.util.HashMap$KeyIterator: void <init>(java.util.HashMap,java.util.HashMap$1)>
	this->return
	arg#1->this
	arg#1->return
<java.util.TreeMap$MapIterator: void <init>(java.util.TreeMap,java.util.TreeMap$Node)>
	this->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.util.TreeMap$MapIterator: boolean hasNext()>
<java.util.TreeMap$MapIterator: java.util.TreeMap$Node stepForward()>
	this->return
<java.util.HashSet: boolean remove(java.lang.Object)>
<java.util.HashSet: boolean contains(java.lang.Object)>
<java.util.HashSet: void <init>(java.util.HashMap)>
	this->return
	arg#1->this
	arg#1->return
<java.util.HashSet: boolean add(java.lang.Object)>
	arg#1->this
<java.util.HashSet: void <init>()>
	this->return
<java.util.HashSet: java.util.Iterator iterator()>
	this->return
<java.util.HashSet: int size()>
	this->return
<java.util.Formatter: void doFormat(java.lang.String,java.lang.Object[])>
	this->arg#1
	arg#2->this
	arg#2->arg#1
	arg#1->this
<java.util.Formatter: java.lang.String toString()>
	this->return
<java.util.Formatter: java.lang.Object getArgument(java.lang.Object[],int,java.util.Formatter$FormatSpecifierParser,java.lang.Object,boolean)>
	arg#1->return
<java.util.Formatter: java.lang.CharSequence transform(java.util.Formatter$FormatToken,java.lang.Object)>
	arg#2->this
	arg#2->return
	arg#1->this
<java.util.Formatter: void <init>(java.lang.Appendable,java.util.Locale)>
	this->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>
	this->return
	this->arg#1
	arg#2->this
	arg#2->return
	arg#2->arg#1
	arg#1->this
	arg#1->return
<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>
	this->return
	this->arg#2
	this->arg#1
	arg#3->this
	arg#3->return
	arg#3->arg#2
	arg#3->arg#1
	arg#2->this
	arg#2->return
	arg#2->arg#1
	arg#1->this
	arg#1->return
	arg#1->arg#2
<java.util.Formatter: void outputCharSequence(java.lang.CharSequence,int,int)>
	arg#1->this
<java.util.Formatter: void checkNotClosed()>
<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>
	this->return
<java.util.HashMap$EntrySet: void <init>(java.util.HashMap)>
	this->return
	arg#1->this
	arg#1->return
<java.util.HashMap$EntrySet: java.util.Iterator iterator()>
	this->return
<java.util.HashMap$EntrySet: void <init>(java.util.HashMap,java.util.HashMap$1)>
	this->return
	arg#1->this
	arg#1->return
<java.util.HashMap$EntrySet: int size()>
	this->return
<java.util.TreeMap$Node: java.util.TreeMap$Node first()>
	this->return
<java.util.TreeMap$Node: java.util.TreeMap$Node next()>
	this->return
<java.util.TreeMap$Node: void <init>(java.util.TreeMap$Node,java.lang.Object)>
	this->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: java.lang.Object next()>
	this->return
<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: int nextIndex()>
	this->return
<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: void add(java.lang.Object)>
	arg#1->this
<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: boolean hasNext()>
<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: boolean hasPrevious()>
<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: void remove()>
<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: java.lang.Object previous()>
	this->return
<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: int previousIndex()>
	this->return
<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: void <init>(java.util.ListIterator,java.util.AbstractList$SubAbstractList,int,int)>
	this->return
	arg#4->this
	arg#4->return
	arg#3->this
	arg#3->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.util.TreeMap$KeySet: void <init>(java.util.TreeMap)>
	this->return
	arg#1->this
	arg#1->return
<java.util.TreeMap$KeySet: java.util.Iterator iterator()>
	this->return
<java.util.TreeSet: boolean contains(java.lang.Object)>
	this->arg#1
	arg#1->this
<java.util.TreeSet: boolean add(java.lang.Object)>
	this->arg#1
	arg#1->this
<java.util.TreeSet: void <init>()>
	this->return
<java.util.TreeSet: java.util.Iterator iterator()>
	this->return
<java.util.TreeSet: int size()>
	this->return
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
	this->return
	arg#2->this
	arg#2->return
<java.util.Hashtable: int secondaryHash(int)>
	arg#0->return
<java.util.AbstractList$SubAbstractListRandomAccess: void <init>(java.util.AbstractList,int,int)>
	this->return
	arg#3->this
	arg#3->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.util.LinkedList: boolean addLastImpl(java.lang.Object)>
	arg#1->this
<java.util.LinkedList: java.lang.Object[] toArray()>
	this->return
<java.util.LinkedList: boolean add(java.lang.Object)>
	arg#1->this
<java.util.LinkedList: void <init>()>
	this->return
<java.util.Formatter$FormatSpecifierParser: java.util.Formatter$FormatToken parseConversionType(java.util.Formatter$FormatToken)>
	this->return
	this->arg#1
	arg#1->return
<java.util.Formatter$FormatSpecifierParser: char advance()>
	this->return
<java.util.Formatter$FormatSpecifierParser: void <init>(java.lang.String)>
	this->return
	arg#1->this
	arg#1->return
<java.util.Formatter$FormatSpecifierParser: int peek()>
	this->return
<java.util.Formatter$FormatSpecifierParser: java.util.Formatter$FormatToken parseArgumentIndexAndFlags(java.util.Formatter$FormatToken)>
	this->return
	this->arg#1
	arg#1->return
<java.util.Formatter$FormatSpecifierParser: java.util.Formatter$FormatToken parseFormatToken(int)>
	this->return
	arg#1->this
	arg#1->return
<java.util.Formatter$FormatSpecifierParser: int access$000(java.util.Formatter$FormatSpecifierParser)>
	arg#0->return
<java.util.Locale: void setDefault(java.util.Locale)>
<java.util.Locale: java.util.Locale getDefault()>
<java.util.Locale: java.lang.String toString()>
	this->return
<java.util.Locale: java.lang.String toNewString()>
	this->return
<java.util.TreeMap$KeySet$1: java.lang.Object next()>
	this->return
<java.util.TreeMap$KeySet$1: void <init>(java.util.TreeMap$KeySet,java.util.TreeMap$Node)>
	this->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.util.AbstractList: void clear()>
<java.util.AbstractList: java.util.List subList(int,int)>
	this->return
	arg#2->return
	arg#1->return
<java.util.AbstractList: void <init>()>
	this->return
<java.util.AbstractList: java.util.Iterator iterator()>
	this->return
<java.util.AbstractList: java.util.ListIterator listIterator(int)>
	this->return
	arg#1->return
<java.util.AbstractList: java.util.ListIterator listIterator()>
	this->return
<java.util.NoSuchElementException: void <init>()>
	this->return
<java.util.HashMap$HashIterator: void <init>(java.util.HashMap)>
	this->return
	arg#1->this
	arg#1->return
<java.util.HashMap$HashIterator: boolean hasNext()>
<java.util.HashMap$HashIterator: java.util.HashMap$HashMapEntry nextEntry()>
	this->return
<java.util.Random: void <init>()>
	this->return
<java.util.Random: void setSeed(long)>
	arg#1->this
<java.util.AbstractSequentialList: void <init>()>
	this->return
<java.util.AbstractSet: void <init>()>
	this->return
<java.util.TreeMap: boolean containsKey(java.lang.Object)>
	this->arg#1
	arg#1->this
<java.util.TreeMap: void replaceInParent(java.util.TreeMap$Node,java.util.TreeMap$Node)>
	arg#2->this
	arg#2->arg#1
	arg#1->arg#2
<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
	this->arg#1
	arg#2->this
	arg#2->arg#1
	arg#1->this
<java.util.TreeMap: void rotateLeft(java.util.TreeMap$Node)>
	arg#1->this
<java.util.TreeMap: java.util.Set keySet()>
	this->return
<java.util.TreeMap: java.util.TreeMap$Node find(java.lang.Object,java.util.TreeMap$Relation)>
	this->return
	this->arg#1
	arg#1->this
	arg#1->return
<java.util.TreeMap: void <init>()>
	this->return
<java.util.TreeMap: void rebalance(java.util.TreeMap$Node,boolean)>
	arg#1->this
<java.util.TreeMap: java.lang.Object putInternal(java.lang.Object,java.lang.Object)>
	this->arg#1
	arg#2->this
	arg#2->arg#1
	arg#1->this
<java.util.TreeMap: java.util.TreeMap$Node findByObject(java.lang.Object)>
	this->return
	this->arg#1
	arg#1->this
	arg#1->return
<java.util.TreeMap: int size()>
	this->return
<java.util.Arrays: void checkStartAndEnd(int,int,int)>
<java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>
<java.util.Arrays: java.lang.String toString(java.lang.Object[])>
	arg#0->return
<java.util.Arrays: void checkOffsetAndCount(int,int,int)>
<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>
<java.util.Arrays: java.util.List asList(java.lang.Object[])>
	arg#0->return
<java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>
	arg#1->arg#0
<java.net.Authenticator: void <clinit>()>
<java.net.Authenticator: void setDefault(java.net.Authenticator)>
<java.net.ResponseCache: void <clinit>()>
<java.net.ResponseCache: void setDefault(java.net.ResponseCache)>
<java.net.CookieHandler: void setDefault(java.net.CookieHandler)>
<java.net.NetPermission: void <init>(java.lang.String)>
	this->return
<java.util.Vector: java.lang.Object lastElement()>
	this->return
<java.util.Vector: java.lang.Object firstElement()>
	this->return
<java.util.Vector: java.lang.Object set(int,java.lang.Object)>
	this->return
	arg#2->this
	arg#2->return
<java.util.Vector: void copyInto(java.lang.Object[])>
	this->arg#1
<java.util.Vector: java.util.List subList(int,int)>
	this->return
	arg#2->return
	arg#1->return
<java.util.Vector: java.lang.String toString()>
	this->return
<java.util.Vector: java.lang.Object[] toArray()>
	this->return
<java.util.Vector: java.lang.Object elementAt(int)>
	this->return
<java.util.Vector: boolean add(java.lang.Object)>
	arg#1->this
<java.util.Vector: void addElement(java.lang.Object)>
	arg#1->this
<java.util.Vector: java.lang.Object get(int)>
	this->return
<java.util.Vector: java.util.Enumeration elements()>
	this->return
<java.util.Vector: void insertElementAt(java.lang.Object,int)>
	arg#1->this
<java.util.Vector: void setElementAt(java.lang.Object,int)>
	arg#1->this
<java.util.Vector: void add(int,java.lang.Object)>
	arg#2->this
<java.util.HashSet: boolean remove(java.lang.Object)>
<java.util.HashSet: boolean contains(java.lang.Object)>
<java.util.HashSet: void <init>(java.util.HashMap)>
	this->return
	arg#1->this
	arg#1->return
<java.util.HashSet: boolean add(java.lang.Object)>
	arg#1->this
<java.util.HashSet: void <init>()>
	this->return
<java.util.HashSet: java.util.Iterator iterator()>
	this->return
<java.util.LinkedList: void addLast(java.lang.Object)>
	arg#1->this
<java.util.LinkedList: java.lang.Object set(int,java.lang.Object)>
	this->return
	arg#2->this
	arg#2->return
<java.util.LinkedList: void push(java.lang.Object)>
	arg#1->this
<java.util.LinkedList: boolean add(java.lang.Object)>
	arg#1->this
<java.util.LinkedList: void addFirst(java.lang.Object)>
	arg#1->this
<java.util.LinkedList: boolean offer(java.lang.Object)>
	arg#1->this
<java.util.LinkedList: void add(int,java.lang.Object)>
	arg#2->this
<java.net.URI: java.net.URI create(java.lang.String)>
	arg#0->return
<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
	this->return
	arg#4->this
	arg#4->return
	arg#3->this
	arg#3->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.net.URI: java.net.URL toURL()>
	this->return
<java.net.URI: java.lang.String toString()>
	this->return
<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
	this->return
	arg#5->this
	arg#5->return
	arg#4->this
	arg#4->return
	arg#3->this
	arg#3->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.net.URI: void <init>(java.lang.String)>
	this->return
	arg#1->this
	arg#1->return
<java.net.URI: java.lang.String toASCIIString()>
	this->return
<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String)>
	this->return
	arg#3->this
	arg#3->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.net.URLConnection: int getConnectTimeout()>
	this->return
<java.net.URLConnection: void setDoInput(boolean)>
	arg#1->this
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>
<java.net.URLConnection: boolean getDefaultUseCaches()>
<java.net.URLConnection: java.lang.String getRequestProperty(java.lang.String)>
<java.net.URLConnection: boolean getAllowUserInteraction()>
	this->return
<java.net.URLConnection: void setAllowUserInteraction(boolean)>
	arg#1->this
<java.net.URLConnection: boolean getDefaultAllowUserInteraction()>
<java.net.URLConnection: long getIfModifiedSince()>
	this->return
<java.net.URLConnection: void setDoOutput(boolean)>
	arg#1->this
<java.net.URLConnection: void setIfModifiedSince(long)>
	arg#1->this
<java.net.URLConnection: boolean getUseCaches()>
	this->return
<java.net.URLConnection: java.lang.String toString()>
	this->return
<java.net.URLConnection: void setConnectTimeout(int)>
	arg#1->this
<java.net.URLConnection: java.net.FileNameMap getFileNameMap()>
<java.net.URLConnection: int getReadTimeout()>
	this->return
<java.net.URLConnection: boolean getDoOutput()>
	this->return
<java.net.URLConnection: void setDefaultAllowUserInteraction(boolean)>
<java.net.URLConnection: void setUseCaches(boolean)>
	arg#1->this
<java.net.URLConnection: java.lang.String getContentEncoding()>
<java.net.URLConnection: java.net.URL getURL()>
	this->return
<java.net.URLConnection: boolean getDoInput()>
	this->return
<java.net.URLConnection: java.lang.String getDefaultRequestProperty(java.lang.String)>
<java.net.URLConnection: void setDefaultUseCaches(boolean)>
<java.net.URLConnection: void setReadTimeout(int)>
	arg#1->this
<java.net.URLConnection: void setDefaultRequestProperty(java.lang.String,java.lang.String)>
<java.net.URLConnection: void <init>(java.net.URL)>
	this->return
	arg#1->this
	arg#1->return
<java.net.URLConnection: java.lang.String guessContentTypeFromStream(java.io.InputStream)>
<java.net.URLConnection: void checkNotConnected()>
<java.net.URLConnection: void setFileNameMap(java.net.FileNameMap)>
<java.net.InetSocketAddress: int getPort()>
	this->return
<java.net.InetSocketAddress: java.net.InetAddress getAddress()>
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>
	this->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.net.InetSocketAddress: void <init>(java.lang.String,int,boolean)>
	this->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>
	arg#1->return
	arg#0->return
<java.net.InetSocketAddress: java.lang.String toString()>
	this->return
<java.net.InetSocketAddress: java.lang.String getHostName()>
	this->return
<java.net.InetSocketAddress: boolean isUnresolved()>
<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>
	this->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>
	this->return
	arg#4->this
	arg#4->return
	arg#3->this
	arg#3->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.net.URL: java.lang.String getPath()>
	this->return
<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>
	this->return
	arg#4->this
	arg#4->return
	arg#3->this
	arg#3->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.net.URL: void <init>(java.net.URL,java.lang.String)>
	this->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.net.URL: java.lang.String getFile()>
	this->return
<java.net.URL: java.lang.String toExternalForm()>
	this->return
<java.net.URL: java.lang.String toString()>
	this->return
<java.net.URL: java.net.URI toURI()>
	this->return
<java.net.URL: void <init>(java.lang.String)>
	this->return
	arg#1->this
	arg#1->return
<java.net.URL: java.net.URLConnection openConnection()>
	this->return
<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>
	this->return
	arg#3->this
	arg#3->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.net.URL: java.lang.String getHost()>
	this->return
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>
	this->return
	arg#1->return
<java.net.URL: java.lang.String getQuery()>
	this->return
<java.net.InetAddress: java.net.InetAddress[] lookupHostByName(java.lang.String)>
	arg#0->return
<java.net.InetAddress: java.net.InetAddress makeInetAddress(byte[],java.lang.String)>
	arg#1->return
	arg#0->return
<java.net.InetAddress: java.net.InetAddress[] getAllByNameImpl(java.lang.String)>
	arg#0->return
<java.net.InetAddress: java.lang.String toString()>
	this->return
<java.net.InetAddress: java.lang.String getCanonicalHostName()>
<java.net.InetAddress: java.lang.String getHostAddress()>
	this->return
<java.net.InetAddress: java.net.InetAddress[] loopbackAddresses()>
<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>
	arg#0->return
<java.net.InetAddress: byte[] getAddress()>
	this->return
<java.net.InetAddress: void <init>(int,byte[],java.lang.String)>
	this->return
	arg#3->this
	arg#3->return
	arg#2->this
	arg#2->return
	arg#1->this
	arg#1->return
<java.net.InetAddress: java.net.InetAddress disallowDeprecatedFormats(java.lang.String,java.net.InetAddress)>
	arg#1->return
	arg#0->return
<java.net.InetAddress: java.lang.String getHostName()>
	this->return
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
	arg#0->return
<java.net.InetAddress: byte[] ipv4MappedToIPv4(byte[])>
	arg#0->return
<java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[],int)>
	arg#2->return
	arg#1->return
	arg#0->return
<java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])>
	arg#1->return
	arg#0->return
<java.net.InetAddress: java.net.InetAddress getLocalHost()>
<java.net.InetAddress: boolean equals(java.lang.Object)>
<java.net.InetAddress: boolean isIPv4MappedAddress(byte[])>
<java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>
	arg#0->return
<java.net.InetAddress: java.net.InetAddress parseNumericAddressNoThrow(java.lang.String)>
	arg#0->return
<java.net.InetAddress: java.net.InetAddress getHostByAddrImpl(java.net.InetAddress)>
	arg#0->return
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>
	arg#0->return
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>
	arg#0->return
<android.location.Location: void setLatitude(double)>
	arg#1->this
<android.location.Location: java.lang.String getProvider()>
	this->return
<android.location.Location: float access$1002(android.location.Location,float)>
	arg#1->return
	arg#1->arg#0
<android.location.Location: float getBearing()>
	this->return
<android.location.Location: void set(android.location.Location)>
	arg#1->this
<android.location.Location: void setBearing(float)>
	arg#1->this
<android.location.Location: void setLongitude(double)>
	arg#1->this
<android.location.Location: boolean hasAccuracy()>
	this->return
<android.location.Location: void setExtras(android.os.Bundle)>
	arg#1->this
<android.location.Location: void writeToParcel(android.os.Parcel,int)>
	this->arg#1
<android.location.Location: double access$402(android.location.Location,double)>
	arg#1->return
	arg#1->arg#0
<android.location.Location: void reset()>
<android.location.Location: boolean access$302(android.location.Location,boolean)>
	arg#1->return
	arg#1->arg#0
<android.location.Location: void removeBearing()>
<android.location.Location: void removeAccuracy()>
<android.location.Location: double access$202(android.location.Location,double)>
	arg#1->return
	arg#1->arg#0
<android.location.Location: boolean access$702(android.location.Location,boolean)>
	arg#1->return
	arg#1->arg#0
<android.location.Location: double access$102(android.location.Location,double)>
	arg#1->return
	arg#1->arg#0
<android.location.Location: float access$602(android.location.Location,float)>
	arg#1->return
	arg#1->arg#0
<android.location.Location: long getTime()>
	this->return
<android.location.Location: float getSpeed()>
	this->return
<android.location.Location: android.os.Bundle getExtras()>
	this->return
<android.location.Location: void setTime(long)>
	arg#1->this
<android.location.Location: void removeAltitude()>
<android.location.Location: void setAltitude(double)>
	arg#1->this
<android.location.Location: void setAccuracy(float)>
	arg#1->this
<android.location.Location: void <init>(java.lang.String)>
	this->return
	arg#1->this
	arg#1->return
<android.location.Location: double getLongitude()>
	this->return
<android.location.Location: void distanceBetween(double,double,double,double,float[])>
	arg#3->arg#4
	arg#2->arg#4
	arg#1->arg#4
	arg#0->arg#4
<android.location.Location: int describeContents()>
<android.location.Location: void setSpeed(float)>
	arg#1->this
<android.location.Location: boolean access$502(android.location.Location,boolean)>
	arg#1->return
	arg#1->arg#0
<android.location.Location: double getLatitude()>
	this->return
<android.location.Location: float getAccuracy()>
	this->return
<android.location.Location: void removeSpeed()>
<android.location.Location: boolean hasBearing()>
	this->return
<android.location.Location: void computeDistanceAndBearing(double,double,double,double,float[])>
	arg#3->arg#4
	arg#2->arg#4
	arg#1->arg#4
	arg#0->arg#4
<android.location.Location: float access$802(android.location.Location,float)>
	arg#1->return
	arg#1->arg#0
<android.location.Location: long access$002(android.location.Location,long)>
	arg#1->return
	arg#1->arg#0
<android.location.Location: boolean hasAltitude()>
	this->return
<android.location.Location: float distanceTo(android.location.Location)>
	this->return
	arg#1->this
	arg#1->return
<android.location.Location: double getAltitude()>
	this->return
<android.location.Location: boolean hasSpeed()>
	this->return
<android.location.Location: void <init>(android.location.Location)>
	this->return
	arg#1->this
	arg#1->return
<android.location.Location: boolean access$902(android.location.Location,boolean)>
	arg#1->return
	arg#1->arg#0
<android.location.Location: android.os.Bundle access$1102(android.location.Location,android.os.Bundle)>
	arg#1->return
	arg#1->arg#0
<android.location.Address: void setCountryName(java.lang.String)>
	arg#1->this
<android.location.Address: void setLatitude(double)>
	arg#1->this
<android.location.Address: java.lang.String getCountryName()>
	this->return
<android.location.Address: boolean hasLatitude()>
	this->return
<android.location.Address: java.lang.String getAdminArea()>
	this->return
<android.location.Address: void setCountryCode(java.lang.String)>
	arg#1->this
<android.location.Address: java.util.Locale getLocale()>
	this->return
<android.location.Address: void <init>(java.util.Locale)>
	this->return
	arg#1->this
	arg#1->return
<android.location.Address: boolean hasLongitude()>
	this->return
<android.location.Address: void <clinit>()>
<android.location.Address: void setLongitude(double)>
	arg#1->this
<android.location.Address: java.lang.String getSubLocality()>
	this->return
<android.location.Address: void clearLongitude()>
<android.location.Address: void setExtras(android.os.Bundle)>
	arg#1->this
<android.location.Address: java.lang.String getFeatureName()>
	this->return
<android.location.Address: void writeToParcel(android.os.Parcel,int)>
	this->arg#1
<android.location.Address: void setPhone(java.lang.String)>
	arg#1->this
<android.location.Address: java.lang.String getThoroughfare()>
	this->return
<android.location.Address: void setLocality(java.lang.String)>
	arg#1->this
<android.location.Address: void setPostalCode(java.lang.String)>
	arg#1->this
<android.location.Address: java.lang.String getPhone()>
	this->return
<android.location.Address: android.os.Bundle getExtras()>
	this->return
<android.location.Address: java.lang.String toString()>
	this->return
<android.location.Address: java.lang.String getSubAdminArea()>
	this->return
<android.location.Address: void setSubAdminArea(java.lang.String)>
	arg#1->this
<android.location.Address: void setUrl(java.lang.String)>
	arg#1->this
<android.location.Address: java.lang.String getPostalCode()>
	this->return
<android.location.Address: void setFeatureName(java.lang.String)>
	arg#1->this
<android.location.Address: double getLongitude()>
	this->return
<android.location.Address: java.lang.String getLocality()>
	this->return
<android.location.Address: java.lang.String getPremises()>
	this->return
<android.location.Address: int describeContents()>
<android.location.Address: java.lang.String getSubThoroughfare()>
	this->return
<android.location.Address: double getLatitude()>
	this->return
<android.location.Address: void clearLatitude()>
<android.location.Address: java.lang.String getCountryCode()>
	this->return
<android.location.Address: int getMaxAddressLineIndex()>
	this->return
<android.location.Address: void setThoroughfare(java.lang.String)>
	arg#1->this
<android.location.Address: java.lang.String getUrl()>
	this->return
<android.location.Address: void setAdminArea(java.lang.String)>
	arg#1->this
<android.util.Base64: byte[] decode(byte[],int)>
<android.util.Base64: byte[] encode(byte[],int,int,int)>
	arg#3->return
<android.util.Base64: void <clinit>()>
<android.util.Base64: java.lang.String encodeToString(byte[],int,int,int)>
	arg#3->return
<android.util.Base64: byte[] decode(byte[],int,int,int)>
<android.util.Base64: java.lang.String encodeToString(byte[],int)>
	arg#1->return
<android.util.Base64: byte[] encode(byte[],int)>
	arg#1->return
<android.util.Base64: byte[] decode(java.lang.String,int)>
<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int,java.lang.Object)>
	arg#4->return
	arg#3->return
	arg#2->return
	arg#1->return
	arg#0->return
<android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>
	arg#2->return
	arg#1->return
	arg#0->return
<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int)>
	arg#3->return
	arg#2->return
	arg#1->return
	arg#0->return
<android.os.Message: long getWhen()>
	this->return
<android.os.Message: void writeToParcel(android.os.Parcel,int)>
	this->arg#1
<android.os.Message: void readFromParcel(android.os.Parcel)>
	arg#1->this
<android.os.Message: android.os.Message obtain()>
<android.os.Message: java.lang.String toString(long)>
	this->return
	this->arg#1
	arg#1->this
	arg#1->return
<android.os.Message: java.lang.String toString()>
	this->return
<android.os.Message: void setData(android.os.Bundle)>
	arg#1->this
<android.os.Message: android.os.Message obtain(android.os.Handler,int)>
	arg#1->return
	arg#0->return
<android.os.Message: android.os.Message obtain(android.os.Message)>
	arg#0->return
<android.os.Message: void access$000(android.os.Message,android.os.Parcel)>
	arg#1->arg#0
<android.os.Message: void setTarget(android.os.Handler)>
	arg#1->this
<android.os.Message: java.lang.Runnable getCallback()>
	this->return
<android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)>
	arg#1->return
	arg#0->return
<android.os.Message: void copyFrom(android.os.Message)>
	arg#1->this
<android.os.Message: android.os.Handler getTarget()>
	this->return
<android.os.Message: int describeContents()>
<android.os.Message: void <init>()>
	this->return
<android.os.Message: android.os.Message obtain(android.os.Handler)>
	arg#0->return
<android.os.Message: void markInUse()>
<android.os.Message: void recycle()>
<android.os.Message: boolean isInUse()>
<android.os.Message: void clearForRecycle()>
<android.os.Message: android.os.Bundle peekData()>
	this->return
<android.os.Message: android.os.Bundle getData()>
	this->return
<android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)>
	this->return
<android.os.Bundle: char getChar(java.lang.String,char)>
	this->return
	arg#2->return
##<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])>
##	arg#2->this
<android.os.Bundle: short getShort(java.lang.String,short)>
	this->return
	arg#2->return
<android.os.Bundle: void putCharSequenceArrayList(java.lang.String,java.util.ArrayList)>
	arg#2->this
<android.os.Bundle: void unparcel()>
<android.os.Bundle: void remove(java.lang.String)>
<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>
	this->return
<android.os.Bundle: char getChar(java.lang.String)>
	this->return
	arg#1->this
	arg#1->return
<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)>
	arg#2->this
<android.os.Bundle: int[] getIntArray(java.lang.String)>
	this->return
<android.os.Bundle: byte getByte(java.lang.String)>
	this->return
	arg#1->this
	arg#1->return
<android.os.Bundle: void putShort(java.lang.String,short)>
	arg#2->this
<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>
	this->return
	arg#2->return
<android.os.Bundle: void putDouble(java.lang.String,double)>
	arg#2->this
<android.os.Bundle: void putDoubleArray(java.lang.String,double[])>
	arg#2->this
<android.os.Bundle: void <init>(int)>
	this->return
	arg#1->this
	arg#1->return
<android.os.Bundle: void putChar(java.lang.String,char)>
	arg#2->this
<android.os.Bundle: void putIntArray(java.lang.String,int[])>
	arg#2->this
<android.os.Bundle: void putLongArray(java.lang.String,long[])>
	arg#2->this
<android.os.Bundle: long getLong(java.lang.String,long)>
	this->return
	arg#2->return
<android.os.Bundle: double[] getDoubleArray(java.lang.String)>
	this->return
<android.os.Bundle: boolean isEmpty()>
<android.os.Bundle: void writeToParcel(android.os.Parcel,int)>
	this->arg#1
	arg#1->this
<android.os.Bundle: boolean[] getBooleanArray(java.lang.String)>
	this->return
<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)>
	this->return
<android.os.Bundle: void clear()>
<android.os.Bundle: short[] getShortArray(java.lang.String)>
	this->return
<android.os.Bundle: void readFromParcel(android.os.Parcel)>
	arg#1->this
<android.os.Bundle: java.util.ArrayList getIntegerArrayList(java.lang.String)>
	this->return
<android.os.Bundle: void <init>(java.lang.ClassLoader)>
	this->return
	arg#1->this
	arg#1->return
<android.os.Bundle: double getDouble(java.lang.String)>
	this->return
<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)>
	arg#2->this
<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)>
	arg#2->this
<android.os.Bundle: byte[] getByteArray(java.lang.String)>
	this->return
<android.os.Bundle: boolean hasFileDescriptors()>
	this->return
<android.os.Bundle: java.lang.Byte getByte(java.lang.String,byte)>
	this->return
	arg#2->return
<android.os.Bundle: java.lang.String toString()>
	this->return
<android.os.Bundle: int getInt(java.lang.String,int)>
	this->return
	arg#2->return
<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>
	arg#2->this
<android.os.Bundle: java.lang.Object clone()>
	this->return
<android.os.Bundle: void <init>(android.os.Bundle)>
	this->return
	arg#1->this
	arg#1->return
<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)>
	arg#2->this
<android.os.Bundle: java.util.Set keySet()>
	this->return
<android.os.Bundle: void putFloatArray(java.lang.String,float[])>
	arg#2->this
<android.os.Bundle: void putBooleanArray(java.lang.String,boolean[])>
	arg#2->this
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
	arg#2->this
<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>
	arg#2->this
<android.os.Bundle: void putString(java.lang.String,java.lang.String)>
<android.os.Bundle: void putByte(java.lang.String,byte)>
	arg#2->this
<android.os.Bundle: java.util.ArrayList getCharSequenceArrayList(java.lang.String)>
	this->return
<android.os.Bundle: int describeContents()>
<android.os.Bundle: void <init>()>
	this->return
<android.os.Bundle: java.lang.String[] getStringArray(java.lang.String)>
	this->return
<android.os.Bundle: java.lang.Object get(java.lang.String)>
	this->return
<android.os.Bundle: short getShort(java.lang.String)>
	this->return
	arg#1->this
	arg#1->return
<android.os.Bundle: void putShortArray(java.lang.String,short[])>
	arg#2->this
<android.os.Bundle: void putLong(java.lang.String,long)>
	arg#2->this
<android.os.Bundle: float[] getFloatArray(java.lang.String)>
	this->return
<android.os.Bundle: void putAll(android.os.Bundle)>
	arg#1->this
<android.os.Bundle: void putCharSequenceArray(java.lang.String,java.lang.CharSequence[])>
	arg#2->this
<android.os.Bundle: void putFloat(java.lang.String,float)>
	arg#2->this
<android.os.Bundle: void putByteArray(java.lang.String,byte[])>
	arg#2->this
<android.os.Bundle: char[] getCharArray(java.lang.String)>
	this->return
<android.os.Bundle: boolean containsKey(java.lang.String)>
<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)>
	this->return
<android.os.Bundle: long[] getLongArray(java.lang.String)>
	this->return
<android.os.Bundle: long getLong(java.lang.String)>
	this->return
<android.os.Bundle: void putBoolean(java.lang.String,boolean)>
	arg#2->this
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)>
	this->return
<android.os.Bundle: int getInt(java.lang.String)>
	this->return
<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)>
	this->return
<android.os.Bundle: void readFromParcelInner(android.os.Parcel,int)>
	arg#2->this
	arg#2->arg#1
	arg#1->this
	arg#1->arg#2
<android.os.Bundle: java.lang.String getString(java.lang.String)>
	this->return
<android.os.Bundle: java.lang.CharSequence[] getCharSequenceArray(java.lang.String)>
	this->return
<android.os.Bundle: float getFloat(java.lang.String,float)>
	this->return
	arg#2->return
<android.os.Bundle: void putInt(java.lang.String,int)>
	arg#2->this
<android.os.Bundle: void <init>(android.os.Parcel,int)>
	this->return
	arg#2->this
	arg#2->return
	arg#2->arg#1
	arg#1->this
	arg#1->return
	arg#1->arg#2
<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)>
	this->return
<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])>
	arg#2->this
<android.os.Bundle: boolean getBoolean(java.lang.String)>
	this->return
<android.os.Bundle: float getFloat(java.lang.String)>
	this->return
<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)>
	arg#2->this
<android.os.Bundle: void putCharArray(java.lang.String,char[])>
	arg#2->this
<android.os.Bundle: double getDouble(java.lang.String,double)>
	this->return
	arg#2->return
<android.os.Bundle: int size()>
	this->return
<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>
	this->return
<android.text.Html: void withinStyle(java.lang.StringBuilder,android.text.Spanned,int,int)>
	arg#1->arg#0
<android.text.Html: void withinDiv(java.lang.StringBuilder,android.text.Spanned,int,int)>
	arg#1->arg#0
<android.text.Html: java.lang.String toHtml(android.text.Spanned)>
	arg#0->return
<android.text.Html: void withinBlockquote(java.lang.StringBuilder,android.text.Spanned,int,int)>
	arg#1->arg#0
<android.text.Html: android.text.Spanned fromHtml(java.lang.String,android.text.Html$ImageGetter,android.text.Html$TagHandler)>
<android.text.Html: void withinParagraph(java.lang.StringBuilder,android.text.Spanned,int,int,int,boolean)>
	arg#1->arg#0
<android.text.Html: android.text.Spanned fromHtml(java.lang.String)>
<android.text.Html: void withinHtml(java.lang.StringBuilder,android.text.Spanned)>
	arg#1->arg#0
<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence)>
	this->return
<android.text.SpannableStringBuilder: java.lang.String toString()>
	this->return
<android.text.SpannableStringBuilder: int length()>
	this->return
<android.text.SpannableStringBuilder: void checkRange(java.lang.String,int,int)>
<android.text.SpannableStringBuilder: void <init>()>
	this->return
<android.text.SpannableStringBuilder: void getChars(int,int,char[],int)>
	this->arg#3
<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence,int,int)>
	this->return
	arg#3->this
	arg#3->return
	arg#2->this
	arg#2->return
<android.text.format.Formatter: java.lang.String formatIpAddress(int)>
	arg#0->return
