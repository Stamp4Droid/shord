<?xml version="1.0" encoding="UTF-8"?>
<project name="STAMP-SolverGen">

  <target name="-prepare-backend-solvergen">
    <!-- Compile SolverGen analysis. -->
    <property name="stamp.solvergen.analysis" value="s-k-h-al"/>
    <runtarget target="make-cfl-solver"/>

    <!-- Prepare SolverGen I/O directories. -->
    <mkdir dir="${stamp.out.dir}/input"/>
    <mkdir dir="${stamp.out.dir}/output"/>

    <!-- Register backend-specific analyses. -->
    <property name="stamp.analyses.main"
	      value="cfl-dlog,facts-dumper-java,cfl-solver-runner-java,dat-rel-parser-java"/>

    <!-- Set backend-specific system properties. -->
    <!-- Facts Dumper options -->
    <property name="stamp.dumper.templatesdir"
	      location="${stamp.dir}/solvergen/input"/>
    <property name="stamp.dumper.outdir"
	      location="${stamp.out.dir}/input"/>
    <property name="stamp.dumper.accrange.printindex" value="false"/>
    <!-- Solver Runner options -->
    <property name="stamp.solvergen.workdir"
	      location="${stamp.out.dir}"/>
    <require-prop property="stamp.solvergen.executable"
		  description="path to generated SolverGen executable"/>
    <!-- DAT Parser options -->
    <property name="stamp.datparser.indir"
	      location="${stamp.out.dir}/output"/>
    <property name="stamp.datparser.templatesdir"
	      location="${stamp.dir}/solvergen/output"/>

    <!-- Register backend-specific system properties. -->
    <propertyset id="stamp.analyses.main.sysprops">
      <propertyref name="stamp.dumper.templatesdir"/>
      <propertyref name="stamp.dumper.outdir"/>
      <propertyref name="stamp.dumper.accrange.printindex"/>
      <propertyref name="stamp.solvergen.workdir"/>
      <propertyref name="stamp.solvergen.executable"/>
      <propertyref name="stamp.datparser.indir"/>
      <propertyref name="stamp.datparser.templatesdir"/>
    </propertyset>
  </target>

  <target name="make-cfl-solver">
    <!-- Read required properties. -->
    <require-prop property="stamp.solvergen.analysis"
		  description="CFL Solver analysis to process"/>
    <prop-default property="stamp.solvergen.logging" default="true"
		  description="whether to enable logging in the generated solver"/>
    <prop-default property="stamp.solvergen.debug" default="false"
		  description="whether to store debugging symbols in the generated solver"/>
    <prop-default property="stamp.solvergen.profiling" default="false"
		  description="whether to enable profiling output for the generated solver"/>
    <prop-default property="stamp.solvergen.pathrecord" default="false"
		  description="whether to enable path recording in the generated solver"/>

    <!-- Set compiler flags. -->
    <prop-ite property="stamp.solvergen.logging.flag"
	      condition="${stamp.solvergen.logging}" then="-DLOGGING" else=""/>
    <prop-ite property="stamp.solvergen.debug.flag"
	      condition="${stamp.solvergen.debug}" then="-g" else=""/>
    <prop-ite property="stamp.solvergen.profiling.flag"
	      condition="${stamp.solvergen.profiling}"
	      then="-DPROFILING" else=""/>
    <prop-ite property="stamp.solvergen.pathrecord.flag"
	      condition="${stamp.solvergen.pathrecord}"
	      then="-DPATH_RECORDING" else=""/>

    <!-- Locate relevant files. -->
    <property name="stamp.solvergen.analysis.cfg"
	      location="${stamp.dir}/solvergen/analyses/${stamp.solvergen.analysis}.cfg"/>
    <require-file file="${stamp.solvergen.analysis.cfg}"/>
    <replace-ext property="stamp.solvergen.analysis.cpp"
		 file="${stamp.solvergen.analysis.cfg}"
		 destdir="${stamp.out.dir}" oldext="cfg" newext="cpp"/>
    <property name="stamp.solvergen.executable"
	      location="${stamp.out.dir}/${stamp.solvergen.analysis}"/>

    <!-- Produce CFL Solver code from the input grammar. -->
    <exec executable="python" spawn="false" failonerror="true">
      <arg file="${stamp.dir}/solvergen/cfg_parser.py"/>
      <arg file="${stamp.solvergen.analysis.cfg}"/>
      <arg file="${stamp.out.dir}"/>
    </exec>

    <!-- Compile and link the analysis code with the CFL Solver engine. -->
    <exec executable="g++" dir="${stamp.out.dir}"
	  spawn="false" failonerror="true">
      <arg line="-std=c++11 -Wall -Wextra -pedantic -O2"/>
      <arg line="${stamp.solvergen.logging.flag}"/>
      <arg line="${stamp.solvergen.debug.flag}"/>
      <arg line="${stamp.solvergen.profiling.flag}"/>
      <arg line="${stamp.solvergen.pathrecord.flag}"/>
      <arg value="-o"/><arg file="${stamp.solvergen.executable}"/>
      <arg value="-I"/><arg file="${stamp.dir}/solvergen"/>
      <arg file="${stamp.dir}/solvergen/engine.cpp"/>
      <arg file="${stamp.solvergen.analysis.cpp}"/>
    </exec>
  </target>

  <target name="doc-solvergen">
    <!-- Requires Doxygen v1.8+ and doxypy. -->
    <exec executable="doxygen" dir="${stamp.dir}/solvergen"
	  spawn="false" failonerror="true"/>
  </target>
</project>
