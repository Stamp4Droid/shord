<?xml version="1.0" encoding="UTF-8"?>
<project name="STAMP-DexToJar">

  <property name="stamp.d2j" value="dexpler"/>

  <target name="apk-to-jar">
	<echo>Converting dex to jar</echo>
	<antcall target="-apk-to-jar-${stamp.d2j}"/>
  </target>

  <target name="-apk-to-jar-dex2jar">
	<property name="dex2jar.dir" location="${stamp.dir}/dex2jar-0.0.9.13"/>

    <!-- 1. Convert dex to jar -->
    <exec executable="${dex2jar.dir}/d2j-dex2jar.sh"
	  spawn="false" failonerror="true">
      <arg value="-f -o ${app.jar} ${app}"/>
    </exec>

    <!-- 2. Extract the AndroidManifest.xml from the apk and put it in the app jar file -->
    <zip destfile="${app.jar}" update="true">
	  <zipfileset src="${app}" includes="AndroidManifest.xml"/>
	</zip>
  </target>

  <target name="-apk-to-jar-dexpler">
	<property name="dexpler.dir" location="${stamp.dir}/dexpler"/>

    <!-- 1. Convert dex to jar -->
	<java classname="stamp.DexplerRunner" maxmemory="${stamp.maxheap}" fork="true" failonerror="true">
      <jvmarg value="-ea"/>
      <classpath>
		<pathelement location="${stamp.dir}/main/stamp.main.jar"/>
		<pathelement location="${stamp.dir}/lib/soot.jar"/>
		<!--pathelement location="/home/saswat/work/mysoot/soot-github/lib/soot-develop.jar"/-->
		<pathelement location="${dexpler.dir}/baksmali-1.3.2.jar"/>
	  </classpath>
      <sysproperty key="stamp.out.dir" value="${stamp.out.dir}"/>
      <sysproperty key="stamp.dump.jimple" value="true"/>
	  <sysproperty key="stamp.jimple.outdir" value="${stamp.out.dir}/jimple"/>
	  <!--arg value="-debug-resolver"/-->
	  <arg value="-prepend-classpath"/>
	  <arg value="-soot-classpath"/>
	  <arg value="${app}"/>
	  <!--arg value="-android-jars"/>
	  <arg value="${dexpler.dir}/android-platforms"/-->
	  <arg value="-force-android-jar"/>
	  <arg value="${dexpler.dir}/android-platforms/android-15/android.jar"/>
	  <arg value="-allow-phantom-refs"/>
	  <arg value="-src-prec"/>
	  <arg value="apk"/>
	  <arg value="-ire"/>
	  <arg value="-process-dir"/>
	  <arg value="${app}"/>
	  <arg value="-outjar"/>
	  <arg value="-output-dir"/>
	  <arg value="${app.jar}"/>
	  <arg value="-oaat"/>
	  <arg value="-p"/>
	  <arg value="tag"/>
	  <arg value="enabled:off"/>
	</java>

    <!-- 2. Extract the AndroidManifest.xml from the apk and put it in the app jar file -->
    <zip destfile="${app.jar}" update="true">
	  <zipfileset src="${app}" includes="AndroidManifest.xml"/>
	</zip>
  </target>

  <!--target name="-build-app-apk"
		  depends="build,apk-to-jar"-->
  <target name="-build-app-apk"
		  depends="build">
	<property name="stamp.input.type" value="apk"/>
	<property name="app.jar" value="${app.loc}"/>
	<echo>${app.jar}</echo>
    <!-- copy stamp_annotations.txt-->
	<concat destfile="${stamp.out.dir}/stamp_annotations.txt" append="true">
	  <fileset file="${stamp.dir}/android/stamp_annotations.txt"/>
	</concat>

    <!-- Generate harness. -->
    <java classname="stamp.harnessgen.Main"
	  maxmemory="${stamp.maxheap}"
	  fork="true"
	  failonerror="true">
      <jvmarg value="-ea"/>
      <classpath>
		<pathelement location="${stamp.dir}/stamp.jar"/>
		<pathelement location="${stamp.dir}/lib/AXMLPrinter2.jar"/>
		<pathelement location="${stamp.dir}/lib/soot.jar"/>
		<pathelement location="${stamp.dir}/dexpler/baksmali-1.3.2.jar"/>
      </classpath>
      <arg value="${driver.dir}"/>
      <arg value="${app.jar}"/>
	  <arg value="${stamp.dir}/android/stamp.android.jar"/>
    </java>
  </target>

  <target name="-analyze-apk"
		  depends="-build-app-apk,-run-analysis-apk">
	<exec executable="python" failonerror="true">
	  <arg value="${stamp.dir}/scripts/testApkJar.py"/>
	  <arg value="-c"/>
	  <arg value="${stamp.dir}/scripts/srcClass.xml"/>
	  <arg value="-k"/>
	  <arg value="${stamp.dir}/scripts/sinkClass.xml"/>
	  <arg value="-r"/>
	  <arg value="${stamp.out.dir}/results"/>
	</exec>
  </target>

  <target name="-run-analysis-apk">
    <!-- Configure remaining Chord settings. -->
    <property name="stamp.analyses"
	      value="inject-annot,base-java,annot-java,contexts-java,contextify-dlog,kcfa-pta-dlog,kcfa-flow-dlog,post-cs-dlog,post-java"/>

    <!-- Run Chord. -->
    <java classname="shord.project.Boot" fork="true" failonerror="true">
      <jvmarg value="-ea"/>
      <sysproperty key="chord.work.dir" file="${stamp.out.dir}"/>
      <sysproperty key="chord.main.class" value="edu.stanford.stamp.harness.Main"/>
      <sysproperty key="chord.class.path" path="${stamp.dir}/android/stamp.android.jar:${app.jar}:${driver.dir}"/>
      <sysproperty key="chord.std.java.analysis.path" path="${stamp.dir}/stamp.jar:${stamp.dir}/scanner/stamp.scanner.jar"/>
      <sysproperty key="chord.std.dlog.analysis.path" path="${stamp.dir}/stamp.jar"/>
      <sysproperty key="chord.run.analyses" value="${stamp.analyses}"/>
      <sysproperty key="chord.std.scope.exclude" value=""/>
      <sysproperty key="chord.ext.scope.exclude" value=""/>
      <sysproperty key="chord.std.check.exclude" value=""/>
      <sysproperty key="chord.ext.check.exclude" value=""/>
      <sysproperty key="chord.verbose" value="${chord.verbose}"/>
      <sysproperty key="chord.print.rels" value="${stamp.printrels}"/>
      <sysproperty key="chord.max.heap" value="${chord.max.heap}"/>
      <sysproperty key="chord.bddbddb.max.heap" value="${chord.bddbddb.max.heap}"/>
      <sysproperty key="stamp.dir" value="${stamp.dir}"/>
      <sysproperty key="stamp.out.dir" value="${stamp.out.dir}"/>
	  <sysproperty key="stamp.input.type" value="${stamp.input.type}"/>
      <classpath>
		<pathelement location="${stamp.dir}/stamp.jar"/>
		<pathelement location="${stamp.dir}/lib/soot.jar"/>
		<pathelement location="${stamp.dir}/lib/commons-lang3-3.1.jar"/>
		<pathelement location="${stamp.dir}/chord/stamp.chord.jar"/>
      </classpath>
    </java>
  </target>

</project>
