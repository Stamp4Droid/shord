<?xml version="1.0" encoding="UTF-8"?>
<project name="STAMP-DroidRecord">

    <target name="-setup-droidrecord-env">
      <!-- Fixme: Code copied from analyze, there should be a better way to 
                    run droidrecord that supports both source and APKs. -->
      <if>
        <isset property="stamp.droidrecord.logdir"/>
        <then/>
        <else>
         <if>
          <isset property="stamp.out.dir"/>
          <then/>
          <else>
    		<property name="stamp.out.dir" value="${stamp.dir}/stamp_output/${app.loc.1}"/>
    		<delete dir="${stamp.out.dir}"/>
    		<mkdir dir="${stamp.out.dir}"/>
    	  </else>
    	 </if>
    	 <if>
    	  <matches string="${app}" pattern="^.*\.apk$"/>
          <then>
            <fail>
            Droidrecord doesn't currently support dynamic analysis of APK files (only source). 
            This is not a fundamental problem, but requires some build system re-factoring. 
            If you really need this, please bug me. -- Lazaro
            </fail>
          </then>
    	  <else>
    		<property name="stamp.input.type" value="src"/>
    		<antcall target="-build-app"/>
    	  </else>
         </if>  
        </else>
      </if>
      <!-- End Fixme -->
      <property name="stamp.droidrecord.logdir" value="${stamp.out.dir}/droidrecord"/>
      <property name="stamp.droidrecord.logfile.text" value="${stamp.droidrecord.logdir}/droidrecord.log"/>
      <property name="stamp.droidrecord.logfile.bin" value="${stamp.droidrecord.logdir}/droidrecord.log.bin"/>
      
    </target>

  <target name="-check-droidrecord-present">
    <available file="${stamp.dir}/droidrecord/build.xml" property="stamp.droidrecord.present" />
  </target>

  <target name="-safe-clean-droidrecord"
        depends="-check-droidrecord-present"
        if="${stamp.droidrecord.present}">
    <ant antfile="${stamp.dir}/droidrecord/build.xml" target="clean"
	 inheritAll="false" useNativeBasedir="true"/>
  </target>

  <target name="-safe-build-droidrecord"
        depends="-check-droidrecord-present"
        if="${stamp.droidrecord.present}">
    <ant antfile="${stamp.dir}/droidrecord/build.xml"
	 inheritAll="false" useNativeBasedir="true"/>
  </target>

  <target name="dynanalyze"
          if="${stamp.droidrecord.present}"
          depends="-check-droidrecord-present,-setup-droidrecord-env">
    <if>
      <available file="${stamp.droidrecord.logfile.text}"/>
      <then>
        <antcall target="-log-available-dynanalyze"/>
      </then>
      <else>
        <input message="Missing DroidRecord trace information. Do you want to run the instrumented app now to generate a droidrecord.log file?"
               validargs="y,n"
               addproperty="stamp.droidrecord.dorun"/>
        <if>
          <equals arg1="${stamp.droidrecord.dorun}" arg2="n" />
          <then>
            <fail message="Dynamic analysis information is only available if a trace has been generated for the app and saved to [app_dir]/sdcard/droidrecord.log." />
          </then>
        </if>
        <antcall target="droidrecord-run" />
        <antcall target="-log-available-dynanalyze" />
      </else>
    </if>
  </target>

  <target name="-log-available-dynanalyze"
        depends="analyze,
                -safe-build-droidrecord,
                -run-droidrecord-dyn-callback-analysis,
                -run-droidrecord-dyn-api-calls-analysis" />
  
  <target name="-run-droidrecord-dyn-callback-analysis"
        if="${stamp.droidrecord.present}">
    <exec executable="python"
	  spawn="false"
	  failonerror="true">
      <arg value="${stamp.dir}/droidrecord/analysis/callbacks.py"/>
      <arg value="-r"/>
      <arg line="-s ${stamp.out.dir}/results/PotentialCallbacks.xml"/>
      <arg line="-o ${stamp.out.dir}/results/PotentialCallbacksDynamic.xml"/>
      <arg value="${stamp.droidrecord.logfile.text}"/>
    </exec>
    <echo file="${stamp.out.dir}/reports.txt" append="true">Possibly-missing Callback Methods (Dynamic Information) ${stamp.out.dir}/results/PotentialCallbacksDynamic.xml
    </echo>
  </target>
  
  <target name="-run-droidrecord-dyn-api-calls-analysis"
        if="${stamp.droidrecord.present}">
    <exec executable="python"
	  spawn="false"
	  failonerror="true">
      <arg value="${stamp.dir}/droidrecord/analysis/apicalls.py"/>
      <arg line="-o ${stamp.out.dir}/results/ApiCallInformationDynamic.xml"/>
      <arg value="${stamp.droidrecord.logfile.text}"/>
    </exec>
    <echo file="${stamp.out.dir}/reports.txt" append="true">Arguments to API Calls (Dynamic Information) ${stamp.out.dir}/results/ApiCallInformationDynamic.xml
    </echo>
  </target>

  <property name="stamp.droidrecord.script.prepareapp"
	    value="${stamp.dir}/droidrecord/extra/utils/scripts/prepare_app.py" />

  <target name="droidrecord-run" depends="-safe-build-droidrecord,-setup-droidrecord-env"
          if="${stamp.droidrecord.present}">
    <exec executable="python"
	  spawn="false"
	  failonerror="true">
      <arg value="${stamp.droidrecord.script.prepareapp}"/>
      <arg value="${app.loc}"/>
    </exec>
    <ant antfile="${app.loc}/build.droidrecord.xml" target="debug"
	 inheritAll="false" useNativeBasedir="true"/>
    <ant antfile="${app.loc}/build.droidrecord.xml" target="installd"
	 inheritAll="false" useNativeBasedir="true">
        <property name="adb.device.arg" value="${stamp.dynamic.device.arg}"/>
    </ant>
    <input message="Use the app inside the emulator to produce a DroidRecord trace log. Enter 'd' once you are done:"
           validargs="D,d"/>
    <mkdir dir="${stamp.droidrecord.logdir}"/>
    <exec executable="adb"
	  spawn="false"
	  failonerror="true">
      <arg line="${stamp.dynamic.device.arg} pull sdcard/droidrecord.log ${stamp.droidrecord.logfile.text}"/>
    </exec>
    <exec executable="adb"
      spawn="false"
	  failonerror="true">
      <arg line="${stamp.dynamic.device.arg} pull sdcard/droidrecord.log.bin ${stamp.droidrecord.logfile.bin}"/>
    </exec>
    <exec executable="adb"
	  spawn="false"
	  failonerror="true">
      <arg line="${stamp.dynamic.device.arg} shell rm /sdcard/droidrecord.*"/>
    </exec>
  </target>

</project>
